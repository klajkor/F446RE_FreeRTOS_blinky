
F446RE_FreeRTOS_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800721c  0800721c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007224  08007224  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800722c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045f8  2000007c  080072a8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004674  080072a8  00024674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178d5  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033cc  00000000  00000000  00037981  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003ad50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003c0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024cf2  00000000  00000000  0003d288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f51c  00000000  00000000  00061f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9c03  00000000  00000000  00071496  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b099  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c4  00000000  00000000  0014b114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fc0 	.word	0x08006fc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006fc0 	.word	0x08006fc0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000098 	.word	0x20000098
 80005e0:	200000ec 	.word	0x200000ec

080005e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetTimerTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetTimerTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	200002ec 	.word	0x200002ec
 8000614:	20000340 	.word	0x20000340

08000618 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	b29a      	uxth	r2, r3
 8000628:	230a      	movs	r3, #10
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <_write+0x24>)
 800062e:	f001 ff66 	bl	80024fe <HAL_UART_Transmit>
	return len;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000459c 	.word	0x2000459c

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fc37 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f883 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f91d 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f8f1 	bl	8000838 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  char *str0 = "\r\n\r\nInit Done\r\n";
 8000656:	4b33      	ldr	r3, [pc, #204]	; (8000724 <main+0xe4>)
 8000658:	66fb      	str	r3, [r7, #108]	; 0x6c
  printf(str0);
 800065a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800065c:	f005 fdcc 	bl	80061f8 <iprintf>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000660:	2300      	movs	r3, #0
 8000662:	667b      	str	r3, [r7, #100]	; 0x64
 8000664:	2300      	movs	r3, #0
 8000666:	66bb      	str	r3, [r7, #104]	; 0x68
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000668:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fca7 	bl	8002fc0 <osMutexCreate>
 8000672:	4602      	mov	r2, r0
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <main+0xe8>)
 8000676:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of periodicTimer */
  osTimerDef(periodicTimer, PTCallback);
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <main+0xec>)
 800067a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800067c:	2300      	movs	r3, #0
 800067e:	663b      	str	r3, [r7, #96]	; 0x60
  periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);
 8000680:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000684:	2200      	movs	r2, #0
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fc29 	bl	8002ee0 <osTimerCreate>
 800068e:	4602      	mov	r2, r0
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <main+0xf0>)
 8000692:	601a      	str	r2, [r3, #0]

  /* definition and creation of onceTimer */
  osTimerDef(onceTimer, OTCallback);
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <main+0xf4>)
 8000696:	657b      	str	r3, [r7, #84]	; 0x54
 8000698:	2300      	movs	r3, #0
 800069a:	65bb      	str	r3, [r7, #88]	; 0x58
  onceTimerHandle = osTimerCreate(osTimer(onceTimer), osTimerOnce, NULL);
 800069c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fc1b 	bl	8002ee0 <osTimerCreate>
 80006aa:	4602      	mov	r2, r0
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <main+0xf8>)
 80006ae:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, StartBlink01, osPriorityNormal, 0, 1024);
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <main+0xfc>)
 80006b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006b6:	461d      	mov	r5, r3
 80006b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 80006c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fba7 	bl	8002e1e <osThreadCreate>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <main+0x100>)
 80006d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink02 */
  osThreadDef(blink02, StartBlink02, osPriorityNormal, 0, 1024);
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <main+0x104>)
 80006d8:	f107 041c 	add.w	r4, r7, #28
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink02Handle = osThreadCreate(osThread(blink02), NULL);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fb94 	bl	8002e1e <osThreadCreate>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <main+0x108>)
 80006fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of readButton03 */
  osThreadDef(readButton03, StartReadButton03, osPriorityBelowNormal, 0, 1024);
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <main+0x10c>)
 80006fe:	463c      	mov	r4, r7
 8000700:	461d      	mov	r5, r3
 8000702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000706:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readButton03Handle = osThreadCreate(osThread(readButton03), NULL);
 800070e:	463b      	mov	r3, r7
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fb83 	bl	8002e1e <osThreadCreate>
 8000718:	4602      	mov	r2, r0
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <main+0x110>)
 800071c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800071e:	f002 fb77 	bl	8002e10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000722:	e7fe      	b.n	8000722 <main+0xe2>
 8000724:	08006fd8 	.word	0x08006fd8
 8000728:	200045e0 	.word	0x200045e0
 800072c:	08000ae5 	.word	0x08000ae5
 8000730:	200045e4 	.word	0x200045e4
 8000734:	08000af9 	.word	0x08000af9
 8000738:	20004598 	.word	0x20004598
 800073c:	08006ff0 	.word	0x08006ff0
 8000740:	200045dc 	.word	0x200045dc
 8000744:	08007014 	.word	0x08007014
 8000748:	200045e8 	.word	0x200045e8
 800074c:	08007040 	.word	0x08007040
 8000750:	20004594 	.word	0x20004594

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2234      	movs	r2, #52	; 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 fd3f 	bl	80061e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <SystemClock_Config+0xdc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <SystemClock_Config+0xdc>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xdc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <SystemClock_Config+0xe0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <SystemClock_Config+0xe0>)
 800079e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xe0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007c8:	23b4      	movs	r3, #180	; 0xb4
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f9a9 	bl	8001b34 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007e8:	f000 f9ac 	bl	8000b44 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ec:	f000 fe66 	bl	80014bc <HAL_PWREx_EnableOverDrive>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007f6:	f000 f9a5 	bl	8000b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	2105      	movs	r1, #5
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fe9f 	bl	800155c <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000824:	f000 f98e 	bl	8000b44 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f001 fdf8 	bl	8002464 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f963 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000459c 	.word	0x2000459c
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2c      	ldr	r2, [pc, #176]	; (800095c <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a25      	ldr	r2, [pc, #148]	; (800095c <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_GPIO_Init+0xd0>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_GPIO_Init+0xd4>)
 8000918:	f000 fd9c 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_GPIO_Init+0xd8>)
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_GPIO_Init+0xdc>)
 8000932:	f000 fbe5 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000936:	2320      	movs	r3, #32
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_GPIO_Init+0xd4>)
 800094e:	f000 fbd7 	bl	8001100 <HAL_GPIO_Init>

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000
 8000964:	10210000 	.word	0x10210000
 8000968:	40020800 	.word	0x40020800

0800096c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void const * argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	//osTimerStart(periodicTimerHandle, 5000U);
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000974:	2120      	movs	r1, #32
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <StartBlink01+0x24>)
 8000978:	f000 fd85 	bl	8001486 <HAL_GPIO_TogglePin>
		osDelay(Led_Delay * Delay_Multiplier);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <StartBlink01+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <StartBlink01+0x2c>)
 8000982:	6812      	ldr	r2, [r2, #0]
 8000984:	fb02 f303 	mul.w	r3, r2, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f002 fa94 	bl	8002eb6 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800098e:	e7f1      	b.n	8000974 <StartBlink01+0x8>
 8000990:	40020000 	.word	0x40020000
 8000994:	20000000 	.word	0x20000000
 8000998:	20000004 	.word	0x20000004

0800099c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void const * argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		if (1)
		{
			if (osMutexWait(myMutex01Handle, 10U) == osOK)
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <StartBlink02+0x78>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	210a      	movs	r1, #10
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fb20 	bl	8002ff0 <osMutexWait>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d11f      	bne.n	80009f6 <StartBlink02+0x5a>
			{
				char *str1 = "Bl02> Mutex taken\r\n";
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <StartBlink02+0x7c>)
 80009b8:	613b      	str	r3, [r7, #16]
				printf(str1);
 80009ba:	6938      	ldr	r0, [r7, #16]
 80009bc:	f005 fc1c 	bl	80061f8 <iprintf>
				if (Delay_Multiplier != 4)
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <StartBlink02+0x80>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d007      	beq.n	80009d8 <StartBlink02+0x3c>
				{
					Delay_Multiplier = 4;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <StartBlink02+0x80>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	601a      	str	r2, [r3, #0]
					char *str2 = "Bl02> Multiplier set to 4\r\n";
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <StartBlink02+0x84>)
 80009d0:	60fb      	str	r3, [r7, #12]
					printf(str2);
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f005 fc10 	bl	80061f8 <iprintf>
				}
				osDelay(5000);
 80009d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80009dc:	f002 fa6b 	bl	8002eb6 <osDelay>
				osMutexRelease(myMutex01Handle);
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <StartBlink02+0x78>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fb51 	bl	800308c <osMutexRelease>
				char *str3 = "Bl02> Mutex released\r\n";
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <StartBlink02+0x88>)
 80009ec:	60bb      	str	r3, [r7, #8]
				printf(str3);
 80009ee:	68b8      	ldr	r0, [r7, #8]
 80009f0:	f005 fc02 	bl	80061f8 <iprintf>
 80009f4:	e008      	b.n	8000a08 <StartBlink02+0x6c>
			}
			else
			{
				char *str4 = "Bl02> !! Mutex NOT taken\r\n";
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <StartBlink02+0x8c>)
 80009f8:	617b      	str	r3, [r7, #20]
				printf(str4);
 80009fa:	6978      	ldr	r0, [r7, #20]
 80009fc:	f005 fbfc 	bl	80061f8 <iprintf>
				osDelay(5000);
 8000a00:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a04:	f002 fa57 	bl	8002eb6 <osDelay>
			}
			osDelay(5000);
 8000a08:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a0c:	f002 fa53 	bl	8002eb6 <osDelay>
		if (1)
 8000a10:	e7c8      	b.n	80009a4 <StartBlink02+0x8>
 8000a12:	bf00      	nop
 8000a14:	200045e0 	.word	0x200045e0
 8000a18:	0800705c 	.word	0x0800705c
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	08007070 	.word	0x08007070
 8000a24:	0800708c 	.word	0x0800708c
 8000a28:	080070a4 	.word	0x080070a4

08000a2c <StartReadButton03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadButton03 */
void StartReadButton03(void const * argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadButton03 */
	/* Infinite loop */
	osTimerStop(onceTimerHandle);
 8000a34:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <StartReadButton03+0x98>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fa85 	bl	8002f48 <osTimerStop>
	for(;;)
	{
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <StartReadButton03+0x9c>)
 8000a44:	f000 fcee 	bl	8001424 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <StartReadButton03+0x2a>
		{
			osDelay(0);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f002 fa31 	bl	8002eb6 <osDelay>
 8000a54:	e031      	b.n	8000aba <StartReadButton03+0x8e>
		}
		else
		{
			// Button pushed
			if (Delay_Multiplier != 1)
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <StartReadButton03+0xa0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d02a      	beq.n	8000ab4 <StartReadButton03+0x88>
			{
				if (osMutexWait(myMutex01Handle, 10U) == osOK)
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <StartReadButton03+0xa4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	210a      	movs	r1, #10
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fac3 	bl	8002ff0 <osMutexWait>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d11c      	bne.n	8000aaa <StartReadButton03+0x7e>
				{
					char *str03_1 = ">Bt03>>> Mutex taken\r\n";
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <StartReadButton03+0xa8>)
 8000a72:	613b      	str	r3, [r7, #16]
					printf(str03_1);
 8000a74:	6938      	ldr	r0, [r7, #16]
 8000a76:	f005 fbbf 	bl	80061f8 <iprintf>
					osTimerStop(onceTimerHandle);
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <StartReadButton03+0x98>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fa62 	bl	8002f48 <osTimerStop>
					//osTimerStart(onceTimerHandle, 5000U);
					//char *str03_2 = ">Bt03> One Shot Timer started\r\n";
					//printf(str03_2);
					Delay_Multiplier = 1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <StartReadButton03+0xa0>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
					char *str03_3 = ">Bt03>>> Multiplier set to 1\r\n";
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <StartReadButton03+0xac>)
 8000a8c:	60fb      	str	r3, [r7, #12]
					printf(str03_3);
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f005 fbb2 	bl	80061f8 <iprintf>
					osMutexRelease(myMutex01Handle);
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <StartReadButton03+0xa4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 faf7 	bl	800308c <osMutexRelease>
					char *str03_4 = ">Bt03>>> Mutex released\r\n";
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <StartReadButton03+0xb0>)
 8000aa0:	60bb      	str	r3, [r7, #8]
					printf(str03_4);
 8000aa2:	68b8      	ldr	r0, [r7, #8]
 8000aa4:	f005 fba8 	bl	80061f8 <iprintf>
 8000aa8:	e004      	b.n	8000ab4 <StartReadButton03+0x88>
				}
				else
				{
					char *str03_5 = ">Bt03>>> !! Mutex NOT taken\r\n";
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <StartReadButton03+0xb4>)
 8000aac:	617b      	str	r3, [r7, #20]
					printf(str03_5);
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f005 fba2 	bl	80061f8 <iprintf>
				}
			}
			osDelay(10);
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f002 f9fe 	bl	8002eb6 <osDelay>

		}
		osDelay(1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f002 f9fb 	bl	8002eb6 <osDelay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000ac0:	e7bd      	b.n	8000a3e <StartReadButton03+0x12>
 8000ac2:	bf00      	nop
 8000ac4:	20004598 	.word	0x20004598
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	200045e0 	.word	0x200045e0
 8000ad4:	080070c0 	.word	0x080070c0
 8000ad8:	080070d8 	.word	0x080070d8
 8000adc:	080070f8 	.word	0x080070f8
 8000ae0:	08007114 	.word	0x08007114

08000ae4 <PTCallback>:
  /* USER CODE END StartReadButton03 */
}

/* PTCallback function */
void PTCallback(void const * argument)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
	//HAL_UART_Transmit(&huart2, "Sending from PERIODIC TIMER\r\n", 29, 10);
  /* USER CODE END PTCallback */
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <OTCallback>:

/* OTCallback function */
void OTCallback(void const * argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTCallback */
	Delay_Multiplier = 4;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <OTCallback+0x20>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	601a      	str	r2, [r3, #0]
	char *str3 = ">>>> Multiplier set to 4\r\n";
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <OTCallback+0x24>)
 8000b08:	60fb      	str	r3, [r7, #12]
	printf(str3);
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f005 fb74 	bl	80061f8 <iprintf>
  /* USER CODE END OTCallback */
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000004 	.word	0x20000004
 8000b1c:	08007134 	.word	0x08007134

08000b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b32:	f000 f9e3 	bl	8000efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001000 	.word	0x40001000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <Error_Handler+0x6>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	f06f 0001 	mvn.w	r0, #1
 8000b92:	f000 fa8b 	bl	80010ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_UART_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12b      	bne.n	8000c1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000c1a:	f000 fa71 	bl	8001100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	2036      	movs	r0, #54	; 0x36
 8000c4a:	f000 fa2f 	bl	80010ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c4e:	2036      	movs	r0, #54	; 0x36
 8000c50:	f000 fa48 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_InitTick+0xa4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_InitTick+0xa4>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_InitTick+0xa4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c70:	f107 0210 	add.w	r2, r7, #16
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fd88 	bl	8001790 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c80:	f000 fd5e 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 8000c84:	4603      	mov	r3, r0
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_InitTick+0xa8>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	3b01      	subs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_InitTick+0xac>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_InitTick+0xb0>)
 8000c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_InitTick+0xac>)
 8000ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_InitTick+0xac>)
 8000ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000caa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_InitTick+0xac>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_InitTick+0xac>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <HAL_InitTick+0xac>)
 8000cba:	f001 f995 	bl	8001fe8 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d104      	bne.n	8000cce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <HAL_InitTick+0xac>)
 8000cc6:	f001 f9c4 	bl	8002052 <HAL_TIM_Base_Start_IT>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3730      	adds	r7, #48	; 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	200045ec 	.word	0x200045ec
 8000ce4:	40001000 	.word	0x40001000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <TIM6_DAC_IRQHandler+0x10>)
 8000d1a:	f001 f9be 	bl	800209a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200045ec 	.word	0x200045ec

08000d28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e00a      	b.n	8000d50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d3a:	f3af 8000 	nop.w
 8000d3e:	4601      	mov	r1, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	b2ca      	uxtb	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf0      	blt.n	8000d3a <_read+0x12>
	}

return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
	return -1;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_isatty>:

int _isatty(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	return 1;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f005 f9be 	bl	800617c <__errno>
 8000e00:	4602      	mov	r2, r0
 8000e02:	230c      	movs	r3, #12
 8000e04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20020000 	.word	0x20020000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	20000740 	.word	0x20000740
 8000e34:	20004678 	.word	0x20004678

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <SystemInit+0x28>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <SystemInit+0x28>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SystemInit+0x28>)
 8000e4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e52:	609a      	str	r2, [r3, #8]
#endif
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e6a:	e003      	b.n	8000e74 <LoopCopyDataInit>

08000e6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e72:	3104      	adds	r1, #4

08000e74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e7c:	d3f6      	bcc.n	8000e6c <CopyDataInit>
  ldr  r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e80:	e002      	b.n	8000e88 <LoopFillZerobss>

08000e82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e84:	f842 3b04 	str.w	r3, [r2], #4

08000e88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e8c:	d3f9      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd3 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f005 f979 	bl	8006188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fbd3 	bl	8000640 <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ea0:	0800722c 	.word	0x0800722c
  ldr  r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ea8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000eac:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000eb0:	20004674 	.word	0x20004674

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8d8 	bl	8001096 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fea4 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff fe2e 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	2000462c 	.word	0x2000462c

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	2000462c 	.word	0x2000462c

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff4c 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010be:	f7ff ff61 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	6978      	ldr	r0, [r7, #20]
 80010ca:	f7ff ffb1 	bl	8001030 <NVIC_EncodePriority>
 80010ce:	4602      	mov	r2, r0
 80010d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff80 	bl	8000fdc <__NVIC_SetPriority>
}
 80010dc:	bf00      	nop
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff54 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	e165      	b.n	80013e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f040 8154 	bne.w	80013e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d00b      	beq.n	800115a <HAL_GPIO_Init+0x5a>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114e:	2b11      	cmp	r3, #17
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b12      	cmp	r3, #18
 8001158:	d130      	bne.n	80011bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0xfc>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b12      	cmp	r3, #18
 80011fa:	d123      	bne.n	8001244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	69b9      	ldr	r1, [r7, #24]
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0203 	and.w	r2, r3, #3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80ae 	beq.w	80013e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <HAL_GPIO_Init+0x2fc>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a5b      	ldr	r2, [pc, #364]	; (80013fc <HAL_GPIO_Init+0x2fc>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_GPIO_Init+0x2fc>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a57      	ldr	r2, [pc, #348]	; (8001400 <HAL_GPIO_Init+0x300>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_GPIO_Init+0x304>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d025      	beq.n	800131a <HAL_GPIO_Init+0x21a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_GPIO_Init+0x308>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01f      	beq.n	8001316 <HAL_GPIO_Init+0x216>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x30c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x212>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <HAL_GPIO_Init+0x310>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x20e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <HAL_GPIO_Init+0x314>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x20a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a49      	ldr	r2, [pc, #292]	; (8001418 <HAL_GPIO_Init+0x318>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x206>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a48      	ldr	r2, [pc, #288]	; (800141c <HAL_GPIO_Init+0x31c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x202>
 80012fe:	2306      	movs	r3, #6
 8001300:	e00c      	b.n	800131c <HAL_GPIO_Init+0x21c>
 8001302:	2307      	movs	r3, #7
 8001304:	e00a      	b.n	800131c <HAL_GPIO_Init+0x21c>
 8001306:	2305      	movs	r3, #5
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x21c>
 800130a:	2304      	movs	r3, #4
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x21c>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x21c>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x21c>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x21c>
 800131a:	2300      	movs	r3, #0
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132c:	4934      	ldr	r1, [pc, #208]	; (8001400 <HAL_GPIO_Init+0x300>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <HAL_GPIO_Init+0x320>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135e:	4a30      	ldr	r2, [pc, #192]	; (8001420 <HAL_GPIO_Init+0x320>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_GPIO_Init+0x320>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_GPIO_Init+0x320>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_GPIO_Init+0x320>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_GPIO_Init+0x320>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_GPIO_Init+0x320>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_GPIO_Init+0x320>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	f67f ae96 	bls.w	800111c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f0:	bf00      	nop
 80013f2:	3724      	adds	r7, #36	; 0x24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40023800 	.word	0x40023800
 8001400:	40013800 	.word	0x40013800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021000 	.word	0x40021000
 8001418:	40021400 	.word	0x40021400
 800141c:	40021800 	.word	0x40021800
 8001420:	40013c00 	.word	0x40013c00

08001424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e001      	b.n	8001446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	401a      	ands	r2, r3
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	429a      	cmp	r2, r3
 800149e:	d104      	bne.n	80014aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	041a      	lsls	r2, r3, #16
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_PWREx_EnableOverDrive+0x90>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_PWREx_EnableOverDrive+0x94>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e8:	f7ff fd1c 	bl	8000f24 <HAL_GetTick>
 80014ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ee:	e009      	b.n	8001504 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f0:	f7ff fd18 	bl	8000f24 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014fe:	d901      	bls.n	8001504 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e01f      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001510:	d1ee      	bne.n	80014f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff fd04 	bl	8000f24 <HAL_GetTick>
 800151c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800151e:	e009      	b.n	8001534 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001520:	f7ff fd00 	bl	8000f24 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152e:	d901      	bls.n	8001534 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e007      	b.n	8001544 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_PWREx_EnableOverDrive+0x98>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001540:	d1ee      	bne.n	8001520 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	420e0040 	.word	0x420e0040
 8001554:	40007000 	.word	0x40007000
 8001558:	420e0044 	.word	0x420e0044

0800155c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0cc      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b68      	ldr	r3, [pc, #416]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d90c      	bls.n	8001598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b65      	ldr	r3, [pc, #404]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b63      	ldr	r3, [pc, #396]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b8      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a58      	ldr	r2, [pc, #352]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494d      	ldr	r1, [pc, #308]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d044      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d119      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d003      	beq.n	800161a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e067      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4934      	ldr	r1, [pc, #208]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fc6a 	bl	8000f24 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff fc66 	bl	8000f24 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e04f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d20c      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e032      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4916      	ldr	r1, [pc, #88]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490e      	ldr	r1, [pc, #56]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f887 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80016e6:	4601      	mov	r1, r0
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	fa21 f303 	lsr.w	r3, r1, r3
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fa96 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00
 8001718:	40023800 	.word	0x40023800
 800171c:	0800716c 	.word	0x0800716c
 8001720:	20000008 	.word	0x20000008
 8001724:	2000000c 	.word	0x2000000c

08001728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_RCC_GetHCLKFreq+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000008 	.word	0x20000008

08001740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001744:	f7ff fff0 	bl	8001728 <HAL_RCC_GetHCLKFreq>
 8001748:	4601      	mov	r1, r0
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	0a9b      	lsrs	r3, r3, #10
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	0800717c 	.word	0x0800717c

08001768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800176c:	f7ff ffdc 	bl	8001728 <HAL_RCC_GetHCLKFreq>
 8001770:	4601      	mov	r1, r0
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	0b5b      	lsrs	r3, r3, #13
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_RCC_GetPCLK2Freq+0x24>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	0800717c 	.word	0x0800717c

08001790 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	220f      	movs	r2, #15
 800179e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0203 	and.w	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_RCC_GetClockConfig+0x60>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 020f 	and.w	r2, r3, #15
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180e:	4bc6      	ldr	r3, [pc, #792]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b0c      	cmp	r3, #12
 8001818:	f200 817e 	bhi.w	8001b18 <HAL_RCC_GetSysClockFreq+0x324>
 800181c:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <HAL_RCC_GetSysClockFreq+0x30>)
 800181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001822:	bf00      	nop
 8001824:	08001859 	.word	0x08001859
 8001828:	08001b19 	.word	0x08001b19
 800182c:	08001b19 	.word	0x08001b19
 8001830:	08001b19 	.word	0x08001b19
 8001834:	0800185f 	.word	0x0800185f
 8001838:	08001b19 	.word	0x08001b19
 800183c:	08001b19 	.word	0x08001b19
 8001840:	08001b19 	.word	0x08001b19
 8001844:	08001865 	.word	0x08001865
 8001848:	08001b19 	.word	0x08001b19
 800184c:	08001b19 	.word	0x08001b19
 8001850:	08001b19 	.word	0x08001b19
 8001854:	080019c1 	.word	0x080019c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4bb4      	ldr	r3, [pc, #720]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x338>)
 800185a:	613b      	str	r3, [r7, #16]
       break;
 800185c:	e15f      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4bb4      	ldr	r3, [pc, #720]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001860:	613b      	str	r3, [r7, #16]
      break;
 8001862:	e15c      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4bb0      	ldr	r3, [pc, #704]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800186c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186e:	4bae      	ldr	r3, [pc, #696]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d04a      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4bab      	ldr	r3, [pc, #684]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	f04f 0400 	mov.w	r4, #0
 8001884:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	ea03 0501 	and.w	r5, r3, r1
 8001890:	ea04 0602 	and.w	r6, r4, r2
 8001894:	4629      	mov	r1, r5
 8001896:	4632      	mov	r2, r6
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	f04f 0400 	mov.w	r4, #0
 80018a0:	0154      	lsls	r4, r2, #5
 80018a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018a6:	014b      	lsls	r3, r1, #5
 80018a8:	4619      	mov	r1, r3
 80018aa:	4622      	mov	r2, r4
 80018ac:	1b49      	subs	r1, r1, r5
 80018ae:	eb62 0206 	sbc.w	r2, r2, r6
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	f04f 0400 	mov.w	r4, #0
 80018ba:	0194      	lsls	r4, r2, #6
 80018bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018c0:	018b      	lsls	r3, r1, #6
 80018c2:	1a5b      	subs	r3, r3, r1
 80018c4:	eb64 0402 	sbc.w	r4, r4, r2
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	00e2      	lsls	r2, r4, #3
 80018d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018d6:	00d9      	lsls	r1, r3, #3
 80018d8:	460b      	mov	r3, r1
 80018da:	4614      	mov	r4, r2
 80018dc:	195b      	adds	r3, r3, r5
 80018de:	eb44 0406 	adc.w	r4, r4, r6
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	0262      	lsls	r2, r4, #9
 80018ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018f0:	0259      	lsls	r1, r3, #9
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	4621      	mov	r1, r4
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f04f 0400 	mov.w	r4, #0
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	f7fe fcd4 	bl	80002b0 <__aeabi_uldivmod>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e049      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001910:	4b85      	ldr	r3, [pc, #532]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	f04f 0400 	mov.w	r4, #0
 800191a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	ea03 0501 	and.w	r5, r3, r1
 8001926:	ea04 0602 	and.w	r6, r4, r2
 800192a:	4629      	mov	r1, r5
 800192c:	4632      	mov	r2, r6
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f04f 0400 	mov.w	r4, #0
 8001936:	0154      	lsls	r4, r2, #5
 8001938:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800193c:	014b      	lsls	r3, r1, #5
 800193e:	4619      	mov	r1, r3
 8001940:	4622      	mov	r2, r4
 8001942:	1b49      	subs	r1, r1, r5
 8001944:	eb62 0206 	sbc.w	r2, r2, r6
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f04f 0400 	mov.w	r4, #0
 8001950:	0194      	lsls	r4, r2, #6
 8001952:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001956:	018b      	lsls	r3, r1, #6
 8001958:	1a5b      	subs	r3, r3, r1
 800195a:	eb64 0402 	sbc.w	r4, r4, r2
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	00e2      	lsls	r2, r4, #3
 8001968:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800196c:	00d9      	lsls	r1, r3, #3
 800196e:	460b      	mov	r3, r1
 8001970:	4614      	mov	r4, r2
 8001972:	195b      	adds	r3, r3, r5
 8001974:	eb44 0406 	adc.w	r4, r4, r6
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	02a2      	lsls	r2, r4, #10
 8001982:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001986:	0299      	lsls	r1, r3, #10
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	4618      	mov	r0, r3
 800198e:	4621      	mov	r1, r4
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f04f 0400 	mov.w	r4, #0
 8001996:	461a      	mov	r2, r3
 8001998:	4623      	mov	r3, r4
 800199a:	f7fe fc89 	bl	80002b0 <__aeabi_uldivmod>
 800199e:	4603      	mov	r3, r0
 80019a0:	460c      	mov	r4, r1
 80019a2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a4:	4b60      	ldr	r3, [pc, #384]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	613b      	str	r3, [r7, #16]
      break;
 80019be:	e0ae      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04a      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	ea03 0501 	and.w	r5, r3, r1
 80019ec:	ea04 0602 	and.w	r6, r4, r2
 80019f0:	4629      	mov	r1, r5
 80019f2:	4632      	mov	r2, r6
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	0154      	lsls	r4, r2, #5
 80019fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a02:	014b      	lsls	r3, r1, #5
 8001a04:	4619      	mov	r1, r3
 8001a06:	4622      	mov	r2, r4
 8001a08:	1b49      	subs	r1, r1, r5
 8001a0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	0194      	lsls	r4, r2, #6
 8001a18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a1c:	018b      	lsls	r3, r1, #6
 8001a1e:	1a5b      	subs	r3, r3, r1
 8001a20:	eb64 0402 	sbc.w	r4, r4, r2
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	00e2      	lsls	r2, r4, #3
 8001a2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a32:	00d9      	lsls	r1, r3, #3
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	195b      	adds	r3, r3, r5
 8001a3a:	eb44 0406 	adc.w	r4, r4, r6
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	0262      	lsls	r2, r4, #9
 8001a48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a4c:	0259      	lsls	r1, r3, #9
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4614      	mov	r4, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	4621      	mov	r1, r4
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f04f 0400 	mov.w	r4, #0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	f7fe fc26 	bl	80002b0 <__aeabi_uldivmod>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e049      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	f04f 0400 	mov.w	r4, #0
 8001a76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	ea03 0501 	and.w	r5, r3, r1
 8001a82:	ea04 0602 	and.w	r6, r4, r2
 8001a86:	4629      	mov	r1, r5
 8001a88:	4632      	mov	r2, r6
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	0154      	lsls	r4, r2, #5
 8001a94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a98:	014b      	lsls	r3, r1, #5
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	1b49      	subs	r1, r1, r5
 8001aa0:	eb62 0206 	sbc.w	r2, r2, r6
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	f04f 0400 	mov.w	r4, #0
 8001aac:	0194      	lsls	r4, r2, #6
 8001aae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	1a5b      	subs	r3, r3, r1
 8001ab6:	eb64 0402 	sbc.w	r4, r4, r2
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	00e2      	lsls	r2, r4, #3
 8001ac4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ac8:	00d9      	lsls	r1, r3, #3
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	195b      	adds	r3, r3, r5
 8001ad0:	eb44 0406 	adc.w	r4, r4, r6
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	02a2      	lsls	r2, r4, #10
 8001ade:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ae2:	0299      	lsls	r1, r3, #10
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4621      	mov	r1, r4
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f04f 0400 	mov.w	r4, #0
 8001af2:	461a      	mov	r2, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	f7fe fbdb 	bl	80002b0 <__aeabi_uldivmod>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0f1b      	lsrs	r3, r3, #28
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	613b      	str	r3, [r7, #16]
      break;
 8001b16:	e002      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x338>)
 8001b1a:	613b      	str	r3, [r7, #16]
      break;
 8001b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1e:	693b      	ldr	r3, [r7, #16]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	007a1200 	.word	0x007a1200

08001b34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8083 	beq.w	8001c54 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b4e:	4b95      	ldr	r3, [pc, #596]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d019      	beq.n	8001b8e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b5a:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d106      	bne.n	8001b74 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b66:	4b8f      	ldr	r3, [pc, #572]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b72:	d00c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b74:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d112      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b80:	4b88      	ldr	r3, [pc, #544]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8e:	4b85      	ldr	r3, [pc, #532]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d05b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x11e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d157      	bne.n	8001c52 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e216      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x8a>
 8001bb0:	4b7c      	ldr	r3, [pc, #496]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a7b      	ldr	r2, [pc, #492]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e01d      	b.n	8001bfa <HAL_RCC_OscConfig+0xc6>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0xae>
 8001bc8:	4b76      	ldr	r3, [pc, #472]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a75      	ldr	r2, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b73      	ldr	r3, [pc, #460]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a72      	ldr	r2, [pc, #456]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0xc6>
 8001be2:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6f      	ldr	r2, [pc, #444]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6d      	ldr	r3, [pc, #436]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6c      	ldr	r2, [pc, #432]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d013      	beq.n	8001c2a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f98f 	bl	8000f24 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f98b 	bl	8000f24 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1db      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0xd6>
 8001c28:	e014      	b.n	8001c54 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff f97b 	bl	8000f24 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c32:	f7ff f977 	bl	8000f24 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b64      	cmp	r3, #100	; 0x64
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1c7      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c44:	4b57      	ldr	r3, [pc, #348]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0xfe>
 8001c50:	e000      	b.n	8001c54 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d06f      	beq.n	8001d40 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d017      	beq.n	8001c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d105      	bne.n	8001c84 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c84:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d11c      	bne.n	8001cca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c90:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d116      	bne.n	8001cca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9c:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x180>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e18f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4938      	ldr	r1, [pc, #224]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc8:	e03a      	b.n	8001d40 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d020      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f924 	bl	8000f24 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff f920 	bl	8000f24 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e170      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4925      	ldr	r1, [pc, #148]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
 8001d12:	e015      	b.n	8001d40 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f903 	bl	8000f24 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d22:	f7ff f8ff 	bl	8000f24 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e14f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d037      	beq.n	8001dbc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d016      	beq.n	8001d82 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_RCC_OscConfig+0x278>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f8e3 	bl	8000f24 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff f8df 	bl	8000f24 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e12f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x22e>
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_OscConfig+0x278>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f8cc 	bl	8000f24 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8e:	e00f      	b.n	8001db0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff f8c8 	bl	8000f24 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d908      	bls.n	8001db0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e118      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	42470000 	.word	0x42470000
 8001dac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b8a      	ldr	r3, [pc, #552]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e9      	bne.n	8001d90 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 8097 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b83      	ldr	r3, [pc, #524]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b7f      	ldr	r3, [pc, #508]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a7e      	ldr	r2, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff f887 	bl	8000f24 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff f883 	bl	8000f24 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0d3      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x31a>
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	e01c      	b.n	8001e88 <HAL_RCC_OscConfig+0x354>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x33c>
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	4a60      	ldr	r2, [pc, #384]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
 8001e62:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a5d      	ldr	r2, [pc, #372]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0x354>
 8001e70:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	4a59      	ldr	r2, [pc, #356]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e76:	f023 0301 	bic.w	r3, r3, #1
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d015      	beq.n	8001ebc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff f848 	bl	8000f24 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f7ff f844 	bl	8000f24 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e092      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0ee      	beq.n	8001e98 <HAL_RCC_OscConfig+0x364>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f832 	bl	8000f24 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f82e 	bl	8000f24 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e07c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ee      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee6:	7dfb      	ldrb	r3, [r7, #23]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	4a3a      	ldr	r2, [pc, #232]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d068      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d060      	beq.n	8001fce <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d145      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f803 	bl	8000f24 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7fe ffff 	bl	8000f24 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e04f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	019b      	lsls	r3, r3, #6
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	085b      	lsrs	r3, r3, #1
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	061b      	lsls	r3, r3, #24
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	071b      	lsls	r3, r3, #28
 8001f6c:	491b      	ldr	r1, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe ffd4 	bl	8000f24 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe ffd0 	bl	8000f24 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e020      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x44c>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe ffbd 	bl	8000f24 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7fe ffb9 	bl	8000f24 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_OscConfig+0x4a8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x47a>
 8001fcc:	e001      	b.n	8001fd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42470060 	.word	0x42470060

08001fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e01d      	b.n	8002036 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f815 	bl	800203e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3304      	adds	r3, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f000 f968 	bl	80022fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b06      	cmp	r3, #6
 800207a:	d007      	beq.n	800208c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d122      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d11b      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0202 	mvn.w	r2, #2
 80020c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8ee 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 80020e2:	e005      	b.n	80020f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8e0 	bl	80022aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8f1 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d122      	bne.n	800214a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	2b04      	cmp	r3, #4
 8002110:	d11b      	bne.n	800214a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0204 	mvn.w	r2, #4
 800211a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8c4 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 8002136:	e005      	b.n	8002144 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8b6 	bl	80022aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8c7 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b08      	cmp	r3, #8
 8002156:	d122      	bne.n	800219e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11b      	bne.n	800219e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f06f 0208 	mvn.w	r2, #8
 800216e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2204      	movs	r2, #4
 8002174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f89a 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 800218a:	e005      	b.n	8002198 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f88c 	bl	80022aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f89d 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d122      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d11b      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f06f 0210 	mvn.w	r2, #16
 80021c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2208      	movs	r2, #8
 80021c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f870 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 80021de:	e005      	b.n	80021ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f862 	bl	80022aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f873 	bl	80022d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d10e      	bne.n	800221e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d107      	bne.n	800221e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0201 	mvn.w	r2, #1
 8002216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe fc81 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b80      	cmp	r3, #128	; 0x80
 800222a:	d10e      	bne.n	800224a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	2b80      	cmp	r3, #128	; 0x80
 8002238:	d107      	bne.n	800224a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f903 	bl	8002450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d10e      	bne.n	8002276 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	d107      	bne.n	8002276 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800226e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f838 	bl	80022e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d10e      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b20      	cmp	r3, #32
 8002290:	d107      	bne.n	80022a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f06f 0220 	mvn.w	r2, #32
 800229a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8cd 	bl	800243c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a40      	ldr	r2, [pc, #256]	; (8002410 <TIM_Base_SetConfig+0x114>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d013      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231a:	d00f      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3d      	ldr	r2, [pc, #244]	; (8002414 <TIM_Base_SetConfig+0x118>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00b      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <TIM_Base_SetConfig+0x11c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d007      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3b      	ldr	r2, [pc, #236]	; (800241c <TIM_Base_SetConfig+0x120>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d003      	beq.n	800233c <TIM_Base_SetConfig+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <TIM_Base_SetConfig+0x124>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d108      	bne.n	800234e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <TIM_Base_SetConfig+0x114>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02b      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235c:	d027      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <TIM_Base_SetConfig+0x118>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d023      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2b      	ldr	r2, [pc, #172]	; (8002418 <TIM_Base_SetConfig+0x11c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01f      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2a      	ldr	r2, [pc, #168]	; (800241c <TIM_Base_SetConfig+0x120>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01b      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <TIM_Base_SetConfig+0x124>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d017      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a28      	ldr	r2, [pc, #160]	; (8002424 <TIM_Base_SetConfig+0x128>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <TIM_Base_SetConfig+0x12c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00f      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a26      	ldr	r2, [pc, #152]	; (800242c <TIM_Base_SetConfig+0x130>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00b      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a25      	ldr	r2, [pc, #148]	; (8002430 <TIM_Base_SetConfig+0x134>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a24      	ldr	r2, [pc, #144]	; (8002434 <TIM_Base_SetConfig+0x138>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <TIM_Base_SetConfig+0x13c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d108      	bne.n	80023c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <TIM_Base_SetConfig+0x114>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d003      	beq.n	80023f4 <TIM_Base_SetConfig+0xf8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <TIM_Base_SetConfig+0x124>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d103      	bne.n	80023fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	615a      	str	r2, [r3, #20]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000
 8002414:	40000400 	.word	0x40000400
 8002418:	40000800 	.word	0x40000800
 800241c:	40000c00 	.word	0x40000c00
 8002420:	40010400 	.word	0x40010400
 8002424:	40014000 	.word	0x40014000
 8002428:	40014400 	.word	0x40014400
 800242c:	40014800 	.word	0x40014800
 8002430:	40001800 	.word	0x40001800
 8002434:	40001c00 	.word	0x40001c00
 8002438:	40002000 	.word	0x40002000

0800243c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e03f      	b.n	80024f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fb8a 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f90b 	bl	80026c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b088      	sub	sp, #32
 8002502:	af02      	add	r7, sp, #8
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	f040 8083 	bne.w	8002626 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_UART_Transmit+0x2e>
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e07b      	b.n	8002628 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_UART_Transmit+0x40>
 800253a:	2302      	movs	r3, #2
 800253c:	e074      	b.n	8002628 <HAL_UART_Transmit+0x12a>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2221      	movs	r2, #33	; 0x21
 8002550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002554:	f7fe fce6 	bl	8000f24 <HAL_GetTick>
 8002558:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	88fa      	ldrh	r2, [r7, #6]
 8002564:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800256e:	e042      	b.n	80025f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002586:	d122      	bne.n	80025ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f84c 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e042      	b.n	8002628 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3302      	adds	r3, #2
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	e017      	b.n	80025f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	e013      	b.n	80025f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2200      	movs	r2, #0
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f829 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e01f      	b.n	8002628 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60ba      	str	r2, [r7, #8]
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1b7      	bne.n	8002570 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2200      	movs	r2, #0
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f810 	bl	8002630 <UART_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e006      	b.n	8002628 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002640:	e02c      	b.n	800269c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d028      	beq.n	800269c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0x30>
 8002650:	f7fe fc68 	bl	8000f24 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	429a      	cmp	r2, r3
 800265e:	d21d      	bcs.n	800269c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800266e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e00f      	b.n	80026bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d0c3      	beq.n	8002642 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002706:	f023 030c 	bic.w	r3, r3, #12
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	68f9      	ldr	r1, [r7, #12]
 8002710:	430b      	orrs	r3, r1
 8002712:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002732:	f040 818b 	bne.w	8002a4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4ac1      	ldr	r2, [pc, #772]	; (8002a40 <UART_SetConfig+0x37c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d005      	beq.n	800274c <UART_SetConfig+0x88>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4abf      	ldr	r2, [pc, #764]	; (8002a44 <UART_SetConfig+0x380>)
 8002746:	4293      	cmp	r3, r2
 8002748:	f040 80bd 	bne.w	80028c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800274c:	f7ff f80c 	bl	8001768 <HAL_RCC_GetPCLK2Freq>
 8002750:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	461d      	mov	r5, r3
 8002756:	f04f 0600 	mov.w	r6, #0
 800275a:	46a8      	mov	r8, r5
 800275c:	46b1      	mov	r9, r6
 800275e:	eb18 0308 	adds.w	r3, r8, r8
 8002762:	eb49 0409 	adc.w	r4, r9, r9
 8002766:	4698      	mov	r8, r3
 8002768:	46a1      	mov	r9, r4
 800276a:	eb18 0805 	adds.w	r8, r8, r5
 800276e:	eb49 0906 	adc.w	r9, r9, r6
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800277e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002782:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002786:	4688      	mov	r8, r1
 8002788:	4691      	mov	r9, r2
 800278a:	eb18 0005 	adds.w	r0, r8, r5
 800278e:	eb49 0106 	adc.w	r1, r9, r6
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	461d      	mov	r5, r3
 8002798:	f04f 0600 	mov.w	r6, #0
 800279c:	196b      	adds	r3, r5, r5
 800279e:	eb46 0406 	adc.w	r4, r6, r6
 80027a2:	461a      	mov	r2, r3
 80027a4:	4623      	mov	r3, r4
 80027a6:	f7fd fd83 	bl	80002b0 <__aeabi_uldivmod>
 80027aa:	4603      	mov	r3, r0
 80027ac:	460c      	mov	r4, r1
 80027ae:	461a      	mov	r2, r3
 80027b0:	4ba5      	ldr	r3, [pc, #660]	; (8002a48 <UART_SetConfig+0x384>)
 80027b2:	fba3 2302 	umull	r2, r3, r3, r2
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	461d      	mov	r5, r3
 80027c0:	f04f 0600 	mov.w	r6, #0
 80027c4:	46a9      	mov	r9, r5
 80027c6:	46b2      	mov	sl, r6
 80027c8:	eb19 0309 	adds.w	r3, r9, r9
 80027cc:	eb4a 040a 	adc.w	r4, sl, sl
 80027d0:	4699      	mov	r9, r3
 80027d2:	46a2      	mov	sl, r4
 80027d4:	eb19 0905 	adds.w	r9, r9, r5
 80027d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80027dc:	f04f 0100 	mov.w	r1, #0
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027f0:	4689      	mov	r9, r1
 80027f2:	4692      	mov	sl, r2
 80027f4:	eb19 0005 	adds.w	r0, r9, r5
 80027f8:	eb4a 0106 	adc.w	r1, sl, r6
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	461d      	mov	r5, r3
 8002802:	f04f 0600 	mov.w	r6, #0
 8002806:	196b      	adds	r3, r5, r5
 8002808:	eb46 0406 	adc.w	r4, r6, r6
 800280c:	461a      	mov	r2, r3
 800280e:	4623      	mov	r3, r4
 8002810:	f7fd fd4e 	bl	80002b0 <__aeabi_uldivmod>
 8002814:	4603      	mov	r3, r0
 8002816:	460c      	mov	r4, r1
 8002818:	461a      	mov	r2, r3
 800281a:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <UART_SetConfig+0x384>)
 800281c:	fba3 1302 	umull	r1, r3, r3, r2
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	2164      	movs	r1, #100	; 0x64
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	3332      	adds	r3, #50	; 0x32
 800282e:	4a86      	ldr	r2, [pc, #536]	; (8002a48 <UART_SetConfig+0x384>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800283c:	4498      	add	r8, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	461d      	mov	r5, r3
 8002842:	f04f 0600 	mov.w	r6, #0
 8002846:	46a9      	mov	r9, r5
 8002848:	46b2      	mov	sl, r6
 800284a:	eb19 0309 	adds.w	r3, r9, r9
 800284e:	eb4a 040a 	adc.w	r4, sl, sl
 8002852:	4699      	mov	r9, r3
 8002854:	46a2      	mov	sl, r4
 8002856:	eb19 0905 	adds.w	r9, r9, r5
 800285a:	eb4a 0a06 	adc.w	sl, sl, r6
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800286a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800286e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002872:	4689      	mov	r9, r1
 8002874:	4692      	mov	sl, r2
 8002876:	eb19 0005 	adds.w	r0, r9, r5
 800287a:	eb4a 0106 	adc.w	r1, sl, r6
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	461d      	mov	r5, r3
 8002884:	f04f 0600 	mov.w	r6, #0
 8002888:	196b      	adds	r3, r5, r5
 800288a:	eb46 0406 	adc.w	r4, r6, r6
 800288e:	461a      	mov	r2, r3
 8002890:	4623      	mov	r3, r4
 8002892:	f7fd fd0d 	bl	80002b0 <__aeabi_uldivmod>
 8002896:	4603      	mov	r3, r0
 8002898:	460c      	mov	r4, r1
 800289a:	461a      	mov	r2, r3
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <UART_SetConfig+0x384>)
 800289e:	fba3 1302 	umull	r1, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2164      	movs	r1, #100	; 0x64
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <UART_SetConfig+0x384>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	f003 0207 	and.w	r2, r3, #7
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4442      	add	r2, r8
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	e26f      	b.n	8002da6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028c6:	f7fe ff3b 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 80028ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	461d      	mov	r5, r3
 80028d0:	f04f 0600 	mov.w	r6, #0
 80028d4:	46a8      	mov	r8, r5
 80028d6:	46b1      	mov	r9, r6
 80028d8:	eb18 0308 	adds.w	r3, r8, r8
 80028dc:	eb49 0409 	adc.w	r4, r9, r9
 80028e0:	4698      	mov	r8, r3
 80028e2:	46a1      	mov	r9, r4
 80028e4:	eb18 0805 	adds.w	r8, r8, r5
 80028e8:	eb49 0906 	adc.w	r9, r9, r6
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002900:	4688      	mov	r8, r1
 8002902:	4691      	mov	r9, r2
 8002904:	eb18 0005 	adds.w	r0, r8, r5
 8002908:	eb49 0106 	adc.w	r1, r9, r6
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	461d      	mov	r5, r3
 8002912:	f04f 0600 	mov.w	r6, #0
 8002916:	196b      	adds	r3, r5, r5
 8002918:	eb46 0406 	adc.w	r4, r6, r6
 800291c:	461a      	mov	r2, r3
 800291e:	4623      	mov	r3, r4
 8002920:	f7fd fcc6 	bl	80002b0 <__aeabi_uldivmod>
 8002924:	4603      	mov	r3, r0
 8002926:	460c      	mov	r4, r1
 8002928:	461a      	mov	r2, r3
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <UART_SetConfig+0x384>)
 800292c:	fba3 2302 	umull	r2, r3, r3, r2
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	461d      	mov	r5, r3
 800293a:	f04f 0600 	mov.w	r6, #0
 800293e:	46a9      	mov	r9, r5
 8002940:	46b2      	mov	sl, r6
 8002942:	eb19 0309 	adds.w	r3, r9, r9
 8002946:	eb4a 040a 	adc.w	r4, sl, sl
 800294a:	4699      	mov	r9, r3
 800294c:	46a2      	mov	sl, r4
 800294e:	eb19 0905 	adds.w	r9, r9, r5
 8002952:	eb4a 0a06 	adc.w	sl, sl, r6
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002962:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002966:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800296a:	4689      	mov	r9, r1
 800296c:	4692      	mov	sl, r2
 800296e:	eb19 0005 	adds.w	r0, r9, r5
 8002972:	eb4a 0106 	adc.w	r1, sl, r6
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	461d      	mov	r5, r3
 800297c:	f04f 0600 	mov.w	r6, #0
 8002980:	196b      	adds	r3, r5, r5
 8002982:	eb46 0406 	adc.w	r4, r6, r6
 8002986:	461a      	mov	r2, r3
 8002988:	4623      	mov	r3, r4
 800298a:	f7fd fc91 	bl	80002b0 <__aeabi_uldivmod>
 800298e:	4603      	mov	r3, r0
 8002990:	460c      	mov	r4, r1
 8002992:	461a      	mov	r2, r3
 8002994:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <UART_SetConfig+0x384>)
 8002996:	fba3 1302 	umull	r1, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2164      	movs	r1, #100	; 0x64
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	3332      	adds	r3, #50	; 0x32
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <UART_SetConfig+0x384>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029b6:	4498      	add	r8, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	461d      	mov	r5, r3
 80029bc:	f04f 0600 	mov.w	r6, #0
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46b2      	mov	sl, r6
 80029c4:	eb19 0309 	adds.w	r3, r9, r9
 80029c8:	eb4a 040a 	adc.w	r4, sl, sl
 80029cc:	4699      	mov	r9, r3
 80029ce:	46a2      	mov	sl, r4
 80029d0:	eb19 0905 	adds.w	r9, r9, r5
 80029d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029ec:	4689      	mov	r9, r1
 80029ee:	4692      	mov	sl, r2
 80029f0:	eb19 0005 	adds.w	r0, r9, r5
 80029f4:	eb4a 0106 	adc.w	r1, sl, r6
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	461d      	mov	r5, r3
 80029fe:	f04f 0600 	mov.w	r6, #0
 8002a02:	196b      	adds	r3, r5, r5
 8002a04:	eb46 0406 	adc.w	r4, r6, r6
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	f7fd fc50 	bl	80002b0 <__aeabi_uldivmod>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <UART_SetConfig+0x384>)
 8002a18:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	2164      	movs	r1, #100	; 0x64
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	3332      	adds	r3, #50	; 0x32
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <UART_SetConfig+0x384>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	f003 0207 	and.w	r2, r3, #7
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4442      	add	r2, r8
 8002a3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a3e:	e1b2      	b.n	8002da6 <UART_SetConfig+0x6e2>
 8002a40:	40011000 	.word	0x40011000
 8002a44:	40011400 	.word	0x40011400
 8002a48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4ad7      	ldr	r2, [pc, #860]	; (8002db0 <UART_SetConfig+0x6ec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d005      	beq.n	8002a62 <UART_SetConfig+0x39e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4ad6      	ldr	r2, [pc, #856]	; (8002db4 <UART_SetConfig+0x6f0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	f040 80d1 	bne.w	8002c04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a62:	f7fe fe81 	bl	8001768 <HAL_RCC_GetPCLK2Freq>
 8002a66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	469a      	mov	sl, r3
 8002a6c:	f04f 0b00 	mov.w	fp, #0
 8002a70:	46d0      	mov	r8, sl
 8002a72:	46d9      	mov	r9, fp
 8002a74:	eb18 0308 	adds.w	r3, r8, r8
 8002a78:	eb49 0409 	adc.w	r4, r9, r9
 8002a7c:	4698      	mov	r8, r3
 8002a7e:	46a1      	mov	r9, r4
 8002a80:	eb18 080a 	adds.w	r8, r8, sl
 8002a84:	eb49 090b 	adc.w	r9, r9, fp
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a9c:	4688      	mov	r8, r1
 8002a9e:	4691      	mov	r9, r2
 8002aa0:	eb1a 0508 	adds.w	r5, sl, r8
 8002aa4:	eb4b 0609 	adc.w	r6, fp, r9
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	f04f 0400 	mov.w	r4, #0
 8002aba:	0094      	lsls	r4, r2, #2
 8002abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ac0:	008b      	lsls	r3, r1, #2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	4631      	mov	r1, r6
 8002aca:	f7fd fbf1 	bl	80002b0 <__aeabi_uldivmod>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4bb8      	ldr	r3, [pc, #736]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	469b      	mov	fp, r3
 8002ae4:	f04f 0c00 	mov.w	ip, #0
 8002ae8:	46d9      	mov	r9, fp
 8002aea:	46e2      	mov	sl, ip
 8002aec:	eb19 0309 	adds.w	r3, r9, r9
 8002af0:	eb4a 040a 	adc.w	r4, sl, sl
 8002af4:	4699      	mov	r9, r3
 8002af6:	46a2      	mov	sl, r4
 8002af8:	eb19 090b 	adds.w	r9, r9, fp
 8002afc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b14:	4689      	mov	r9, r1
 8002b16:	4692      	mov	sl, r2
 8002b18:	eb1b 0509 	adds.w	r5, fp, r9
 8002b1c:	eb4c 060a 	adc.w	r6, ip, sl
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4619      	mov	r1, r3
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	f04f 0400 	mov.w	r4, #0
 8002b32:	0094      	lsls	r4, r2, #2
 8002b34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b38:	008b      	lsls	r3, r1, #2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4623      	mov	r3, r4
 8002b3e:	4628      	mov	r0, r5
 8002b40:	4631      	mov	r1, r6
 8002b42:	f7fd fbb5 	bl	80002b0 <__aeabi_uldivmod>
 8002b46:	4603      	mov	r3, r0
 8002b48:	460c      	mov	r4, r1
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b9a      	ldr	r3, [pc, #616]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2164      	movs	r1, #100	; 0x64
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	3332      	adds	r3, #50	; 0x32
 8002b60:	4a95      	ldr	r2, [pc, #596]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6c:	4498      	add	r8, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	469b      	mov	fp, r3
 8002b72:	f04f 0c00 	mov.w	ip, #0
 8002b76:	46d9      	mov	r9, fp
 8002b78:	46e2      	mov	sl, ip
 8002b7a:	eb19 0309 	adds.w	r3, r9, r9
 8002b7e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b82:	4699      	mov	r9, r3
 8002b84:	46a2      	mov	sl, r4
 8002b86:	eb19 090b 	adds.w	r9, r9, fp
 8002b8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ba2:	4689      	mov	r9, r1
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	eb1b 0509 	adds.w	r5, fp, r9
 8002baa:	eb4c 060a 	adc.w	r6, ip, sl
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	f04f 0400 	mov.w	r4, #0
 8002bc0:	0094      	lsls	r4, r2, #2
 8002bc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bc6:	008b      	lsls	r3, r1, #2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	4628      	mov	r0, r5
 8002bce:	4631      	mov	r1, r6
 8002bd0:	f7fd fb6e 	bl	80002b0 <__aeabi_uldivmod>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	2164      	movs	r1, #100	; 0x64
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	3332      	adds	r3, #50	; 0x32
 8002bee:	4a72      	ldr	r2, [pc, #456]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4442      	add	r2, r8
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	e0d0      	b.n	8002da6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7fe fd9c 	bl	8001740 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	469a      	mov	sl, r3
 8002c0e:	f04f 0b00 	mov.w	fp, #0
 8002c12:	46d0      	mov	r8, sl
 8002c14:	46d9      	mov	r9, fp
 8002c16:	eb18 0308 	adds.w	r3, r8, r8
 8002c1a:	eb49 0409 	adc.w	r4, r9, r9
 8002c1e:	4698      	mov	r8, r3
 8002c20:	46a1      	mov	r9, r4
 8002c22:	eb18 080a 	adds.w	r8, r8, sl
 8002c26:	eb49 090b 	adc.w	r9, r9, fp
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c3e:	4688      	mov	r8, r1
 8002c40:	4691      	mov	r9, r2
 8002c42:	eb1a 0508 	adds.w	r5, sl, r8
 8002c46:	eb4b 0609 	adc.w	r6, fp, r9
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	0094      	lsls	r4, r2, #2
 8002c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	f7fd fb20 	bl	80002b0 <__aeabi_uldivmod>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002c78:	fba3 2302 	umull	r2, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	469b      	mov	fp, r3
 8002c86:	f04f 0c00 	mov.w	ip, #0
 8002c8a:	46d9      	mov	r9, fp
 8002c8c:	46e2      	mov	sl, ip
 8002c8e:	eb19 0309 	adds.w	r3, r9, r9
 8002c92:	eb4a 040a 	adc.w	r4, sl, sl
 8002c96:	4699      	mov	r9, r3
 8002c98:	46a2      	mov	sl, r4
 8002c9a:	eb19 090b 	adds.w	r9, r9, fp
 8002c9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cb6:	4689      	mov	r9, r1
 8002cb8:	4692      	mov	sl, r2
 8002cba:	eb1b 0509 	adds.w	r5, fp, r9
 8002cbe:	eb4c 060a 	adc.w	r6, ip, sl
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	f04f 0400 	mov.w	r4, #0
 8002cd4:	0094      	lsls	r4, r2, #2
 8002cd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cda:	008b      	lsls	r3, r1, #2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	4631      	mov	r1, r6
 8002ce4:	f7fd fae4 	bl	80002b0 <__aeabi_uldivmod>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	460c      	mov	r4, r1
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	2164      	movs	r1, #100	; 0x64
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	3332      	adds	r3, #50	; 0x32
 8002d02:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0e:	4498      	add	r8, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	469b      	mov	fp, r3
 8002d14:	f04f 0c00 	mov.w	ip, #0
 8002d18:	46d9      	mov	r9, fp
 8002d1a:	46e2      	mov	sl, ip
 8002d1c:	eb19 0309 	adds.w	r3, r9, r9
 8002d20:	eb4a 040a 	adc.w	r4, sl, sl
 8002d24:	4699      	mov	r9, r3
 8002d26:	46a2      	mov	sl, r4
 8002d28:	eb19 090b 	adds.w	r9, r9, fp
 8002d2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d30:	f04f 0100 	mov.w	r1, #0
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d44:	4689      	mov	r9, r1
 8002d46:	4692      	mov	sl, r2
 8002d48:	eb1b 0509 	adds.w	r5, fp, r9
 8002d4c:	eb4c 060a 	adc.w	r6, ip, sl
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	f04f 0400 	mov.w	r4, #0
 8002d62:	0094      	lsls	r4, r2, #2
 8002d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d68:	008b      	lsls	r3, r1, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	4628      	mov	r0, r5
 8002d70:	4631      	mov	r1, r6
 8002d72:	f7fd fa9d 	bl	80002b0 <__aeabi_uldivmod>
 8002d76:	4603      	mov	r3, r0
 8002d78:	460c      	mov	r4, r1
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2164      	movs	r1, #100	; 0x64
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	3332      	adds	r3, #50	; 0x32
 8002d90:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <UART_SetConfig+0x6f4>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4442      	add	r2, r8
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	e7ff      	b.n	8002da6 <UART_SetConfig+0x6e2>
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db0:	40011000 	.word	0x40011000
 8002db4:	40011400 	.word	0x40011400
 8002db8:	51eb851f 	.word	0x51eb851f

08002dbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dce:	2b84      	cmp	r3, #132	; 0x84
 8002dd0:	d005      	beq.n	8002dde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002dd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3303      	adds	r3, #3
 8002ddc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002dde:	68fb      	ldr	r3, [r7, #12]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002df2:	f3ef 8305 	mrs	r3, IPSR
 8002df6:	607b      	str	r3, [r7, #4]
  return(result);
 8002df8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e14:	f001 fb6c 	bl	80044f0 <vTaskStartScheduler>
  
  return osOK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e20:	b089      	sub	sp, #36	; 0x24
 8002e22:	af04      	add	r7, sp, #16
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <osThreadCreate+0x54>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01c      	beq.n	8002e72 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685c      	ldr	r4, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681d      	ldr	r5, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691e      	ldr	r6, [r3, #16]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ffb6 	bl	8002dbc <makeFreeRtosPriority>
 8002e50:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e5a:	9202      	str	r2, [sp, #8]
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	9100      	str	r1, [sp, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4632      	mov	r2, r6
 8002e64:	4629      	mov	r1, r5
 8002e66:	4620      	mov	r0, r4
 8002e68:	f001 f97e 	bl	8004168 <xTaskCreateStatic>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e01c      	b.n	8002eac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685c      	ldr	r4, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e7e:	b29e      	uxth	r6, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff ff98 	bl	8002dbc <makeFreeRtosPriority>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	9200      	str	r2, [sp, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	4632      	mov	r2, r6
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f001 f9bd 	bl	800421c <xTaskCreate>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d001      	beq.n	8002eac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002eac:	68fb      	ldr	r3, [r7, #12]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <osDelay+0x16>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	e000      	b.n	8002ece <osDelay+0x18>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 fada 	bl	8004488 <vTaskDelay>
  
  return osOK;
 8002ed4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d013      	beq.n	8002f1e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <osTimerCreate+0x20>
 8002efc:	2101      	movs	r1, #1
 8002efe:	e000      	b.n	8002f02 <osTimerCreate+0x22>
 8002f00:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8002f0a:	9201      	str	r2, [sp, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	460a      	mov	r2, r1
 8002f12:	2101      	movs	r1, #1
 8002f14:	480b      	ldr	r0, [pc, #44]	; (8002f44 <osTimerCreate+0x64>)
 8002f16:	f002 f9bc 	bl	8005292 <xTimerCreateStatic>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	e00e      	b.n	8002f3c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <osTimerCreate+0x48>
 8002f24:	2201      	movs	r2, #1
 8002f26:	e000      	b.n	8002f2a <osTimerCreate+0x4a>
 8002f28:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2101      	movs	r1, #1
 8002f34:	4803      	ldr	r0, [pc, #12]	; (8002f44 <osTimerCreate+0x64>)
 8002f36:	f002 f98b 	bl	8005250 <xTimerCreate>
 8002f3a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	08007150 	.word	0x08007150

08002f48 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8002f58:	f7ff ff48 	bl	8002dec <inHandlerMode>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01a      	beq.n	8002f98 <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8002f62:	f107 0208 	add.w	r2, r7, #8
 8002f66:	2300      	movs	r3, #0
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2108      	movs	r1, #8
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f002 fa05 	bl	8005380 <xTimerGenericCommand>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <osTimerStop+0x38>
      return osErrorOS;
 8002f7c:	23ff      	movs	r3, #255	; 0xff
 8002f7e:	e019      	b.n	8002fb4 <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d015      	beq.n	8002fb2 <osTimerStop+0x6a>
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <osTimerStop+0x74>)
 8002f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	e00c      	b.n	8002fb2 <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f002 f9ec 	bl	8005380 <xTimerGenericCommand>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <osTimerStop+0x6a>
      result = osErrorOS;
 8002fae:	23ff      	movs	r3, #255	; 0xff
 8002fb0:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	e000ed04 	.word	0xe000ed04

08002fc0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f000 faad 	bl	8003536 <xQueueCreateMutexStatic>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	e003      	b.n	8002fe8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f000 fa90 	bl	8003506 <xQueueCreateMutex>
 8002fe6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <osMutexWait+0x18>
    return osErrorParameter;
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	e03a      	b.n	800307e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d103      	bne.n	800301c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e009      	b.n	8003030 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <osMutexWait+0x40>
      ticks = 1;
 800302c:	2301      	movs	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003030:	f7ff fedc 	bl	8002dec <inHandlerMode>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d017      	beq.n	800306a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	461a      	mov	r2, r3
 8003040:	2100      	movs	r1, #0
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fe8e 	bl	8003d64 <xQueueReceiveFromISR>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d001      	beq.n	8003052 <osMutexWait+0x62>
      return osErrorOS;
 800304e:	23ff      	movs	r3, #255	; 0xff
 8003050:	e015      	b.n	800307e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d011      	beq.n	800307c <osMutexWait+0x8c>
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <osMutexWait+0x98>)
 800305a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	e008      	b.n	800307c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fd71 	bl	8003b54 <xQueueSemaphoreTake>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d001      	beq.n	800307c <osMutexWait+0x8c>
    return osErrorOS;
 8003078:	23ff      	movs	r3, #255	; 0xff
 800307a:	e000      	b.n	800307e <osMutexWait+0x8e>
  }
  
  return osOK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800309c:	f7ff fea6 	bl	8002dec <inHandlerMode>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fbeb 	bl	8003888 <xQueueGiveFromISR>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d001      	beq.n	80030bc <osMutexRelease+0x30>
      return osErrorOS;
 80030b8:	23ff      	movs	r3, #255	; 0xff
 80030ba:	e017      	b.n	80030ec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d013      	beq.n	80030ea <osMutexRelease+0x5e>
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <osMutexRelease+0x68>)
 80030c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	e00a      	b.n	80030ea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80030d4:	2300      	movs	r3, #0
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa46 	bl	800356c <xQueueGenericSend>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80030e6:	23ff      	movs	r3, #255	; 0xff
 80030e8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	e000ed04 	.word	0xe000ed04

080030f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f103 0208 	add.w	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f103 0208 	add.w	r2, r3, #8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f103 0208 	add.w	r2, r3, #8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d103      	bne.n	80031ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e00c      	b.n	80031d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3308      	adds	r3, #8
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e002      	b.n	80031c8 <vListInsert+0x2e>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d2f6      	bcs.n	80031c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6892      	ldr	r2, [r2, #8]
 8003222:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6852      	ldr	r2, [r2, #4]
 800322c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d103      	bne.n	8003240 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	1e5a      	subs	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	e7fe      	b.n	8003286 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003288:	f002 fc88 	bl	8005b9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	68f9      	ldr	r1, [r7, #12]
 8003296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	3b01      	subs	r3, #1
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	441a      	add	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	22ff      	movs	r2, #255	; 0xff
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	22ff      	movs	r2, #255	; 0xff
 80032d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d114      	bne.n	8003308 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01a      	beq.n	800331c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3310      	adds	r3, #16
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 fb7e 	bl	80049ec <xTaskRemoveFromEventList>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <xQueueGenericReset+0xcc>)
 80032f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	e009      	b.n	800331c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3310      	adds	r3, #16
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fef3 	bl	80030f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3324      	adds	r3, #36	; 0x24
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff feee 	bl	80030f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800331c:	f002 fc6c 	bl	8005bf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003320:	2301      	movs	r3, #1
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08e      	sub	sp, #56	; 0x38
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <xQueueGenericCreateStatic+0x28>
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
 8003356:	e7fe      	b.n	8003356 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <xQueueGenericCreateStatic+0x42>
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
 8003370:	e7fe      	b.n	8003370 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <xQueueGenericCreateStatic+0x4e>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <xQueueGenericCreateStatic+0x52>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <xQueueGenericCreateStatic+0x54>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <xQueueGenericCreateStatic+0x6c>
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	e7fe      	b.n	800339a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <xQueueGenericCreateStatic+0x78>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <xQueueGenericCreateStatic+0x7c>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <xQueueGenericCreateStatic+0x7e>
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <xQueueGenericCreateStatic+0x96>
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e7fe      	b.n	80033c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80033c6:	2348      	movs	r3, #72	; 0x48
 80033c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b48      	cmp	r3, #72	; 0x48
 80033ce:	d009      	beq.n	80033e4 <xQueueGenericCreateStatic+0xb4>
 80033d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	e7fe      	b.n	80033e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f844 	bl	8003494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800340e:	4618      	mov	r0, r3
 8003410:	3730      	adds	r7, #48	; 0x30
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003416:	b580      	push	{r7, lr}
 8003418:	b08a      	sub	sp, #40	; 0x28
 800341a:	af02      	add	r7, sp, #8
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <xQueueGenericCreate+0x28>
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	e7fe      	b.n	800343c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	e004      	b.n	8003454 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	3348      	adds	r3, #72	; 0x48
 8003458:	4618      	mov	r0, r3
 800345a:	f002 fcb9 	bl	8005dd0 <pvPortMalloc>
 800345e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d011      	beq.n	800348a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3348      	adds	r3, #72	; 0x48
 800346e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003478:	79fa      	ldrb	r2, [r7, #7]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f805 	bl	8003494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800348a:	69bb      	ldr	r3, [r7, #24]
	}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e002      	b.n	80034b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034c2:	2101      	movs	r1, #1
 80034c4:	69b8      	ldr	r0, [r7, #24]
 80034c6:	f7ff fecb 	bl	8003260 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034ca:	bf00      	nop
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80034f2:	2300      	movs	r3, #0
 80034f4:	2200      	movs	r2, #0
 80034f6:	2100      	movs	r1, #0
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f837 	bl	800356c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003510:	2301      	movs	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	461a      	mov	r2, r3
 800351c:	6939      	ldr	r1, [r7, #16]
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f7ff ff79 	bl	8003416 <xQueueGenericCreate>
 8003524:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f7ff ffd3 	bl	80034d2 <prvInitialiseMutex>

		return xNewQueue;
 800352c:	68fb      	ldr	r3, [r7, #12]
	}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003536:	b580      	push	{r7, lr}
 8003538:	b088      	sub	sp, #32
 800353a:	af02      	add	r7, sp, #8
 800353c:	4603      	mov	r3, r0
 800353e:	6039      	str	r1, [r7, #0]
 8003540:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003542:	2301      	movs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	6939      	ldr	r1, [r7, #16]
 8003554:	6978      	ldr	r0, [r7, #20]
 8003556:	f7ff feeb 	bl	8003330 <xQueueGenericCreateStatic>
 800355a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff ffb8 	bl	80034d2 <prvInitialiseMutex>

		return xNewQueue;
 8003562:	68fb      	ldr	r3, [r7, #12]
	}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08e      	sub	sp, #56	; 0x38
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800357a:	2300      	movs	r3, #0
 800357c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	2b00      	cmp	r3, #0
 8003586:	d109      	bne.n	800359c <xQueueGenericSend+0x30>
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
 800359a:	e7fe      	b.n	800359a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <xQueueGenericSend+0x3e>
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <xQueueGenericSend+0x42>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <xQueueGenericSend+0x44>
 80035ae:	2300      	movs	r3, #0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <xQueueGenericSend+0x5c>
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
 80035c6:	e7fe      	b.n	80035c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d103      	bne.n	80035d6 <xQueueGenericSend+0x6a>
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <xQueueGenericSend+0x6e>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <xQueueGenericSend+0x70>
 80035da:	2300      	movs	r3, #0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <xQueueGenericSend+0x88>
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	e7fe      	b.n	80035f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035f4:	f001 fbb0 	bl	8004d58 <xTaskGetSchedulerState>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <xQueueGenericSend+0x98>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <xQueueGenericSend+0x9c>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <xQueueGenericSend+0x9e>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <xQueueGenericSend+0xb6>
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	e7fe      	b.n	8003620 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003622:	f002 fabb 	bl	8005b9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <xQueueGenericSend+0xcc>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d129      	bne.n	800368c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800363e:	f000 fc26 	bl	8003e8e <prvCopyDataToQueue>
 8003642:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	3324      	adds	r3, #36	; 0x24
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f9cb 	bl	80049ec <xTaskRemoveFromEventList>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800365c:	4b3f      	ldr	r3, [pc, #252]	; (800375c <xQueueGenericSend+0x1f0>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	e00a      	b.n	8003684 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d007      	beq.n	8003684 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003674:	4b39      	ldr	r3, [pc, #228]	; (800375c <xQueueGenericSend+0x1f0>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003684:	f002 fab8 	bl	8005bf8 <vPortExitCritical>
				return pdPASS;
 8003688:	2301      	movs	r3, #1
 800368a:	e063      	b.n	8003754 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d103      	bne.n	800369a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003692:	f002 fab1 	bl	8005bf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003696:	2300      	movs	r3, #0
 8003698:	e05c      	b.n	8003754 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800369a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 fa03 	bl	8004ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036aa:	2301      	movs	r3, #1
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036ae:	f002 faa3 	bl	8005bf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036b2:	f000 ff81 	bl	80045b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036b6:	f002 fa71 	bl	8005b9c <vPortEnterCritical>
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d103      	bne.n	80036d0 <xQueueGenericSend+0x164>
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036d6:	b25b      	sxtb	r3, r3
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d103      	bne.n	80036e6 <xQueueGenericSend+0x17a>
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036e6:	f002 fa87 	bl	8005bf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036ea:	1d3a      	adds	r2, r7, #4
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 f9f2 	bl	8004adc <xTaskCheckForTimeOut>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d124      	bne.n	8003748 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003700:	f000 fcbd 	bl	800407e <prvIsQueueFull>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d018      	beq.n	800373c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	3310      	adds	r3, #16
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f001 f91c 	bl	8004950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800371a:	f000 fc48 	bl	8003fae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800371e:	f000 ff59 	bl	80045d4 <xTaskResumeAll>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	f47f af7c 	bne.w	8003622 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <xQueueGenericSend+0x1f0>)
 800372c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	e772      	b.n	8003622 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800373c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800373e:	f000 fc36 	bl	8003fae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003742:	f000 ff47 	bl	80045d4 <xTaskResumeAll>
 8003746:	e76c      	b.n	8003622 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800374a:	f000 fc30 	bl	8003fae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800374e:	f000 ff41 	bl	80045d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003752:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003754:	4618      	mov	r0, r3
 8003756:	3738      	adds	r7, #56	; 0x38
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	e000ed04 	.word	0xe000ed04

08003760 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	; 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <xQueueGenericSendFromISR+0x2c>
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e7fe      	b.n	800378a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <xQueueGenericSendFromISR+0x3a>
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <xQueueGenericSendFromISR+0x3e>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <xQueueGenericSendFromISR+0x40>
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <xQueueGenericSendFromISR+0x58>
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	e7fe      	b.n	80037b6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d103      	bne.n	80037c6 <xQueueGenericSendFromISR+0x66>
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <xQueueGenericSendFromISR+0x6a>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <xQueueGenericSendFromISR+0x6c>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <xQueueGenericSendFromISR+0x84>
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	e7fe      	b.n	80037e2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037e4:	f002 fab6 	bl	8005d54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037e8:	f3ef 8211 	mrs	r2, BASEPRI
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	61ba      	str	r2, [r7, #24]
 80037fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003800:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <xQueueGenericSendFromISR+0xb6>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d12c      	bne.n	8003870 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800381c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003826:	f000 fb32 	bl	8003e8e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800382a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d112      	bne.n	800385a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b00      	cmp	r3, #0
 800383a:	d016      	beq.n	800386a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	3324      	adds	r3, #36	; 0x24
 8003840:	4618      	mov	r0, r3
 8003842:	f001 f8d3 	bl	80049ec <xTaskRemoveFromEventList>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e007      	b.n	800386a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800385a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800385e:	3301      	adds	r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	b25a      	sxtb	r2, r3
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800386a:	2301      	movs	r3, #1
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800386e:	e001      	b.n	8003874 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003870:	2300      	movs	r3, #0
 8003872:	637b      	str	r3, [r7, #52]	; 0x34
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003880:	4618      	mov	r0, r3
 8003882:	3738      	adds	r7, #56	; 0x38
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08e      	sub	sp, #56	; 0x38
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <xQueueGiveFromISR+0x28>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	623b      	str	r3, [r7, #32]
 80038ae:	e7fe      	b.n	80038ae <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <xQueueGiveFromISR+0x44>
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e7fe      	b.n	80038ca <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <xQueueGiveFromISR+0x54>
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <xQueueGiveFromISR+0x58>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <xQueueGiveFromISR+0x5a>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <xQueueGiveFromISR+0x72>
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	e7fe      	b.n	80038f8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038fa:	f002 fa2b 	bl	8005d54 <vPortValidateInterruptPriority>
	__asm volatile
 80038fe:	f3ef 8211 	mrs	r2, BASEPRI
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	617a      	str	r2, [r7, #20]
 8003914:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003916:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003926:	429a      	cmp	r2, r3
 8003928:	d22b      	bcs.n	8003982 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	1c5a      	adds	r2, r3, #1
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800393c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d112      	bne.n	800396c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d016      	beq.n	800397c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	3324      	adds	r3, #36	; 0x24
 8003952:	4618      	mov	r0, r3
 8003954:	f001 f84a 	bl	80049ec <xTaskRemoveFromEventList>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e007      	b.n	800397c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800396c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003970:	3301      	adds	r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	b25a      	sxtb	r2, r3
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800397c:	2301      	movs	r3, #1
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
 8003980:	e001      	b.n	8003986 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003982:	2300      	movs	r3, #0
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003992:	4618      	mov	r0, r3
 8003994:	3738      	adds	r7, #56	; 0x38
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <xQueueReceive+0x2e>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	e7fe      	b.n	80039c8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d103      	bne.n	80039d8 <xQueueReceive+0x3c>
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <xQueueReceive+0x40>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <xQueueReceive+0x42>
 80039dc:	2300      	movs	r3, #0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <xQueueReceive+0x5a>
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e7fe      	b.n	80039f4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039f6:	f001 f9af 	bl	8004d58 <xTaskGetSchedulerState>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <xQueueReceive+0x6a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <xQueueReceive+0x6e>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <xQueueReceive+0x70>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <xQueueReceive+0x88>
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e7fe      	b.n	8003a22 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a24:	f002 f8ba 	bl	8005b9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01f      	beq.n	8003a74 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a38:	f000 fa93 	bl	8003f62 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	1e5a      	subs	r2, r3, #1
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00f      	beq.n	8003a6c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	3310      	adds	r3, #16
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 ffcb 	bl	80049ec <xTaskRemoveFromEventList>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a5c:	4b3c      	ldr	r3, [pc, #240]	; (8003b50 <xQueueReceive+0x1b4>)
 8003a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a6c:	f002 f8c4 	bl	8005bf8 <vPortExitCritical>
				return pdPASS;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e069      	b.n	8003b48 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a7a:	f002 f8bd 	bl	8005bf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e062      	b.n	8003b48 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a88:	f107 0310 	add.w	r3, r7, #16
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 f80f 	bl	8004ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a92:	2301      	movs	r3, #1
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a96:	f002 f8af 	bl	8005bf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a9a:	f000 fd8d 	bl	80045b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a9e:	f002 f87d 	bl	8005b9c <vPortEnterCritical>
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aa8:	b25b      	sxtb	r3, r3
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d103      	bne.n	8003ab8 <xQueueReceive+0x11c>
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003abe:	b25b      	sxtb	r3, r3
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d103      	bne.n	8003ace <xQueueReceive+0x132>
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ace:	f002 f893 	bl	8005bf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ad2:	1d3a      	adds	r2, r7, #4
 8003ad4:	f107 0310 	add.w	r3, r7, #16
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fffe 	bl	8004adc <xTaskCheckForTimeOut>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d123      	bne.n	8003b2e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae8:	f000 fab3 	bl	8004052 <prvIsQueueEmpty>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d017      	beq.n	8003b22 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	3324      	adds	r3, #36	; 0x24
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 ff28 	bl	8004950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b02:	f000 fa54 	bl	8003fae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b06:	f000 fd65 	bl	80045d4 <xTaskResumeAll>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d189      	bne.n	8003a24 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <xQueueReceive+0x1b4>)
 8003b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	e780      	b.n	8003a24 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b24:	f000 fa43 	bl	8003fae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b28:	f000 fd54 	bl	80045d4 <xTaskResumeAll>
 8003b2c:	e77a      	b.n	8003a24 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b30:	f000 fa3d 	bl	8003fae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b34:	f000 fd4e 	bl	80045d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b3a:	f000 fa8a 	bl	8004052 <prvIsQueueEmpty>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f43f af6f 	beq.w	8003a24 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3730      	adds	r7, #48	; 0x30
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08e      	sub	sp, #56	; 0x38
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <xQueueSemaphoreTake+0x30>
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	e7fe      	b.n	8003b82 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <xQueueSemaphoreTake+0x4c>
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e7fe      	b.n	8003b9e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ba0:	f001 f8da 	bl	8004d58 <xTaskGetSchedulerState>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <xQueueSemaphoreTake+0x5c>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <xQueueSemaphoreTake+0x60>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <xQueueSemaphoreTake+0x62>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <xQueueSemaphoreTake+0x7a>
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	e7fe      	b.n	8003bcc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bce:	f001 ffe5 	bl	8005b9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d024      	beq.n	8003c28 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003bee:	f001 fa6d 	bl	80050cc <pvTaskIncrementMutexHeldCount>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00f      	beq.n	8003c20 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	3310      	adds	r3, #16
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fef1 	bl	80049ec <xTaskRemoveFromEventList>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c10:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <xQueueSemaphoreTake+0x20c>)
 8003c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c20:	f001 ffea 	bl	8005bf8 <vPortExitCritical>
				return pdPASS;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e096      	b.n	8003d56 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d110      	bne.n	8003c50 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <xQueueSemaphoreTake+0xf4>
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e7fe      	b.n	8003c46 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c48:	f001 ffd6 	bl	8005bf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e082      	b.n	8003d56 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 ff28 	bl	8004ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c64:	f001 ffc8 	bl	8005bf8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c68:	f000 fca6 	bl	80045b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c6c:	f001 ff96 	bl	8005b9c <vPortEnterCritical>
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d103      	bne.n	8003c86 <xQueueSemaphoreTake+0x132>
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c8c:	b25b      	sxtb	r3, r3
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d103      	bne.n	8003c9c <xQueueSemaphoreTake+0x148>
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c9c:	f001 ffac 	bl	8005bf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ca0:	463a      	mov	r2, r7
 8003ca2:	f107 030c 	add.w	r3, r7, #12
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 ff17 	bl	8004adc <xTaskCheckForTimeOut>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d132      	bne.n	8003d1a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cb6:	f000 f9cc 	bl	8004052 <prvIsQueueEmpty>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d026      	beq.n	8003d0e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d109      	bne.n	8003cdc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003cc8:	f001 ff68 	bl	8005b9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 f85f 	bl	8004d94 <xTaskPriorityInherit>
 8003cd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003cd8:	f001 ff8e 	bl	8005bf8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	3324      	adds	r3, #36	; 0x24
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fe33 	bl	8004950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cec:	f000 f95f 	bl	8003fae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cf0:	f000 fc70 	bl	80045d4 <xTaskResumeAll>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f47f af69 	bne.w	8003bce <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <xQueueSemaphoreTake+0x20c>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	e75f      	b.n	8003bce <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d10:	f000 f94d 	bl	8003fae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d14:	f000 fc5e 	bl	80045d4 <xTaskResumeAll>
 8003d18:	e759      	b.n	8003bce <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d1c:	f000 f947 	bl	8003fae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d20:	f000 fc58 	bl	80045d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d26:	f000 f994 	bl	8004052 <prvIsQueueEmpty>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f43f af4e 	beq.w	8003bce <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003d38:	f001 ff30 	bl	8005b9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d3e:	f000 f88e 	bl	8003e5e <prvGetDisinheritPriorityAfterTimeout>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f926 	bl	8004f9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d50:	f001 ff52 	bl	8005bf8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3738      	adds	r7, #56	; 0x38
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08e      	sub	sp, #56	; 0x38
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <xQueueReceiveFromISR+0x2a>
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	e7fe      	b.n	8003d8c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <xQueueReceiveFromISR+0x38>
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <xQueueReceiveFromISR+0x3c>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <xQueueReceiveFromISR+0x3e>
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <xQueueReceiveFromISR+0x56>
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	e7fe      	b.n	8003db8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dba:	f001 ffcb 	bl	8005d54 <vPortValidateInterruptPriority>
	__asm volatile
 8003dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	61ba      	str	r2, [r7, #24]
 8003dd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003dd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02f      	beq.n	8003e46 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003df4:	f000 f8b5 	bl	8003f62 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	1e5a      	subs	r2, r3, #1
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003e00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d112      	bne.n	8003e30 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	3310      	adds	r3, #16
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fde8 	bl	80049ec <xTaskRemoveFromEventList>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00e      	beq.n	8003e40 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e007      	b.n	8003e40 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e34:	3301      	adds	r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	b25a      	sxtb	r2, r3
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003e40:	2301      	movs	r3, #1
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34
 8003e44:	e001      	b.n	8003e4a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3738      	adds	r7, #56	; 0x38
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1c3 0307 	rsb	r3, r3, #7
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e001      	b.n	8003e80 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e80:	68fb      	ldr	r3, [r7, #12]
	}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10d      	bne.n	8003ec8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d14d      	bne.n	8003f50 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 ffeb 	bl	8004e94 <xTaskPriorityDisinherit>
 8003ebe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	e043      	b.n	8003f50 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d119      	bne.n	8003f02 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6858      	ldr	r0, [r3, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	f002 f979 	bl	80061d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	441a      	add	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d32b      	bcc.n	8003f50 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e026      	b.n	8003f50 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68d8      	ldr	r0, [r3, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	f002 f95f 	bl	80061d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	425b      	negs	r3, r3
 8003f1c:	441a      	add	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d207      	bcs.n	8003f3e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	425b      	negs	r3, r3
 8003f38:	441a      	add	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d105      	bne.n	8003f50 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f58:	697b      	ldr	r3, [r7, #20]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d018      	beq.n	8003fa6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	441a      	add	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d303      	bcc.n	8003f96 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68d9      	ldr	r1, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6838      	ldr	r0, [r7, #0]
 8003fa2:	f002 f915 	bl	80061d0 <memcpy>
	}
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fb6:	f001 fdf1 	bl	8005b9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fc2:	e011      	b.n	8003fe8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d012      	beq.n	8003ff2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3324      	adds	r3, #36	; 0x24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fd0b 	bl	80049ec <xTaskRemoveFromEventList>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fdc:	f000 fdde 	bl	8004b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	dce9      	bgt.n	8003fc4 <prvUnlockQueue+0x16>
 8003ff0:	e000      	b.n	8003ff4 <prvUnlockQueue+0x46>
					break;
 8003ff2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	22ff      	movs	r2, #255	; 0xff
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ffc:	f001 fdfc 	bl	8005bf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004000:	f001 fdcc 	bl	8005b9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800400a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800400c:	e011      	b.n	8004032 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d012      	beq.n	800403c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3310      	adds	r3, #16
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fce6 	bl	80049ec <xTaskRemoveFromEventList>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004026:	f000 fdb9 	bl	8004b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800402a:	7bbb      	ldrb	r3, [r7, #14]
 800402c:	3b01      	subs	r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004036:	2b00      	cmp	r3, #0
 8004038:	dce9      	bgt.n	800400e <prvUnlockQueue+0x60>
 800403a:	e000      	b.n	800403e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800403c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	22ff      	movs	r2, #255	; 0xff
 8004042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004046:	f001 fdd7 	bl	8005bf8 <vPortExitCritical>
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800405a:	f001 fd9f 	bl	8005b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	2b00      	cmp	r3, #0
 8004064:	d102      	bne.n	800406c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004066:	2301      	movs	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e001      	b.n	8004070 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004070:	f001 fdc2 	bl	8005bf8 <vPortExitCritical>

	return xReturn;
 8004074:	68fb      	ldr	r3, [r7, #12]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004086:	f001 fd89 	bl	8005b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	429a      	cmp	r2, r3
 8004094:	d102      	bne.n	800409c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004096:	2301      	movs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e001      	b.n	80040a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040a0:	f001 fdaa 	bl	8005bf8 <vPortExitCritical>

	return xReturn;
 80040a4:	68fb      	ldr	r3, [r7, #12]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e014      	b.n	80040ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040c0:	4a0e      	ldr	r2, [pc, #56]	; (80040fc <vQueueAddToRegistry+0x4c>)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040cc:	490b      	ldr	r1, [pc, #44]	; (80040fc <vQueueAddToRegistry+0x4c>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <vQueueAddToRegistry+0x4c>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040e2:	e005      	b.n	80040f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b07      	cmp	r3, #7
 80040ee:	d9e7      	bls.n	80040c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	20004630 	.word	0x20004630

08004100 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004110:	f001 fd44 	bl	8005b9c <vPortEnterCritical>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800411a:	b25b      	sxtb	r3, r3
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d103      	bne.n	800412a <vQueueWaitForMessageRestricted+0x2a>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004130:	b25b      	sxtb	r3, r3
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d103      	bne.n	8004140 <vQueueWaitForMessageRestricted+0x40>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004140:	f001 fd5a 	bl	8005bf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3324      	adds	r3, #36	; 0x24
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fc1f 	bl	8004998 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff ff27 	bl	8003fae <prvUnlockQueue>
	}
 8004160:	bf00      	nop
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08e      	sub	sp, #56	; 0x38
 800416c:	af04      	add	r7, sp, #16
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <xTaskCreateStatic+0x28>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	623b      	str	r3, [r7, #32]
 800418e:	e7fe      	b.n	800418e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <xTaskCreateStatic+0x42>
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e7fe      	b.n	80041a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041aa:	2354      	movs	r3, #84	; 0x54
 80041ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b54      	cmp	r3, #84	; 0x54
 80041b2:	d009      	beq.n	80041c8 <xTaskCreateStatic+0x60>
 80041b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b8:	f383 8811 	msr	BASEPRI, r3
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	61bb      	str	r3, [r7, #24]
 80041c6:	e7fe      	b.n	80041c6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01e      	beq.n	800420e <xTaskCreateStatic+0xa6>
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01b      	beq.n	800420e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041e8:	2300      	movs	r3, #0
 80041ea:	9303      	str	r3, [sp, #12]
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	9302      	str	r3, [sp, #8]
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f850 	bl	80042a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004206:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004208:	f000 f8d4 	bl	80043b4 <prvAddNewTaskToReadyList>
 800420c:	e001      	b.n	8004212 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004212:	697b      	ldr	r3, [r7, #20]
	}
 8004214:	4618      	mov	r0, r3
 8004216:	3728      	adds	r7, #40	; 0x28
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af04      	add	r7, sp, #16
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fdcd 	bl	8005dd0 <pvPortMalloc>
 8004236:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00e      	beq.n	800425c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800423e:	2054      	movs	r0, #84	; 0x54
 8004240:	f001 fdc6 	bl	8005dd0 <pvPortMalloc>
 8004244:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
 8004252:	e005      	b.n	8004260 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004254:	6978      	ldr	r0, [r7, #20]
 8004256:	f001 fe7d 	bl	8005f54 <vPortFree>
 800425a:	e001      	b.n	8004260 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d017      	beq.n	8004296 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	2300      	movs	r3, #0
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	9302      	str	r3, [sp, #8]
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f80e 	bl	80042a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800428a:	69f8      	ldr	r0, [r7, #28]
 800428c:	f000 f892 	bl	80043b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004290:	2301      	movs	r3, #1
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e002      	b.n	800429c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800429c:	69bb      	ldr	r3, [r7, #24]
	}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b088      	sub	sp, #32
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042be:	3b01      	subs	r3, #1
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f023 0307 	bic.w	r3, r3, #7
 80042cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <prvInitialiseNewTask+0x46>
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e7fe      	b.n	80042ea <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01f      	beq.n	8004332 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e012      	b.n	800431e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	7819      	ldrb	r1, [r3, #0]
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	3334      	adds	r3, #52	; 0x34
 8004308:	460a      	mov	r2, r1
 800430a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b0f      	cmp	r3, #15
 8004322:	d9e9      	bls.n	80042f8 <prvInitialiseNewTask+0x52>
 8004324:	e000      	b.n	8004328 <prvInitialiseNewTask+0x82>
			{
				break;
 8004326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004330:	e003      	b.n	800433a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	2b06      	cmp	r3, #6
 800433e:	d901      	bls.n	8004344 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004340:	2306      	movs	r3, #6
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004348:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800434e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	2200      	movs	r2, #0
 8004354:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	3304      	adds	r3, #4
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe feec 	bl	8003138 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	3318      	adds	r3, #24
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe fee7 	bl	8003138 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	f1c3 0207 	rsb	r2, r3, #7
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	2200      	movs	r2, #0
 8004384:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	68f9      	ldr	r1, [r7, #12]
 8004392:	69b8      	ldr	r0, [r7, #24]
 8004394:	f001 fada 	bl	800594c <pxPortInitialiseStack>
 8004398:	4602      	mov	r2, r0
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043aa:	bf00      	nop
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043bc:	f001 fbee 	bl	8005b9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043c0:	4b2a      	ldr	r3, [pc, #168]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a29      	ldr	r2, [pc, #164]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043d2:	4a27      	ldr	r2, [pc, #156]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043d8:	4b24      	ldr	r3, [pc, #144]	; (800446c <prvAddNewTaskToReadyList+0xb8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d110      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043e0:	f000 fc00 	bl	8004be4 <prvInitialiseTaskLists>
 80043e4:	e00d      	b.n	8004402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <prvAddNewTaskToReadyList+0xc0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d802      	bhi.n	8004402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043fc:	4a1c      	ldr	r2, [pc, #112]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004402:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	4a1b      	ldr	r2, [pc, #108]	; (8004478 <prvAddNewTaskToReadyList+0xc4>)
 800440a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	2201      	movs	r2, #1
 8004412:	409a      	lsls	r2, r3
 8004414:	4b19      	ldr	r3, [pc, #100]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	4a18      	ldr	r2, [pc, #96]	; (800447c <prvAddNewTaskToReadyList+0xc8>)
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a15      	ldr	r2, [pc, #84]	; (8004480 <prvAddNewTaskToReadyList+0xcc>)
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f7fe fe8c 	bl	8003152 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800443a:	f001 fbdd 	bl	8005bf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <prvAddNewTaskToReadyList+0xc0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00e      	beq.n	8004464 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004446:	4b0a      	ldr	r3, [pc, #40]	; (8004470 <prvAddNewTaskToReadyList+0xbc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	429a      	cmp	r2, r3
 8004452:	d207      	bcs.n	8004464 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <prvAddNewTaskToReadyList+0xd0>)
 8004456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000844 	.word	0x20000844
 8004470:	20000744 	.word	0x20000744
 8004474:	20000850 	.word	0x20000850
 8004478:	20000860 	.word	0x20000860
 800447c:	2000084c 	.word	0x2000084c
 8004480:	20000748 	.word	0x20000748
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <vTaskDelay+0x60>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <vTaskDelay+0x2e>
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	e7fe      	b.n	80044b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80044b6:	f000 f87f 	bl	80045b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044ba:	2100      	movs	r1, #0
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fe19 	bl	80050f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044c2:	f000 f887 	bl	80045d4 <xTaskResumeAll>
 80044c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <vTaskDelay+0x64>)
 80044d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	2000086c 	.word	0x2000086c
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044fe:	463a      	mov	r2, r7
 8004500:	1d39      	adds	r1, r7, #4
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc f852 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	9202      	str	r2, [sp, #8]
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	2300      	movs	r3, #0
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	460a      	mov	r2, r1
 800451e:	4920      	ldr	r1, [pc, #128]	; (80045a0 <vTaskStartScheduler+0xb0>)
 8004520:	4820      	ldr	r0, [pc, #128]	; (80045a4 <vTaskStartScheduler+0xb4>)
 8004522:	f7ff fe21 	bl	8004168 <xTaskCreateStatic>
 8004526:	4602      	mov	r2, r0
 8004528:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <vTaskStartScheduler+0xb8>)
 800452a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800452c:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <vTaskStartScheduler+0xb8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004534:	2301      	movs	r3, #1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e001      	b.n	800453e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d102      	bne.n	800454a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004544:	f000 fe3c 	bl	80051c0 <xTimerCreateTimerTask>
 8004548:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d115      	bne.n	800457c <vTaskStartScheduler+0x8c>
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <vTaskStartScheduler+0xbc>)
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <vTaskStartScheduler+0xc0>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004570:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <vTaskStartScheduler+0xc4>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004576:	f001 fa73 	bl	8005a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800457a:	e00d      	b.n	8004598 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d109      	bne.n	8004598 <vTaskStartScheduler+0xa8>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e7fe      	b.n	8004596 <vTaskStartScheduler+0xa6>
}
 8004598:	bf00      	nop
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	08007154 	.word	0x08007154
 80045a4:	08004bb5 	.word	0x08004bb5
 80045a8:	20000868 	.word	0x20000868
 80045ac:	20000864 	.word	0x20000864
 80045b0:	20000850 	.word	0x20000850
 80045b4:	20000848 	.word	0x20000848

080045b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045bc:	4b04      	ldr	r3, [pc, #16]	; (80045d0 <vTaskSuspendAll+0x18>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	4a03      	ldr	r2, [pc, #12]	; (80045d0 <vTaskSuspendAll+0x18>)
 80045c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	2000086c 	.word	0x2000086c

080045d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045e2:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <xTaskResumeAll+0x114>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <xTaskResumeAll+0x2a>
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	e7fe      	b.n	80045fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045fe:	f001 facd 	bl	8005b9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004602:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <xTaskResumeAll+0x114>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	4a37      	ldr	r2, [pc, #220]	; (80046e8 <xTaskResumeAll+0x114>)
 800460a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800460c:	4b36      	ldr	r3, [pc, #216]	; (80046e8 <xTaskResumeAll+0x114>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d161      	bne.n	80046d8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <xTaskResumeAll+0x118>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05d      	beq.n	80046d8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800461c:	e02e      	b.n	800467c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800461e:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <xTaskResumeAll+0x11c>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3318      	adds	r3, #24
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fdee 	bl	800320c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3304      	adds	r3, #4
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fde9 	bl	800320c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	2201      	movs	r2, #1
 8004640:	409a      	lsls	r2, r3
 8004642:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <xTaskResumeAll+0x120>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4313      	orrs	r3, r2
 8004648:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <xTaskResumeAll+0x120>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4a27      	ldr	r2, [pc, #156]	; (80046f8 <xTaskResumeAll+0x124>)
 800465a:	441a      	add	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7fe fd75 	bl	8003152 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	4b23      	ldr	r3, [pc, #140]	; (80046fc <xTaskResumeAll+0x128>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	429a      	cmp	r2, r3
 8004674:	d302      	bcc.n	800467c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004676:	4b22      	ldr	r3, [pc, #136]	; (8004700 <xTaskResumeAll+0x12c>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800467c:	4b1c      	ldr	r3, [pc, #112]	; (80046f0 <xTaskResumeAll+0x11c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1cc      	bne.n	800461e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800468a:	f000 fb45 	bl	8004d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800468e:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <xTaskResumeAll+0x130>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d010      	beq.n	80046bc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800469a:	f000 f847 	bl	800472c <xTaskIncrementTick>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <xTaskResumeAll+0x12c>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f1      	bne.n	800469a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <xTaskResumeAll+0x130>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <xTaskResumeAll+0x12c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <xTaskResumeAll+0x134>)
 80046ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046d8:	f001 fa8e 	bl	8005bf8 <vPortExitCritical>

	return xAlreadyYielded;
 80046dc:	68bb      	ldr	r3, [r7, #8]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	2000086c 	.word	0x2000086c
 80046ec:	20000844 	.word	0x20000844
 80046f0:	20000804 	.word	0x20000804
 80046f4:	2000084c 	.word	0x2000084c
 80046f8:	20000748 	.word	0x20000748
 80046fc:	20000744 	.word	0x20000744
 8004700:	20000858 	.word	0x20000858
 8004704:	20000854 	.word	0x20000854
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <xTaskGetTickCount+0x1c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004718:	687b      	ldr	r3, [r7, #4]
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000848 	.word	0x20000848

0800472c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004736:	4b4e      	ldr	r3, [pc, #312]	; (8004870 <xTaskIncrementTick+0x144>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f040 8087 	bne.w	800484e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004740:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <xTaskIncrementTick+0x148>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004748:	4a4a      	ldr	r2, [pc, #296]	; (8004874 <xTaskIncrementTick+0x148>)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11f      	bne.n	8004794 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004754:	4b48      	ldr	r3, [pc, #288]	; (8004878 <xTaskIncrementTick+0x14c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <xTaskIncrementTick+0x46>
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	e7fe      	b.n	8004770 <xTaskIncrementTick+0x44>
 8004772:	4b41      	ldr	r3, [pc, #260]	; (8004878 <xTaskIncrementTick+0x14c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	4b40      	ldr	r3, [pc, #256]	; (800487c <xTaskIncrementTick+0x150>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <xTaskIncrementTick+0x14c>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4a3e      	ldr	r2, [pc, #248]	; (800487c <xTaskIncrementTick+0x150>)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	4b3e      	ldr	r3, [pc, #248]	; (8004880 <xTaskIncrementTick+0x154>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a3c      	ldr	r2, [pc, #240]	; (8004880 <xTaskIncrementTick+0x154>)
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	f000 fac2 	bl	8004d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004794:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <xTaskIncrementTick+0x158>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	429a      	cmp	r2, r3
 800479c:	d348      	bcc.n	8004830 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800479e:	4b36      	ldr	r3, [pc, #216]	; (8004878 <xTaskIncrementTick+0x14c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d104      	bne.n	80047b2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a8:	4b36      	ldr	r3, [pc, #216]	; (8004884 <xTaskIncrementTick+0x158>)
 80047aa:	f04f 32ff 	mov.w	r2, #4294967295
 80047ae:	601a      	str	r2, [r3, #0]
					break;
 80047b0:	e03e      	b.n	8004830 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b2:	4b31      	ldr	r3, [pc, #196]	; (8004878 <xTaskIncrementTick+0x14c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d203      	bcs.n	80047d2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047ca:	4a2e      	ldr	r2, [pc, #184]	; (8004884 <xTaskIncrementTick+0x158>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047d0:	e02e      	b.n	8004830 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe fd18 	bl	800320c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d004      	beq.n	80047ee <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	3318      	adds	r3, #24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe fd0f 	bl	800320c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	2201      	movs	r2, #1
 80047f4:	409a      	lsls	r2, r3
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <xTaskIncrementTick+0x15c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <xTaskIncrementTick+0x15c>)
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <xTaskIncrementTick+0x160>)
 800480e:	441a      	add	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7fe fc9b 	bl	8003152 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <xTaskIncrementTick+0x164>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	429a      	cmp	r2, r3
 8004828:	d3b9      	bcc.n	800479e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800482a:	2301      	movs	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800482e:	e7b6      	b.n	800479e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004830:	4b17      	ldr	r3, [pc, #92]	; (8004890 <xTaskIncrementTick+0x164>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	4915      	ldr	r1, [pc, #84]	; (800488c <xTaskIncrementTick+0x160>)
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d907      	bls.n	8004858 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004848:	2301      	movs	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e004      	b.n	8004858 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <xTaskIncrementTick+0x168>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <xTaskIncrementTick+0x168>)
 8004856:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <xTaskIncrementTick+0x16c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004860:	2301      	movs	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004864:	697b      	ldr	r3, [r7, #20]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	2000086c 	.word	0x2000086c
 8004874:	20000848 	.word	0x20000848
 8004878:	200007fc 	.word	0x200007fc
 800487c:	20000800 	.word	0x20000800
 8004880:	2000085c 	.word	0x2000085c
 8004884:	20000864 	.word	0x20000864
 8004888:	2000084c 	.word	0x2000084c
 800488c:	20000748 	.word	0x20000748
 8004890:	20000744 	.word	0x20000744
 8004894:	20000854 	.word	0x20000854
 8004898:	20000858 	.word	0x20000858

0800489c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <vTaskSwitchContext+0xa0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048aa:	4b25      	ldr	r3, [pc, #148]	; (8004940 <vTaskSwitchContext+0xa4>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048b0:	e03e      	b.n	8004930 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <vTaskSwitchContext+0xa4>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <vTaskSwitchContext+0xa8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	fab3 f383 	clz	r3, r3
 80048c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048c6:	7afb      	ldrb	r3, [r7, #11]
 80048c8:	f1c3 031f 	rsb	r3, r3, #31
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	491e      	ldr	r1, [pc, #120]	; (8004948 <vTaskSwitchContext+0xac>)
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	e7fe      	b.n	80048f4 <vTaskSwitchContext+0x58>
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <vTaskSwitchContext+0xac>)
 8004902:	4413      	add	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	605a      	str	r2, [r3, #4]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	3308      	adds	r3, #8
 8004918:	429a      	cmp	r2, r3
 800491a:	d104      	bne.n	8004926 <vTaskSwitchContext+0x8a>
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a07      	ldr	r2, [pc, #28]	; (800494c <vTaskSwitchContext+0xb0>)
 800492e:	6013      	str	r3, [r2, #0]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	2000086c 	.word	0x2000086c
 8004940:	20000858 	.word	0x20000858
 8004944:	2000084c 	.word	0x2000084c
 8004948:	20000748 	.word	0x20000748
 800494c:	20000744 	.word	0x20000744

08004950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <vTaskPlaceOnEventList+0x24>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e7fe      	b.n	8004972 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004974:	4b07      	ldr	r3, [pc, #28]	; (8004994 <vTaskPlaceOnEventList+0x44>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3318      	adds	r3, #24
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fe fc0c 	bl	800319a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004982:	2101      	movs	r1, #1
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f000 fbb5 	bl	80050f4 <prvAddCurrentTaskToDelayedList>
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000744 	.word	0x20000744

08004998 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d109      	bne.n	80049be <vTaskPlaceOnEventListRestricted+0x26>
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e7fe      	b.n	80049bc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <vTaskPlaceOnEventListRestricted+0x50>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3318      	adds	r3, #24
 80049c4:	4619      	mov	r1, r3
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7fe fbc3 	bl	8003152 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295
 80049d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	f000 fb8a 	bl	80050f4 <prvAddCurrentTaskToDelayedList>
	}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000744 	.word	0x20000744

080049ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <xTaskRemoveFromEventList+0x2a>
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e7fe      	b.n	8004a14 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	3318      	adds	r3, #24
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fbf6 	bl	800320c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <xTaskRemoveFromEventList+0xac>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11c      	bne.n	8004a62 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fbed 	bl	800320c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	2201      	movs	r2, #1
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <xTaskRemoveFromEventList+0xb0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <xTaskRemoveFromEventList+0xb0>)
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <xTaskRemoveFromEventList+0xb4>)
 8004a52:	441a      	add	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f7fe fb79 	bl	8003152 <vListInsertEnd>
 8004a60:	e005      	b.n	8004a6e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	3318      	adds	r3, #24
 8004a66:	4619      	mov	r1, r3
 8004a68:	480e      	ldr	r0, [pc, #56]	; (8004aa4 <xTaskRemoveFromEventList+0xb8>)
 8004a6a:	f7fe fb72 	bl	8003152 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <xTaskRemoveFromEventList+0xbc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d905      	bls.n	8004a88 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <xTaskRemoveFromEventList+0xc0>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e001      	b.n	8004a8c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a8c:	697b      	ldr	r3, [r7, #20]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	2000086c 	.word	0x2000086c
 8004a9c:	2000084c 	.word	0x2000084c
 8004aa0:	20000748 	.word	0x20000748
 8004aa4:	20000804 	.word	0x20000804
 8004aa8:	20000744 	.word	0x20000744
 8004aac:	20000858 	.word	0x20000858

08004ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <vTaskInternalSetTimeOutState+0x24>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <vTaskInternalSetTimeOutState+0x28>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	605a      	str	r2, [r3, #4]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	2000085c 	.word	0x2000085c
 8004ad8:	20000848 	.word	0x20000848

08004adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <xTaskCheckForTimeOut+0x24>
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e7fe      	b.n	8004afe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <xTaskCheckForTimeOut+0x3e>
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e7fe      	b.n	8004b18 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b1a:	f001 f83f 	bl	8005b9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <xTaskCheckForTimeOut+0xb8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d102      	bne.n	8004b3e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	e023      	b.n	8004b86 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b15      	ldr	r3, [pc, #84]	; (8004b98 <xTaskCheckForTimeOut+0xbc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d007      	beq.n	8004b5a <xTaskCheckForTimeOut+0x7e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e015      	b.n	8004b86 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d20b      	bcs.n	8004b7c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff9d 	bl	8004ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e004      	b.n	8004b86 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b86:	f001 f837 	bl	8005bf8 <vPortExitCritical>

	return xReturn;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20000848 	.word	0x20000848
 8004b98:	2000085c 	.word	0x2000085c

08004b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <vTaskMissedYield+0x14>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	20000858 	.word	0x20000858

08004bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bbc:	f000 f852 	bl	8004c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <prvIdleTask+0x28>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d9f9      	bls.n	8004bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <prvIdleTask+0x2c>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bd8:	e7f0      	b.n	8004bbc <prvIdleTask+0x8>
 8004bda:	bf00      	nop
 8004bdc:	20000748 	.word	0x20000748
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	e00c      	b.n	8004c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <prvInitialiseTaskLists+0x60>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fa7a 	bl	80030f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3301      	adds	r3, #1
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d9ef      	bls.n	8004bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c10:	480d      	ldr	r0, [pc, #52]	; (8004c48 <prvInitialiseTaskLists+0x64>)
 8004c12:	f7fe fa71 	bl	80030f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c16:	480d      	ldr	r0, [pc, #52]	; (8004c4c <prvInitialiseTaskLists+0x68>)
 8004c18:	f7fe fa6e 	bl	80030f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c1c:	480c      	ldr	r0, [pc, #48]	; (8004c50 <prvInitialiseTaskLists+0x6c>)
 8004c1e:	f7fe fa6b 	bl	80030f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c22:	480c      	ldr	r0, [pc, #48]	; (8004c54 <prvInitialiseTaskLists+0x70>)
 8004c24:	f7fe fa68 	bl	80030f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c28:	480b      	ldr	r0, [pc, #44]	; (8004c58 <prvInitialiseTaskLists+0x74>)
 8004c2a:	f7fe fa65 	bl	80030f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <prvInitialiseTaskLists+0x78>)
 8004c30:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <prvInitialiseTaskLists+0x64>)
 8004c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <prvInitialiseTaskLists+0x7c>)
 8004c36:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <prvInitialiseTaskLists+0x68>)
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000748 	.word	0x20000748
 8004c48:	200007d4 	.word	0x200007d4
 8004c4c:	200007e8 	.word	0x200007e8
 8004c50:	20000804 	.word	0x20000804
 8004c54:	20000818 	.word	0x20000818
 8004c58:	20000830 	.word	0x20000830
 8004c5c:	200007fc 	.word	0x200007fc
 8004c60:	20000800 	.word	0x20000800

08004c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c6a:	e019      	b.n	8004ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c6c:	f000 ff96 	bl	8005b9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <prvCheckTasksWaitingTermination+0x4c>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe fac5 	bl	800320c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <prvCheckTasksWaitingTermination+0x50>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <prvCheckTasksWaitingTermination+0x50>)
 8004c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <prvCheckTasksWaitingTermination+0x54>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <prvCheckTasksWaitingTermination+0x54>)
 8004c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c96:	f000 ffaf 	bl	8005bf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f80e 	bl	8004cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <prvCheckTasksWaitingTermination+0x54>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e1      	bne.n	8004c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000818 	.word	0x20000818
 8004cb4:	20000844 	.word	0x20000844
 8004cb8:	2000082c 	.word	0x2000082c

08004cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d108      	bne.n	8004ce0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 f93e 	bl	8005f54 <vPortFree>
				vPortFree( pxTCB );
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 f93b 	bl	8005f54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cde:	e017      	b.n	8004d10 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d103      	bne.n	8004cf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f001 f932 	bl	8005f54 <vPortFree>
	}
 8004cf0:	e00e      	b.n	8004d10 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d009      	beq.n	8004d10 <prvDeleteTCB+0x54>
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	e7fe      	b.n	8004d0e <prvDeleteTCB+0x52>
	}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <prvResetNextTaskUnblockTime+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <prvResetNextTaskUnblockTime+0x3c>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d30:	e008      	b.n	8004d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <prvResetNextTaskUnblockTime+0x38>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <prvResetNextTaskUnblockTime+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	200007fc 	.word	0x200007fc
 8004d54:	20000864 	.word	0x20000864

08004d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <xTaskGetSchedulerState+0x34>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d66:	2301      	movs	r3, #1
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e008      	b.n	8004d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d6c:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <xTaskGetSchedulerState+0x38>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d74:	2302      	movs	r3, #2
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e001      	b.n	8004d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d7e:	687b      	ldr	r3, [r7, #4]
	}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	20000850 	.word	0x20000850
 8004d90:	2000086c 	.word	0x2000086c

08004d94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d069      	beq.n	8004e7e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dae:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <xTaskPriorityInherit+0xf4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d259      	bcs.n	8004e6c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	db06      	blt.n	8004dce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc0:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <xTaskPriorityInherit+0xf4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	f1c3 0207 	rsb	r2, r3, #7
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	6959      	ldr	r1, [r3, #20]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4a2b      	ldr	r2, [pc, #172]	; (8004e8c <xTaskPriorityInherit+0xf8>)
 8004de0:	4413      	add	r3, r2
 8004de2:	4299      	cmp	r1, r3
 8004de4:	d13a      	bne.n	8004e5c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fa0e 	bl	800320c <uxListRemove>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d115      	bne.n	8004e22 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	4924      	ldr	r1, [pc, #144]	; (8004e8c <xTaskPriorityInherit+0xf8>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xTaskPriorityInherit+0x8e>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	2201      	movs	r2, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <xTaskPriorityInherit+0xfc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <xTaskPriorityInherit+0xfc>)
 8004e20:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e22:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <xTaskPriorityInherit+0xf4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	2201      	movs	r2, #1
 8004e32:	409a      	lsls	r2, r3
 8004e34:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <xTaskPriorityInherit+0xfc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <xTaskPriorityInherit+0xfc>)
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4a10      	ldr	r2, [pc, #64]	; (8004e8c <xTaskPriorityInherit+0xf8>)
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fe f97c 	bl	8003152 <vListInsertEnd>
 8004e5a:	e004      	b.n	8004e66 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <xTaskPriorityInherit+0xf4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e008      	b.n	8004e7e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <xTaskPriorityInherit+0xf4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d201      	bcs.n	8004e7e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000744 	.word	0x20000744
 8004e8c:	20000748 	.word	0x20000748
 8004e90:	2000084c 	.word	0x2000084c

08004e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d06c      	beq.n	8004f84 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <xTaskPriorityDisinherit+0xfc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d009      	beq.n	8004ec8 <xTaskPriorityDisinherit+0x34>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	e7fe      	b.n	8004ec6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <xTaskPriorityDisinherit+0x50>
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	e7fe      	b.n	8004ee2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d044      	beq.n	8004f84 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d140      	bne.n	8004f84 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fe f980 	bl	800320c <uxListRemove>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d115      	bne.n	8004f3e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	491f      	ldr	r1, [pc, #124]	; (8004f94 <xTaskPriorityDisinherit+0x100>)
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xTaskPriorityDisinherit+0xaa>
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	43da      	mvns	r2, r3
 8004f34:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <xTaskPriorityDisinherit+0x104>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <xTaskPriorityDisinherit+0x104>)
 8004f3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	f1c3 0207 	rsb	r2, r3, #7
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	2201      	movs	r2, #1
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <xTaskPriorityDisinherit+0x104>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	4a0d      	ldr	r2, [pc, #52]	; (8004f98 <xTaskPriorityDisinherit+0x104>)
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <xTaskPriorityDisinherit+0x100>)
 8004f72:	441a      	add	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fe f8e9 	bl	8003152 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f84:	697b      	ldr	r3, [r7, #20]
	}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000744 	.word	0x20000744
 8004f94:	20000748 	.word	0x20000748
 8004f98:	2000084c 	.word	0x2000084c

08004f9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004faa:	2301      	movs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8081 	beq.w	80050b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e7fe      	b.n	8004fd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d902      	bls.n	8004fe2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e002      	b.n	8004fe8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d062      	beq.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d15d      	bne.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004ffc:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	429a      	cmp	r2, r3
 8005004:	d109      	bne.n	800501a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	e7fe      	b.n	8005018 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	db04      	blt.n	8005038 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f1c3 0207 	rsb	r2, r3, #7
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	6959      	ldr	r1, [r3, #20]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005048:	4413      	add	r3, r2
 800504a:	4299      	cmp	r1, r3
 800504c:	d134      	bne.n	80050b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	3304      	adds	r3, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe f8da 	bl	800320c <uxListRemove>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d115      	bne.n	800508a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	4918      	ldr	r1, [pc, #96]	; (80050c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	2201      	movs	r2, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	43da      	mvns	r2, r3
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4013      	ands	r3, r2
 8005086:	4a10      	ldr	r2, [pc, #64]	; (80050c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005088:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	2201      	movs	r2, #1
 8005090:	409a      	lsls	r2, r3
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	4a0b      	ldr	r2, [pc, #44]	; (80050c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4a06      	ldr	r2, [pc, #24]	; (80050c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80050aa:	441a      	add	r2, r3
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f7fe f84d 	bl	8003152 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050b8:	bf00      	nop
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20000744 	.word	0x20000744
 80050c4:	20000748 	.word	0x20000748
 80050c8:	2000084c 	.word	0x2000084c

080050cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050de:	3201      	adds	r2, #1
 80050e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80050e2:	4b03      	ldr	r3, [pc, #12]	; (80050f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80050e4:	681b      	ldr	r3, [r3, #0]
	}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	20000744 	.word	0x20000744

080050f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050fe:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005104:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3304      	adds	r3, #4
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe f87e 	bl	800320c <uxListRemove>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005116:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	2201      	movs	r2, #1
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43da      	mvns	r2, r3
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4013      	ands	r3, r2
 800512a:	4a20      	ldr	r2, [pc, #128]	; (80051ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800512c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d10a      	bne.n	800514c <prvAddCurrentTaskToDelayedList+0x58>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800513c:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	481a      	ldr	r0, [pc, #104]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005146:	f7fe f804 	bl	8003152 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800514a:	e026      	b.n	800519a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	429a      	cmp	r2, r3
 8005162:	d209      	bcs.n	8005178 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005164:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3304      	adds	r3, #4
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7fe f812 	bl	800319a <vListInsert>
}
 8005176:	e010      	b.n	800519a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3304      	adds	r3, #4
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f7fe f808 	bl	800319a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d202      	bcs.n	800519a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005194:	4a09      	ldr	r2, [pc, #36]	; (80051bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6013      	str	r3, [r2, #0]
}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000848 	.word	0x20000848
 80051a8:	20000744 	.word	0x20000744
 80051ac:	2000084c 	.word	0x2000084c
 80051b0:	20000830 	.word	0x20000830
 80051b4:	20000800 	.word	0x20000800
 80051b8:	200007fc 	.word	0x200007fc
 80051bc:	20000864 	.word	0x20000864

080051c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	; 0x28
 80051c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051ca:	f000 fb7f 	bl	80058cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051ce:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <xTimerCreateTimerTask+0x80>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d021      	beq.n	800521a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051de:	1d3a      	adds	r2, r7, #4
 80051e0:	f107 0108 	add.w	r1, r7, #8
 80051e4:	f107 030c 	add.w	r3, r7, #12
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fb f9fb 	bl	80005e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	9202      	str	r2, [sp, #8]
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	2306      	movs	r3, #6
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	2300      	movs	r3, #0
 80051fe:	460a      	mov	r2, r1
 8005200:	4910      	ldr	r1, [pc, #64]	; (8005244 <xTimerCreateTimerTask+0x84>)
 8005202:	4811      	ldr	r0, [pc, #68]	; (8005248 <xTimerCreateTimerTask+0x88>)
 8005204:	f7fe ffb0 	bl	8004168 <xTaskCreateStatic>
 8005208:	4602      	mov	r2, r0
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <xTimerCreateTimerTask+0x8c>)
 800520c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800520e:	4b0f      	ldr	r3, [pc, #60]	; (800524c <xTimerCreateTimerTask+0x8c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005216:	2301      	movs	r3, #1
 8005218:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <xTimerCreateTimerTask+0x74>
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e7fe      	b.n	8005232 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005234:	697b      	ldr	r3, [r7, #20]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	200008a0 	.word	0x200008a0
 8005244:	0800715c 	.word	0x0800715c
 8005248:	080054b1 	.word	0x080054b1
 800524c:	200008a4 	.word	0x200008a4

08005250 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800525e:	2028      	movs	r0, #40	; 0x28
 8005260:	f000 fdb6 	bl	8005dd0 <pvPortMalloc>
 8005264:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00d      	beq.n	8005288 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f841 	bl	800530a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005288:	697b      	ldr	r3, [r7, #20]
	}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005292:	b580      	push	{r7, lr}
 8005294:	b08a      	sub	sp, #40	; 0x28
 8005296:	af02      	add	r7, sp, #8
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80052a0:	2328      	movs	r3, #40	; 0x28
 80052a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b28      	cmp	r3, #40	; 0x28
 80052a8:	d009      	beq.n	80052be <xTimerCreateStatic+0x2c>
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e7fe      	b.n	80052bc <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <xTimerCreateStatic+0x48>
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	e7fe      	b.n	80052d8 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00d      	beq.n	8005300 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f805 	bl	800530a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005300:	69fb      	ldr	r3, [r7, #28]
	}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <prvInitialiseNewTimer+0x28>
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	e7fe      	b.n	8005330 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01e      	beq.n	8005376 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005338:	f000 fac8 	bl	80058cc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	3304      	adds	r3, #4
 8005358:	4618      	mov	r0, r3
 800535a:	f7fd feed 	bl	8003138 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800536a:	f043 0304 	orr.w	r3, r3, #4
 800536e:	b2da      	uxtb	r2, r3
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005376:	bf00      	nop
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d109      	bne.n	80053ac <xTimerGenericCommand+0x2c>
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	e7fe      	b.n	80053aa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053ac:	4b19      	ldr	r3, [pc, #100]	; (8005414 <xTimerGenericCommand+0x94>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d02a      	beq.n	800540a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b05      	cmp	r3, #5
 80053c4:	dc18      	bgt.n	80053f8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053c6:	f7ff fcc7 	bl	8004d58 <xTaskGetSchedulerState>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d109      	bne.n	80053e4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053d0:	4b10      	ldr	r3, [pc, #64]	; (8005414 <xTimerGenericCommand+0x94>)
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	f107 0114 	add.w	r1, r7, #20
 80053d8:	2300      	movs	r3, #0
 80053da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053dc:	f7fe f8c6 	bl	800356c <xQueueGenericSend>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24
 80053e2:	e012      	b.n	800540a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <xTimerGenericCommand+0x94>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	f107 0114 	add.w	r1, r7, #20
 80053ec:	2300      	movs	r3, #0
 80053ee:	2200      	movs	r2, #0
 80053f0:	f7fe f8bc 	bl	800356c <xQueueGenericSend>
 80053f4:	6278      	str	r0, [r7, #36]	; 0x24
 80053f6:	e008      	b.n	800540a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053f8:	4b06      	ldr	r3, [pc, #24]	; (8005414 <xTimerGenericCommand+0x94>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	f107 0114 	add.w	r1, r7, #20
 8005400:	2300      	movs	r3, #0
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	f7fe f9ac 	bl	8003760 <xQueueGenericSendFromISR>
 8005408:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800540c:	4618      	mov	r0, r3
 800540e:	3728      	adds	r7, #40	; 0x28
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	200008a0 	.word	0x200008a0

08005418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af02      	add	r7, sp, #8
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <prvProcessExpiredTimer+0x94>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	3304      	adds	r3, #4
 8005430:	4618      	mov	r0, r3
 8005432:	f7fd feeb 	bl	800320c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d021      	beq.n	8005488 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	699a      	ldr	r2, [r3, #24]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	18d1      	adds	r1, r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	6978      	ldr	r0, [r7, #20]
 8005452:	f000 f8d1 	bl	80055f8 <prvInsertTimerInActiveList>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01e      	beq.n	800549a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800545c:	2300      	movs	r3, #0
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	2100      	movs	r1, #0
 8005466:	6978      	ldr	r0, [r7, #20]
 8005468:	f7ff ff8a 	bl	8005380 <xTimerGenericCommand>
 800546c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d112      	bne.n	800549a <prvProcessExpiredTimer+0x82>
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e7fe      	b.n	8005486 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800548e:	f023 0301 	bic.w	r3, r3, #1
 8005492:	b2da      	uxtb	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	6978      	ldr	r0, [r7, #20]
 80054a0:	4798      	blx	r3
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000898 	.word	0x20000898

080054b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054b8:	f107 0308 	add.w	r3, r7, #8
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f857 	bl	8005570 <prvGetNextExpireTime>
 80054c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4619      	mov	r1, r3
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f803 	bl	80054d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054ce:	f000 f8d5 	bl	800567c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054d2:	e7f1      	b.n	80054b8 <prvTimerTask+0x8>

080054d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054de:	f7ff f86b 	bl	80045b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054e2:	f107 0308 	add.w	r3, r7, #8
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f866 	bl	80055b8 <prvSampleTimeNow>
 80054ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d130      	bne.n	8005556 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <prvProcessTimerOrBlockTask+0x3c>
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d806      	bhi.n	8005510 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005502:	f7ff f867 	bl	80045d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff85 	bl	8005418 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800550e:	e024      	b.n	800555a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <prvProcessTimerOrBlockTask+0x90>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <prvProcessTimerOrBlockTask+0x50>
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <prvProcessTimerOrBlockTask+0x52>
 8005524:	2300      	movs	r3, #0
 8005526:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <prvProcessTimerOrBlockTask+0x94>)
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	4619      	mov	r1, r3
 8005536:	f7fe fde3 	bl	8004100 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800553a:	f7ff f84b 	bl	80045d4 <xTaskResumeAll>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <prvProcessTimerOrBlockTask+0x98>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
}
 8005554:	e001      	b.n	800555a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005556:	f7ff f83d 	bl	80045d4 <xTaskResumeAll>
}
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	2000089c 	.word	0x2000089c
 8005568:	200008a0 	.word	0x200008a0
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <prvGetNextExpireTime+0x44>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <prvGetNextExpireTime+0x16>
 8005582:	2201      	movs	r2, #1
 8005584:	e000      	b.n	8005588 <prvGetNextExpireTime+0x18>
 8005586:	2200      	movs	r2, #0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d105      	bne.n	80055a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <prvGetNextExpireTime+0x44>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e001      	b.n	80055a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055a4:	68fb      	ldr	r3, [r7, #12]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000898 	.word	0x20000898

080055b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055c0:	f7ff f8a4 	bl	800470c <xTaskGetTickCount>
 80055c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <prvSampleTimeNow+0x3c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d205      	bcs.n	80055dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055d0:	f000 f918 	bl	8005804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e002      	b.n	80055e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055e2:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <prvSampleTimeNow+0x3c>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055e8:	68fb      	ldr	r3, [r7, #12]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	200008a8 	.word	0x200008a8

080055f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d812      	bhi.n	8005644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e01b      	b.n	800566a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005632:	4b10      	ldr	r3, [pc, #64]	; (8005674 <prvInsertTimerInActiveList+0x7c>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7fd fdac 	bl	800319a <vListInsert>
 8005642:	e012      	b.n	800566a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d206      	bcs.n	800565a <prvInsertTimerInActiveList+0x62>
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d302      	bcc.n	800565a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e007      	b.n	800566a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <prvInsertTimerInActiveList+0x80>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f7fd fd98 	bl	800319a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800566a:	697b      	ldr	r3, [r7, #20]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	2000089c 	.word	0x2000089c
 8005678:	20000898 	.word	0x20000898

0800567c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08c      	sub	sp, #48	; 0x30
 8005680:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005682:	e0ac      	b.n	80057de <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f2c0 80a8 	blt.w	80057dc <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	3304      	adds	r3, #4
 800569c:	4618      	mov	r0, r3
 800569e:	f7fd fdb5 	bl	800320c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff87 	bl	80055b8 <prvSampleTimeNow>
 80056aa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b09      	cmp	r3, #9
 80056b0:	f200 8095 	bhi.w	80057de <prvProcessReceivedCommands+0x162>
 80056b4:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <prvProcessReceivedCommands+0x40>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	080056e5 	.word	0x080056e5
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056e5 	.word	0x080056e5
 80056c8:	08005757 	.word	0x08005757
 80056cc:	0800576b 	.word	0x0800576b
 80056d0:	080057b3 	.word	0x080057b3
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	080056e5 	.word	0x080056e5
 80056dc:	08005757 	.word	0x08005757
 80056e0:	0800576b 	.word	0x0800576b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	18d1      	adds	r1, r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a3a      	ldr	r2, [r7, #32]
 8005702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005704:	f7ff ff78 	bl	80055f8 <prvInsertTimerInActiveList>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d067      	beq.n	80057de <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005714:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d05c      	beq.n	80057de <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	441a      	add	r2, r3
 800572c:	2300      	movs	r3, #0
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	2300      	movs	r3, #0
 8005732:	2100      	movs	r1, #0
 8005734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005736:	f7ff fe23 	bl	8005380 <xTimerGenericCommand>
 800573a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d14d      	bne.n	80057de <prvProcessReceivedCommands+0x162>
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e7fe      	b.n	8005754 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	b2da      	uxtb	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005768:	e039      	b.n	80057de <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	b2da      	uxtb	r2, r3
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <prvProcessReceivedCommands+0x122>
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e7fe      	b.n	800579c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	18d1      	adds	r1, r2, r3
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ac:	f7ff ff24 	bl	80055f8 <prvInsertTimerInActiveList>
					break;
 80057b0:	e015      	b.n	80057de <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d103      	bne.n	80057c8 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80057c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057c2:	f000 fbc7 	bl	8005f54 <vPortFree>
 80057c6:	e00a      	b.n	80057de <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057da:	e000      	b.n	80057de <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <prvProcessReceivedCommands+0x184>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f107 0108 	add.w	r1, r7, #8
 80057e6:	2200      	movs	r2, #0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe f8d7 	bl	800399c <xQueueReceive>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f47f af47 	bne.w	8005684 <prvProcessReceivedCommands+0x8>
	}
}
 80057f6:	bf00      	nop
 80057f8:	3728      	adds	r7, #40	; 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	200008a0 	.word	0x200008a0

08005804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800580a:	e047      	b.n	800589c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800580c:	4b2d      	ldr	r3, [pc, #180]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3304      	adds	r3, #4
 8005824:	4618      	mov	r0, r3
 8005826:	f7fd fcf1 	bl	800320c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02d      	beq.n	800589c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	429a      	cmp	r2, r3
 8005850:	d90e      	bls.n	8005870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800585e:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3304      	adds	r3, #4
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f7fd fc96 	bl	800319a <vListInsert>
 800586e:	e015      	b.n	800589c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005870:	2300      	movs	r3, #0
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	2100      	movs	r1, #0
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff fd80 	bl	8005380 <xTimerGenericCommand>
 8005880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <prvSwitchTimerLists+0x98>
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	e7fe      	b.n	800589a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800589c:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1b2      	bne.n	800580c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <prvSwitchTimerLists+0xc4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <prvSwitchTimerLists+0xc0>)
 80058b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058b4:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <prvSwitchTimerLists+0xc4>)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6013      	str	r3, [r2, #0]
}
 80058ba:	bf00      	nop
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000898 	.word	0x20000898
 80058c8:	2000089c 	.word	0x2000089c

080058cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058d2:	f000 f963 	bl	8005b9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <prvCheckForValidListAndQueue+0x60>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d120      	bne.n	8005920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058de:	4814      	ldr	r0, [pc, #80]	; (8005930 <prvCheckForValidListAndQueue+0x64>)
 80058e0:	f7fd fc0a 	bl	80030f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058e4:	4813      	ldr	r0, [pc, #76]	; (8005934 <prvCheckForValidListAndQueue+0x68>)
 80058e6:	f7fd fc07 	bl	80030f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <prvCheckForValidListAndQueue+0x6c>)
 80058ec:	4a10      	ldr	r2, [pc, #64]	; (8005930 <prvCheckForValidListAndQueue+0x64>)
 80058ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058f0:	4b12      	ldr	r3, [pc, #72]	; (800593c <prvCheckForValidListAndQueue+0x70>)
 80058f2:	4a10      	ldr	r2, [pc, #64]	; (8005934 <prvCheckForValidListAndQueue+0x68>)
 80058f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058f6:	2300      	movs	r3, #0
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <prvCheckForValidListAndQueue+0x74>)
 80058fc:	4a11      	ldr	r2, [pc, #68]	; (8005944 <prvCheckForValidListAndQueue+0x78>)
 80058fe:	210c      	movs	r1, #12
 8005900:	200a      	movs	r0, #10
 8005902:	f7fd fd15 	bl	8003330 <xQueueGenericCreateStatic>
 8005906:	4602      	mov	r2, r0
 8005908:	4b08      	ldr	r3, [pc, #32]	; (800592c <prvCheckForValidListAndQueue+0x60>)
 800590a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <prvCheckForValidListAndQueue+0x60>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <prvCheckForValidListAndQueue+0x60>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	490b      	ldr	r1, [pc, #44]	; (8005948 <prvCheckForValidListAndQueue+0x7c>)
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fbc8 	bl	80040b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005920:	f000 f96a 	bl	8005bf8 <vPortExitCritical>
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	200008a0 	.word	0x200008a0
 8005930:	20000870 	.word	0x20000870
 8005934:	20000884 	.word	0x20000884
 8005938:	20000898 	.word	0x20000898
 800593c:	2000089c 	.word	0x2000089c
 8005940:	20000924 	.word	0x20000924
 8005944:	200008ac 	.word	0x200008ac
 8005948:	08007164 	.word	0x08007164

0800594c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3b04      	subs	r3, #4
 800595c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3b04      	subs	r3, #4
 800596a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0201 	bic.w	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b04      	subs	r3, #4
 800597a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800597c:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <pxPortInitialiseStack+0x64>)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3b14      	subs	r3, #20
 8005986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b04      	subs	r3, #4
 8005992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f06f 0202 	mvn.w	r2, #2
 800599a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3b20      	subs	r3, #32
 80059a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059a2:	68fb      	ldr	r3, [r7, #12]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	080059b5 	.word	0x080059b5

080059b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059be:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <prvTaskExitError+0x50>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d009      	beq.n	80059dc <prvTaskExitError+0x28>
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e7fe      	b.n	80059da <prvTaskExitError+0x26>
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059ee:	bf00      	nop
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0fc      	beq.n	80059f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000014 	.word	0x20000014
	...

08005a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a10:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <pxCurrentTCBConst2>)
 8005a12:	6819      	ldr	r1, [r3, #0]
 8005a14:	6808      	ldr	r0, [r1, #0]
 8005a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1a:	f380 8809 	msr	PSP, r0
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f04f 0000 	mov.w	r0, #0
 8005a26:	f380 8811 	msr	BASEPRI, r0
 8005a2a:	4770      	bx	lr
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst2>:
 8005a30:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a38:	4808      	ldr	r0, [pc, #32]	; (8005a5c <prvPortStartFirstTask+0x24>)
 8005a3a:	6800      	ldr	r0, [r0, #0]
 8005a3c:	6800      	ldr	r0, [r0, #0]
 8005a3e:	f380 8808 	msr	MSP, r0
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f380 8814 	msr	CONTROL, r0
 8005a4a:	b662      	cpsie	i
 8005a4c:	b661      	cpsie	f
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	df00      	svc	0
 8005a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a5a:	bf00      	nop
 8005a5c:	e000ed08 	.word	0xe000ed08

08005a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a66:	4b44      	ldr	r3, [pc, #272]	; (8005b78 <xPortStartScheduler+0x118>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a44      	ldr	r2, [pc, #272]	; (8005b7c <xPortStartScheduler+0x11c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d109      	bne.n	8005a84 <xPortStartScheduler+0x24>
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e7fe      	b.n	8005a82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a84:	4b3c      	ldr	r3, [pc, #240]	; (8005b78 <xPortStartScheduler+0x118>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a3d      	ldr	r2, [pc, #244]	; (8005b80 <xPortStartScheduler+0x120>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d109      	bne.n	8005aa2 <xPortStartScheduler+0x42>
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e7fe      	b.n	8005aa0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005aa2:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <xPortStartScheduler+0x124>)
 8005aa4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	4b30      	ldr	r3, [pc, #192]	; (8005b88 <xPortStartScheduler+0x128>)
 8005ac8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aca:	4b30      	ldr	r3, [pc, #192]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005acc:	2207      	movs	r2, #7
 8005ace:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ad0:	e009      	b.n	8005ae6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005ada:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d0ef      	beq.n	8005ad2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005af2:	4b26      	ldr	r3, [pc, #152]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1c3 0307 	rsb	r3, r3, #7
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d009      	beq.n	8005b12 <xPortStartScheduler+0xb2>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60bb      	str	r3, [r7, #8]
 8005b10:	e7fe      	b.n	8005b10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b12:	4b1e      	ldr	r3, [pc, #120]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005b1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <xPortStartScheduler+0x12c>)
 8005b26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b30:	4b17      	ldr	r3, [pc, #92]	; (8005b90 <xPortStartScheduler+0x130>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a16      	ldr	r2, [pc, #88]	; (8005b90 <xPortStartScheduler+0x130>)
 8005b36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b3c:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <xPortStartScheduler+0x130>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a13      	ldr	r2, [pc, #76]	; (8005b90 <xPortStartScheduler+0x130>)
 8005b42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b48:	f000 f8d6 	bl	8005cf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b4c:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <xPortStartScheduler+0x134>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b52:	f000 f8f5 	bl	8005d40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a0f      	ldr	r2, [pc, #60]	; (8005b98 <xPortStartScheduler+0x138>)
 8005b5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b62:	f7ff ff69 	bl	8005a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b66:	f7fe fe99 	bl	800489c <vTaskSwitchContext>
	prvTaskExitError();
 8005b6a:	f7ff ff23 	bl	80059b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	e000ed00 	.word	0xe000ed00
 8005b7c:	410fc271 	.word	0x410fc271
 8005b80:	410fc270 	.word	0x410fc270
 8005b84:	e000e400 	.word	0xe000e400
 8005b88:	2000096c 	.word	0x2000096c
 8005b8c:	20000970 	.word	0x20000970
 8005b90:	e000ed20 	.word	0xe000ed20
 8005b94:	20000014 	.word	0x20000014
 8005b98:	e000ef34 	.word	0xe000ef34

08005b9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <vPortEnterCritical+0x54>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <vPortEnterCritical+0x54>)
 8005bbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <vPortEnterCritical+0x54>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10e      	bne.n	8005be4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <vPortEnterCritical+0x58>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <vPortEnterCritical+0x48>
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	e7fe      	b.n	8005be2 <vPortEnterCritical+0x46>
	}
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000014 	.word	0x20000014
 8005bf4:	e000ed04 	.word	0xe000ed04

08005bf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <vPortExitCritical+0x4c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <vPortExitCritical+0x22>
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	607b      	str	r3, [r7, #4]
 8005c18:	e7fe      	b.n	8005c18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <vPortExitCritical+0x4c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a08      	ldr	r2, [pc, #32]	; (8005c44 <vPortExitCritical+0x4c>)
 8005c22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <vPortExitCritical+0x4c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d104      	bne.n	8005c36 <vPortExitCritical+0x3e>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000014 	.word	0x20000014
	...

08005c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c50:	f3ef 8009 	mrs	r0, PSP
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <pxCurrentTCBConst>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	f01e 0f10 	tst.w	lr, #16
 8005c60:	bf08      	it	eq
 8005c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6a:	6010      	str	r0, [r2, #0]
 8005c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c74:	f380 8811 	msr	BASEPRI, r0
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f7fe fe0c 	bl	800489c <vTaskSwitchContext>
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f380 8811 	msr	BASEPRI, r0
 8005c8c:	bc09      	pop	{r0, r3}
 8005c8e:	6819      	ldr	r1, [r3, #0]
 8005c90:	6808      	ldr	r0, [r1, #0]
 8005c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c96:	f01e 0f10 	tst.w	lr, #16
 8005c9a:	bf08      	it	eq
 8005c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ca0:	f380 8809 	msr	PSP, r0
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	f3af 8000 	nop.w

08005cb0 <pxCurrentTCBConst>:
 8005cb0:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cd0:	f7fe fd2c 	bl	800472c <xTaskIncrementTick>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cda:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <SysTick_Handler+0x3c>)
 8005cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <vPortSetupTimerInterrupt+0x34>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d02:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <vPortSetupTimerInterrupt+0x38>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <vPortSetupTimerInterrupt+0x3c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <vPortSetupTimerInterrupt+0x40>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	099b      	lsrs	r3, r3, #6
 8005d14:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <vPortSetupTimerInterrupt+0x44>)
 8005d16:	3b01      	subs	r3, #1
 8005d18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d1a:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <vPortSetupTimerInterrupt+0x34>)
 8005d1c:	2207      	movs	r2, #7
 8005d1e:	601a      	str	r2, [r3, #0]
}
 8005d20:	bf00      	nop
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	e000e010 	.word	0xe000e010
 8005d30:	e000e018 	.word	0xe000e018
 8005d34:	20000008 	.word	0x20000008
 8005d38:	10624dd3 	.word	0x10624dd3
 8005d3c:	e000e014 	.word	0xe000e014

08005d40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d50 <vPortEnableVFP+0x10>
 8005d44:	6801      	ldr	r1, [r0, #0]
 8005d46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d4a:	6001      	str	r1, [r0, #0]
 8005d4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d4e:	bf00      	nop
 8005d50:	e000ed88 	.word	0xe000ed88

08005d54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d5a:	f3ef 8305 	mrs	r3, IPSR
 8005d5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	d913      	bls.n	8005d8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d66:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <vPortValidateInterruptPriority+0x6c>)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <vPortValidateInterruptPriority+0x70>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	7afa      	ldrb	r2, [r7, #11]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d209      	bcs.n	8005d8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e7fe      	b.n	8005d8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <vPortValidateInterruptPriority+0x74>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d96:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <vPortValidateInterruptPriority+0x78>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d909      	bls.n	8005db2 <vPortValidateInterruptPriority+0x5e>
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	e7fe      	b.n	8005db0 <vPortValidateInterruptPriority+0x5c>
	}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e3f0 	.word	0xe000e3f0
 8005dc4:	2000096c 	.word	0x2000096c
 8005dc8:	e000ed0c 	.word	0xe000ed0c
 8005dcc:	20000970 	.word	0x20000970

08005dd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ddc:	f7fe fbec 	bl	80045b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005de0:	4b57      	ldr	r3, [pc, #348]	; (8005f40 <pvPortMalloc+0x170>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005de8:	f000 f90c 	bl	8006004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dec:	4b55      	ldr	r3, [pc, #340]	; (8005f44 <pvPortMalloc+0x174>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 808c 	bne.w	8005f12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01c      	beq.n	8005e3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005e00:	2208      	movs	r2, #8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d013      	beq.n	8005e3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f023 0307 	bic.w	r3, r3, #7
 8005e18:	3308      	adds	r3, #8
 8005e1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <pvPortMalloc+0x6a>
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e7fe      	b.n	8005e38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d068      	beq.n	8005f12 <pvPortMalloc+0x142>
 8005e40:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <pvPortMalloc+0x178>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d863      	bhi.n	8005f12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e4a:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <pvPortMalloc+0x17c>)
 8005e4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e4e:	4b3f      	ldr	r3, [pc, #252]	; (8005f4c <pvPortMalloc+0x17c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e54:	e004      	b.n	8005e60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d903      	bls.n	8005e72 <pvPortMalloc+0xa2>
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f1      	bne.n	8005e56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e72:	4b33      	ldr	r3, [pc, #204]	; (8005f40 <pvPortMalloc+0x170>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d04a      	beq.n	8005f12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2208      	movs	r2, #8
 8005e82:	4413      	add	r3, r2
 8005e84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1ad2      	subs	r2, r2, r3
 8005e96:	2308      	movs	r3, #8
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d91e      	bls.n	8005edc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <pvPortMalloc+0xf4>
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	e7fe      	b.n	8005ec2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	1ad2      	subs	r2, r2, r3
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ed6:	69b8      	ldr	r0, [r7, #24]
 8005ed8:	f000 f8f6 	bl	80060c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <pvPortMalloc+0x178>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <pvPortMalloc+0x178>)
 8005ee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eea:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <pvPortMalloc+0x178>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b18      	ldr	r3, [pc, #96]	; (8005f50 <pvPortMalloc+0x180>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d203      	bcs.n	8005efe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <pvPortMalloc+0x178>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <pvPortMalloc+0x180>)
 8005efc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <pvPortMalloc+0x174>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f12:	f7fe fb5f 	bl	80045d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <pvPortMalloc+0x164>
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e7fe      	b.n	8005f32 <pvPortMalloc+0x162>
	return pvReturn;
 8005f34:	69fb      	ldr	r3, [r7, #28]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3728      	adds	r7, #40	; 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000457c 	.word	0x2000457c
 8005f44:	20004588 	.word	0x20004588
 8005f48:	20004580 	.word	0x20004580
 8005f4c:	20004574 	.word	0x20004574
 8005f50:	20004584 	.word	0x20004584

08005f54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d046      	beq.n	8005ff4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f66:	2308      	movs	r3, #8
 8005f68:	425b      	negs	r3, r3
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <vPortFree+0xa8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <vPortFree+0x42>
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e7fe      	b.n	8005f94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <vPortFree+0x5e>
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	60bb      	str	r3, [r7, #8]
 8005fb0:	e7fe      	b.n	8005fb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <vPortFree+0xa8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d019      	beq.n	8005ff4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d115      	bne.n	8005ff4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <vPortFree+0xa8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fd8:	f7fe faee 	bl	80045b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <vPortFree+0xac>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	4a06      	ldr	r2, [pc, #24]	; (8006000 <vPortFree+0xac>)
 8005fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fea:	6938      	ldr	r0, [r7, #16]
 8005fec:	f000 f86c 	bl	80060c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ff0:	f7fe faf0 	bl	80045d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ff4:	bf00      	nop
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20004588 	.word	0x20004588
 8006000:	20004580 	.word	0x20004580

08006004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800600a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800600e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <prvHeapInit+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3307      	adds	r3, #7
 8006022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <prvHeapInit+0xac>)
 8006034:	4413      	add	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800603c:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <prvHeapInit+0xb0>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006042:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <prvHeapInit+0xb0>)
 8006044:	2200      	movs	r2, #0
 8006046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006050:	2208      	movs	r2, #8
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <prvHeapInit+0xb4>)
 8006064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <prvHeapInit+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800606e:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <prvHeapInit+0xb4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006084:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvHeapInit+0xb4>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <prvHeapInit+0xb8>)
 8006092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <prvHeapInit+0xbc>)
 800609a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <prvHeapInit+0xc0>)
 800609e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000974 	.word	0x20000974
 80060b4:	20004574 	.word	0x20004574
 80060b8:	2000457c 	.word	0x2000457c
 80060bc:	20004584 	.word	0x20004584
 80060c0:	20004580 	.word	0x20004580
 80060c4:	20004588 	.word	0x20004588

080060c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <prvInsertBlockIntoFreeList+0xac>)
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e002      	b.n	80060dc <prvInsertBlockIntoFreeList+0x14>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d8f7      	bhi.n	80060d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	4413      	add	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d108      	bne.n	800610a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	441a      	add	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d118      	bne.n	8006150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b15      	ldr	r3, [pc, #84]	; (8006178 <prvInsertBlockIntoFreeList+0xb0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d00d      	beq.n	8006146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e008      	b.n	8006158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006146:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <prvInsertBlockIntoFreeList+0xb0>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e003      	b.n	8006158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d002      	beq.n	8006166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20004574 	.word	0x20004574
 8006178:	2000457c 	.word	0x2000457c

0800617c <__errno>:
 800617c:	4b01      	ldr	r3, [pc, #4]	; (8006184 <__errno+0x8>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20000018 	.word	0x20000018

08006188 <__libc_init_array>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	4e0d      	ldr	r6, [pc, #52]	; (80061c0 <__libc_init_array+0x38>)
 800618c:	4c0d      	ldr	r4, [pc, #52]	; (80061c4 <__libc_init_array+0x3c>)
 800618e:	1ba4      	subs	r4, r4, r6
 8006190:	10a4      	asrs	r4, r4, #2
 8006192:	2500      	movs	r5, #0
 8006194:	42a5      	cmp	r5, r4
 8006196:	d109      	bne.n	80061ac <__libc_init_array+0x24>
 8006198:	4e0b      	ldr	r6, [pc, #44]	; (80061c8 <__libc_init_array+0x40>)
 800619a:	4c0c      	ldr	r4, [pc, #48]	; (80061cc <__libc_init_array+0x44>)
 800619c:	f000 ff10 	bl	8006fc0 <_init>
 80061a0:	1ba4      	subs	r4, r4, r6
 80061a2:	10a4      	asrs	r4, r4, #2
 80061a4:	2500      	movs	r5, #0
 80061a6:	42a5      	cmp	r5, r4
 80061a8:	d105      	bne.n	80061b6 <__libc_init_array+0x2e>
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061b0:	4798      	blx	r3
 80061b2:	3501      	adds	r5, #1
 80061b4:	e7ee      	b.n	8006194 <__libc_init_array+0xc>
 80061b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061ba:	4798      	blx	r3
 80061bc:	3501      	adds	r5, #1
 80061be:	e7f2      	b.n	80061a6 <__libc_init_array+0x1e>
 80061c0:	08007224 	.word	0x08007224
 80061c4:	08007224 	.word	0x08007224
 80061c8:	08007224 	.word	0x08007224
 80061cc:	08007228 	.word	0x08007228

080061d0 <memcpy>:
 80061d0:	b510      	push	{r4, lr}
 80061d2:	1e43      	subs	r3, r0, #1
 80061d4:	440a      	add	r2, r1
 80061d6:	4291      	cmp	r1, r2
 80061d8:	d100      	bne.n	80061dc <memcpy+0xc>
 80061da:	bd10      	pop	{r4, pc}
 80061dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061e4:	e7f7      	b.n	80061d6 <memcpy+0x6>

080061e6 <memset>:
 80061e6:	4402      	add	r2, r0
 80061e8:	4603      	mov	r3, r0
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d100      	bne.n	80061f0 <memset+0xa>
 80061ee:	4770      	bx	lr
 80061f0:	f803 1b01 	strb.w	r1, [r3], #1
 80061f4:	e7f9      	b.n	80061ea <memset+0x4>
	...

080061f8 <iprintf>:
 80061f8:	b40f      	push	{r0, r1, r2, r3}
 80061fa:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <iprintf+0x2c>)
 80061fc:	b513      	push	{r0, r1, r4, lr}
 80061fe:	681c      	ldr	r4, [r3, #0]
 8006200:	b124      	cbz	r4, 800620c <iprintf+0x14>
 8006202:	69a3      	ldr	r3, [r4, #24]
 8006204:	b913      	cbnz	r3, 800620c <iprintf+0x14>
 8006206:	4620      	mov	r0, r4
 8006208:	f000 f84e 	bl	80062a8 <__sinit>
 800620c:	ab05      	add	r3, sp, #20
 800620e:	9a04      	ldr	r2, [sp, #16]
 8006210:	68a1      	ldr	r1, [r4, #8]
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	4620      	mov	r0, r4
 8006216:	f000 f955 	bl	80064c4 <_vfiprintf_r>
 800621a:	b002      	add	sp, #8
 800621c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006220:	b004      	add	sp, #16
 8006222:	4770      	bx	lr
 8006224:	20000018 	.word	0x20000018

08006228 <std>:
 8006228:	2300      	movs	r3, #0
 800622a:	b510      	push	{r4, lr}
 800622c:	4604      	mov	r4, r0
 800622e:	e9c0 3300 	strd	r3, r3, [r0]
 8006232:	6083      	str	r3, [r0, #8]
 8006234:	8181      	strh	r1, [r0, #12]
 8006236:	6643      	str	r3, [r0, #100]	; 0x64
 8006238:	81c2      	strh	r2, [r0, #14]
 800623a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800623e:	6183      	str	r3, [r0, #24]
 8006240:	4619      	mov	r1, r3
 8006242:	2208      	movs	r2, #8
 8006244:	305c      	adds	r0, #92	; 0x5c
 8006246:	f7ff ffce 	bl	80061e6 <memset>
 800624a:	4b05      	ldr	r3, [pc, #20]	; (8006260 <std+0x38>)
 800624c:	6263      	str	r3, [r4, #36]	; 0x24
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <std+0x3c>)
 8006250:	62a3      	str	r3, [r4, #40]	; 0x28
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <std+0x40>)
 8006254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <std+0x44>)
 8006258:	6224      	str	r4, [r4, #32]
 800625a:	6323      	str	r3, [r4, #48]	; 0x30
 800625c:	bd10      	pop	{r4, pc}
 800625e:	bf00      	nop
 8006260:	08006a21 	.word	0x08006a21
 8006264:	08006a43 	.word	0x08006a43
 8006268:	08006a7b 	.word	0x08006a7b
 800626c:	08006a9f 	.word	0x08006a9f

08006270 <_cleanup_r>:
 8006270:	4901      	ldr	r1, [pc, #4]	; (8006278 <_cleanup_r+0x8>)
 8006272:	f000 b885 	b.w	8006380 <_fwalk_reent>
 8006276:	bf00      	nop
 8006278:	08006d79 	.word	0x08006d79

0800627c <__sfmoreglue>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	1e4a      	subs	r2, r1, #1
 8006280:	2568      	movs	r5, #104	; 0x68
 8006282:	4355      	muls	r5, r2
 8006284:	460e      	mov	r6, r1
 8006286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800628a:	f000 f897 	bl	80063bc <_malloc_r>
 800628e:	4604      	mov	r4, r0
 8006290:	b140      	cbz	r0, 80062a4 <__sfmoreglue+0x28>
 8006292:	2100      	movs	r1, #0
 8006294:	e9c0 1600 	strd	r1, r6, [r0]
 8006298:	300c      	adds	r0, #12
 800629a:	60a0      	str	r0, [r4, #8]
 800629c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062a0:	f7ff ffa1 	bl	80061e6 <memset>
 80062a4:	4620      	mov	r0, r4
 80062a6:	bd70      	pop	{r4, r5, r6, pc}

080062a8 <__sinit>:
 80062a8:	6983      	ldr	r3, [r0, #24]
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	bb33      	cbnz	r3, 80062fe <__sinit+0x56>
 80062b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80062b4:	6503      	str	r3, [r0, #80]	; 0x50
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <__sinit+0x58>)
 80062b8:	4a12      	ldr	r2, [pc, #72]	; (8006304 <__sinit+0x5c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6282      	str	r2, [r0, #40]	; 0x28
 80062be:	4298      	cmp	r0, r3
 80062c0:	bf04      	itt	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	6183      	streq	r3, [r0, #24]
 80062c6:	f000 f81f 	bl	8006308 <__sfp>
 80062ca:	6060      	str	r0, [r4, #4]
 80062cc:	4620      	mov	r0, r4
 80062ce:	f000 f81b 	bl	8006308 <__sfp>
 80062d2:	60a0      	str	r0, [r4, #8]
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 f817 	bl	8006308 <__sfp>
 80062da:	2200      	movs	r2, #0
 80062dc:	60e0      	str	r0, [r4, #12]
 80062de:	2104      	movs	r1, #4
 80062e0:	6860      	ldr	r0, [r4, #4]
 80062e2:	f7ff ffa1 	bl	8006228 <std>
 80062e6:	2201      	movs	r2, #1
 80062e8:	2109      	movs	r1, #9
 80062ea:	68a0      	ldr	r0, [r4, #8]
 80062ec:	f7ff ff9c 	bl	8006228 <std>
 80062f0:	2202      	movs	r2, #2
 80062f2:	2112      	movs	r1, #18
 80062f4:	68e0      	ldr	r0, [r4, #12]
 80062f6:	f7ff ff97 	bl	8006228 <std>
 80062fa:	2301      	movs	r3, #1
 80062fc:	61a3      	str	r3, [r4, #24]
 80062fe:	bd10      	pop	{r4, pc}
 8006300:	08007184 	.word	0x08007184
 8006304:	08006271 	.word	0x08006271

08006308 <__sfp>:
 8006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630a:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <__sfp+0x70>)
 800630c:	681e      	ldr	r6, [r3, #0]
 800630e:	69b3      	ldr	r3, [r6, #24]
 8006310:	4607      	mov	r7, r0
 8006312:	b913      	cbnz	r3, 800631a <__sfp+0x12>
 8006314:	4630      	mov	r0, r6
 8006316:	f7ff ffc7 	bl	80062a8 <__sinit>
 800631a:	3648      	adds	r6, #72	; 0x48
 800631c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006320:	3b01      	subs	r3, #1
 8006322:	d503      	bpl.n	800632c <__sfp+0x24>
 8006324:	6833      	ldr	r3, [r6, #0]
 8006326:	b133      	cbz	r3, 8006336 <__sfp+0x2e>
 8006328:	6836      	ldr	r6, [r6, #0]
 800632a:	e7f7      	b.n	800631c <__sfp+0x14>
 800632c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006330:	b16d      	cbz	r5, 800634e <__sfp+0x46>
 8006332:	3468      	adds	r4, #104	; 0x68
 8006334:	e7f4      	b.n	8006320 <__sfp+0x18>
 8006336:	2104      	movs	r1, #4
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff ff9f 	bl	800627c <__sfmoreglue>
 800633e:	6030      	str	r0, [r6, #0]
 8006340:	2800      	cmp	r0, #0
 8006342:	d1f1      	bne.n	8006328 <__sfp+0x20>
 8006344:	230c      	movs	r3, #12
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4604      	mov	r4, r0
 800634a:	4620      	mov	r0, r4
 800634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <__sfp+0x74>)
 8006350:	6665      	str	r5, [r4, #100]	; 0x64
 8006352:	e9c4 5500 	strd	r5, r5, [r4]
 8006356:	60a5      	str	r5, [r4, #8]
 8006358:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800635c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006360:	2208      	movs	r2, #8
 8006362:	4629      	mov	r1, r5
 8006364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006368:	f7ff ff3d 	bl	80061e6 <memset>
 800636c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006374:	e7e9      	b.n	800634a <__sfp+0x42>
 8006376:	bf00      	nop
 8006378:	08007184 	.word	0x08007184
 800637c:	ffff0001 	.word	0xffff0001

08006380 <_fwalk_reent>:
 8006380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006384:	4680      	mov	r8, r0
 8006386:	4689      	mov	r9, r1
 8006388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800638c:	2600      	movs	r6, #0
 800638e:	b914      	cbnz	r4, 8006396 <_fwalk_reent+0x16>
 8006390:	4630      	mov	r0, r6
 8006392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006396:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800639a:	3f01      	subs	r7, #1
 800639c:	d501      	bpl.n	80063a2 <_fwalk_reent+0x22>
 800639e:	6824      	ldr	r4, [r4, #0]
 80063a0:	e7f5      	b.n	800638e <_fwalk_reent+0xe>
 80063a2:	89ab      	ldrh	r3, [r5, #12]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d907      	bls.n	80063b8 <_fwalk_reent+0x38>
 80063a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063ac:	3301      	adds	r3, #1
 80063ae:	d003      	beq.n	80063b8 <_fwalk_reent+0x38>
 80063b0:	4629      	mov	r1, r5
 80063b2:	4640      	mov	r0, r8
 80063b4:	47c8      	blx	r9
 80063b6:	4306      	orrs	r6, r0
 80063b8:	3568      	adds	r5, #104	; 0x68
 80063ba:	e7ee      	b.n	800639a <_fwalk_reent+0x1a>

080063bc <_malloc_r>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	1ccd      	adds	r5, r1, #3
 80063c0:	f025 0503 	bic.w	r5, r5, #3
 80063c4:	3508      	adds	r5, #8
 80063c6:	2d0c      	cmp	r5, #12
 80063c8:	bf38      	it	cc
 80063ca:	250c      	movcc	r5, #12
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	4606      	mov	r6, r0
 80063d0:	db01      	blt.n	80063d6 <_malloc_r+0x1a>
 80063d2:	42a9      	cmp	r1, r5
 80063d4:	d903      	bls.n	80063de <_malloc_r+0x22>
 80063d6:	230c      	movs	r3, #12
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	2000      	movs	r0, #0
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	f000 fd6b 	bl	8006eb8 <__malloc_lock>
 80063e2:	4a21      	ldr	r2, [pc, #132]	; (8006468 <_malloc_r+0xac>)
 80063e4:	6814      	ldr	r4, [r2, #0]
 80063e6:	4621      	mov	r1, r4
 80063e8:	b991      	cbnz	r1, 8006410 <_malloc_r+0x54>
 80063ea:	4c20      	ldr	r4, [pc, #128]	; (800646c <_malloc_r+0xb0>)
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	b91b      	cbnz	r3, 80063f8 <_malloc_r+0x3c>
 80063f0:	4630      	mov	r0, r6
 80063f2:	f000 fb05 	bl	8006a00 <_sbrk_r>
 80063f6:	6020      	str	r0, [r4, #0]
 80063f8:	4629      	mov	r1, r5
 80063fa:	4630      	mov	r0, r6
 80063fc:	f000 fb00 	bl	8006a00 <_sbrk_r>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d124      	bne.n	800644e <_malloc_r+0x92>
 8006404:	230c      	movs	r3, #12
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	4630      	mov	r0, r6
 800640a:	f000 fd56 	bl	8006eba <__malloc_unlock>
 800640e:	e7e4      	b.n	80063da <_malloc_r+0x1e>
 8006410:	680b      	ldr	r3, [r1, #0]
 8006412:	1b5b      	subs	r3, r3, r5
 8006414:	d418      	bmi.n	8006448 <_malloc_r+0x8c>
 8006416:	2b0b      	cmp	r3, #11
 8006418:	d90f      	bls.n	800643a <_malloc_r+0x7e>
 800641a:	600b      	str	r3, [r1, #0]
 800641c:	50cd      	str	r5, [r1, r3]
 800641e:	18cc      	adds	r4, r1, r3
 8006420:	4630      	mov	r0, r6
 8006422:	f000 fd4a 	bl	8006eba <__malloc_unlock>
 8006426:	f104 000b 	add.w	r0, r4, #11
 800642a:	1d23      	adds	r3, r4, #4
 800642c:	f020 0007 	bic.w	r0, r0, #7
 8006430:	1ac3      	subs	r3, r0, r3
 8006432:	d0d3      	beq.n	80063dc <_malloc_r+0x20>
 8006434:	425a      	negs	r2, r3
 8006436:	50e2      	str	r2, [r4, r3]
 8006438:	e7d0      	b.n	80063dc <_malloc_r+0x20>
 800643a:	428c      	cmp	r4, r1
 800643c:	684b      	ldr	r3, [r1, #4]
 800643e:	bf16      	itet	ne
 8006440:	6063      	strne	r3, [r4, #4]
 8006442:	6013      	streq	r3, [r2, #0]
 8006444:	460c      	movne	r4, r1
 8006446:	e7eb      	b.n	8006420 <_malloc_r+0x64>
 8006448:	460c      	mov	r4, r1
 800644a:	6849      	ldr	r1, [r1, #4]
 800644c:	e7cc      	b.n	80063e8 <_malloc_r+0x2c>
 800644e:	1cc4      	adds	r4, r0, #3
 8006450:	f024 0403 	bic.w	r4, r4, #3
 8006454:	42a0      	cmp	r0, r4
 8006456:	d005      	beq.n	8006464 <_malloc_r+0xa8>
 8006458:	1a21      	subs	r1, r4, r0
 800645a:	4630      	mov	r0, r6
 800645c:	f000 fad0 	bl	8006a00 <_sbrk_r>
 8006460:	3001      	adds	r0, #1
 8006462:	d0cf      	beq.n	8006404 <_malloc_r+0x48>
 8006464:	6025      	str	r5, [r4, #0]
 8006466:	e7db      	b.n	8006420 <_malloc_r+0x64>
 8006468:	2000458c 	.word	0x2000458c
 800646c:	20004590 	.word	0x20004590

08006470 <__sfputc_r>:
 8006470:	6893      	ldr	r3, [r2, #8]
 8006472:	3b01      	subs	r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	b410      	push	{r4}
 8006478:	6093      	str	r3, [r2, #8]
 800647a:	da08      	bge.n	800648e <__sfputc_r+0x1e>
 800647c:	6994      	ldr	r4, [r2, #24]
 800647e:	42a3      	cmp	r3, r4
 8006480:	db01      	blt.n	8006486 <__sfputc_r+0x16>
 8006482:	290a      	cmp	r1, #10
 8006484:	d103      	bne.n	800648e <__sfputc_r+0x1e>
 8006486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800648a:	f000 bb0d 	b.w	8006aa8 <__swbuf_r>
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	1c58      	adds	r0, r3, #1
 8006492:	6010      	str	r0, [r2, #0]
 8006494:	7019      	strb	r1, [r3, #0]
 8006496:	4608      	mov	r0, r1
 8006498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800649c:	4770      	bx	lr

0800649e <__sfputs_r>:
 800649e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a0:	4606      	mov	r6, r0
 80064a2:	460f      	mov	r7, r1
 80064a4:	4614      	mov	r4, r2
 80064a6:	18d5      	adds	r5, r2, r3
 80064a8:	42ac      	cmp	r4, r5
 80064aa:	d101      	bne.n	80064b0 <__sfputs_r+0x12>
 80064ac:	2000      	movs	r0, #0
 80064ae:	e007      	b.n	80064c0 <__sfputs_r+0x22>
 80064b0:	463a      	mov	r2, r7
 80064b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7ff ffda 	bl	8006470 <__sfputc_r>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d1f3      	bne.n	80064a8 <__sfputs_r+0xa>
 80064c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064c4 <_vfiprintf_r>:
 80064c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c8:	460c      	mov	r4, r1
 80064ca:	b09d      	sub	sp, #116	; 0x74
 80064cc:	4617      	mov	r7, r2
 80064ce:	461d      	mov	r5, r3
 80064d0:	4606      	mov	r6, r0
 80064d2:	b118      	cbz	r0, 80064dc <_vfiprintf_r+0x18>
 80064d4:	6983      	ldr	r3, [r0, #24]
 80064d6:	b90b      	cbnz	r3, 80064dc <_vfiprintf_r+0x18>
 80064d8:	f7ff fee6 	bl	80062a8 <__sinit>
 80064dc:	4b7c      	ldr	r3, [pc, #496]	; (80066d0 <_vfiprintf_r+0x20c>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	d158      	bne.n	8006594 <_vfiprintf_r+0xd0>
 80064e2:	6874      	ldr	r4, [r6, #4]
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	0718      	lsls	r0, r3, #28
 80064e8:	d55e      	bpl.n	80065a8 <_vfiprintf_r+0xe4>
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d05b      	beq.n	80065a8 <_vfiprintf_r+0xe4>
 80064f0:	2300      	movs	r3, #0
 80064f2:	9309      	str	r3, [sp, #36]	; 0x24
 80064f4:	2320      	movs	r3, #32
 80064f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064fa:	2330      	movs	r3, #48	; 0x30
 80064fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006500:	9503      	str	r5, [sp, #12]
 8006502:	f04f 0b01 	mov.w	fp, #1
 8006506:	46b8      	mov	r8, r7
 8006508:	4645      	mov	r5, r8
 800650a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800650e:	b10b      	cbz	r3, 8006514 <_vfiprintf_r+0x50>
 8006510:	2b25      	cmp	r3, #37	; 0x25
 8006512:	d154      	bne.n	80065be <_vfiprintf_r+0xfa>
 8006514:	ebb8 0a07 	subs.w	sl, r8, r7
 8006518:	d00b      	beq.n	8006532 <_vfiprintf_r+0x6e>
 800651a:	4653      	mov	r3, sl
 800651c:	463a      	mov	r2, r7
 800651e:	4621      	mov	r1, r4
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff ffbc 	bl	800649e <__sfputs_r>
 8006526:	3001      	adds	r0, #1
 8006528:	f000 80c2 	beq.w	80066b0 <_vfiprintf_r+0x1ec>
 800652c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652e:	4453      	add	r3, sl
 8006530:	9309      	str	r3, [sp, #36]	; 0x24
 8006532:	f898 3000 	ldrb.w	r3, [r8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80ba 	beq.w	80066b0 <_vfiprintf_r+0x1ec>
 800653c:	2300      	movs	r3, #0
 800653e:	f04f 32ff 	mov.w	r2, #4294967295
 8006542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	9307      	str	r3, [sp, #28]
 800654a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800654e:	931a      	str	r3, [sp, #104]	; 0x68
 8006550:	46a8      	mov	r8, r5
 8006552:	2205      	movs	r2, #5
 8006554:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006558:	485e      	ldr	r0, [pc, #376]	; (80066d4 <_vfiprintf_r+0x210>)
 800655a:	f7f9 fe59 	bl	8000210 <memchr>
 800655e:	9b04      	ldr	r3, [sp, #16]
 8006560:	bb78      	cbnz	r0, 80065c2 <_vfiprintf_r+0xfe>
 8006562:	06d9      	lsls	r1, r3, #27
 8006564:	bf44      	itt	mi
 8006566:	2220      	movmi	r2, #32
 8006568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800656c:	071a      	lsls	r2, r3, #28
 800656e:	bf44      	itt	mi
 8006570:	222b      	movmi	r2, #43	; 0x2b
 8006572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006576:	782a      	ldrb	r2, [r5, #0]
 8006578:	2a2a      	cmp	r2, #42	; 0x2a
 800657a:	d02a      	beq.n	80065d2 <_vfiprintf_r+0x10e>
 800657c:	9a07      	ldr	r2, [sp, #28]
 800657e:	46a8      	mov	r8, r5
 8006580:	2000      	movs	r0, #0
 8006582:	250a      	movs	r5, #10
 8006584:	4641      	mov	r1, r8
 8006586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800658a:	3b30      	subs	r3, #48	; 0x30
 800658c:	2b09      	cmp	r3, #9
 800658e:	d969      	bls.n	8006664 <_vfiprintf_r+0x1a0>
 8006590:	b360      	cbz	r0, 80065ec <_vfiprintf_r+0x128>
 8006592:	e024      	b.n	80065de <_vfiprintf_r+0x11a>
 8006594:	4b50      	ldr	r3, [pc, #320]	; (80066d8 <_vfiprintf_r+0x214>)
 8006596:	429c      	cmp	r4, r3
 8006598:	d101      	bne.n	800659e <_vfiprintf_r+0xda>
 800659a:	68b4      	ldr	r4, [r6, #8]
 800659c:	e7a2      	b.n	80064e4 <_vfiprintf_r+0x20>
 800659e:	4b4f      	ldr	r3, [pc, #316]	; (80066dc <_vfiprintf_r+0x218>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	bf08      	it	eq
 80065a4:	68f4      	ldreq	r4, [r6, #12]
 80065a6:	e79d      	b.n	80064e4 <_vfiprintf_r+0x20>
 80065a8:	4621      	mov	r1, r4
 80065aa:	4630      	mov	r0, r6
 80065ac:	f000 fae0 	bl	8006b70 <__swsetup_r>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d09d      	beq.n	80064f0 <_vfiprintf_r+0x2c>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b01d      	add	sp, #116	; 0x74
 80065ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065be:	46a8      	mov	r8, r5
 80065c0:	e7a2      	b.n	8006508 <_vfiprintf_r+0x44>
 80065c2:	4a44      	ldr	r2, [pc, #272]	; (80066d4 <_vfiprintf_r+0x210>)
 80065c4:	1a80      	subs	r0, r0, r2
 80065c6:	fa0b f000 	lsl.w	r0, fp, r0
 80065ca:	4318      	orrs	r0, r3
 80065cc:	9004      	str	r0, [sp, #16]
 80065ce:	4645      	mov	r5, r8
 80065d0:	e7be      	b.n	8006550 <_vfiprintf_r+0x8c>
 80065d2:	9a03      	ldr	r2, [sp, #12]
 80065d4:	1d11      	adds	r1, r2, #4
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	9103      	str	r1, [sp, #12]
 80065da:	2a00      	cmp	r2, #0
 80065dc:	db01      	blt.n	80065e2 <_vfiprintf_r+0x11e>
 80065de:	9207      	str	r2, [sp, #28]
 80065e0:	e004      	b.n	80065ec <_vfiprintf_r+0x128>
 80065e2:	4252      	negs	r2, r2
 80065e4:	f043 0302 	orr.w	r3, r3, #2
 80065e8:	9207      	str	r2, [sp, #28]
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	f898 3000 	ldrb.w	r3, [r8]
 80065f0:	2b2e      	cmp	r3, #46	; 0x2e
 80065f2:	d10e      	bne.n	8006612 <_vfiprintf_r+0x14e>
 80065f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80065f8:	2b2a      	cmp	r3, #42	; 0x2a
 80065fa:	d138      	bne.n	800666e <_vfiprintf_r+0x1aa>
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	1d1a      	adds	r2, r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	9203      	str	r2, [sp, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	bfb8      	it	lt
 8006608:	f04f 33ff 	movlt.w	r3, #4294967295
 800660c:	f108 0802 	add.w	r8, r8, #2
 8006610:	9305      	str	r3, [sp, #20]
 8006612:	4d33      	ldr	r5, [pc, #204]	; (80066e0 <_vfiprintf_r+0x21c>)
 8006614:	f898 1000 	ldrb.w	r1, [r8]
 8006618:	2203      	movs	r2, #3
 800661a:	4628      	mov	r0, r5
 800661c:	f7f9 fdf8 	bl	8000210 <memchr>
 8006620:	b140      	cbz	r0, 8006634 <_vfiprintf_r+0x170>
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	1b40      	subs	r0, r0, r5
 8006626:	fa03 f000 	lsl.w	r0, r3, r0
 800662a:	9b04      	ldr	r3, [sp, #16]
 800662c:	4303      	orrs	r3, r0
 800662e:	f108 0801 	add.w	r8, r8, #1
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	f898 1000 	ldrb.w	r1, [r8]
 8006638:	482a      	ldr	r0, [pc, #168]	; (80066e4 <_vfiprintf_r+0x220>)
 800663a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800663e:	2206      	movs	r2, #6
 8006640:	f108 0701 	add.w	r7, r8, #1
 8006644:	f7f9 fde4 	bl	8000210 <memchr>
 8006648:	2800      	cmp	r0, #0
 800664a:	d037      	beq.n	80066bc <_vfiprintf_r+0x1f8>
 800664c:	4b26      	ldr	r3, [pc, #152]	; (80066e8 <_vfiprintf_r+0x224>)
 800664e:	bb1b      	cbnz	r3, 8006698 <_vfiprintf_r+0x1d4>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	3307      	adds	r3, #7
 8006654:	f023 0307 	bic.w	r3, r3, #7
 8006658:	3308      	adds	r3, #8
 800665a:	9303      	str	r3, [sp, #12]
 800665c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665e:	444b      	add	r3, r9
 8006660:	9309      	str	r3, [sp, #36]	; 0x24
 8006662:	e750      	b.n	8006506 <_vfiprintf_r+0x42>
 8006664:	fb05 3202 	mla	r2, r5, r2, r3
 8006668:	2001      	movs	r0, #1
 800666a:	4688      	mov	r8, r1
 800666c:	e78a      	b.n	8006584 <_vfiprintf_r+0xc0>
 800666e:	2300      	movs	r3, #0
 8006670:	f108 0801 	add.w	r8, r8, #1
 8006674:	9305      	str	r3, [sp, #20]
 8006676:	4619      	mov	r1, r3
 8006678:	250a      	movs	r5, #10
 800667a:	4640      	mov	r0, r8
 800667c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006680:	3a30      	subs	r2, #48	; 0x30
 8006682:	2a09      	cmp	r2, #9
 8006684:	d903      	bls.n	800668e <_vfiprintf_r+0x1ca>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0c3      	beq.n	8006612 <_vfiprintf_r+0x14e>
 800668a:	9105      	str	r1, [sp, #20]
 800668c:	e7c1      	b.n	8006612 <_vfiprintf_r+0x14e>
 800668e:	fb05 2101 	mla	r1, r5, r1, r2
 8006692:	2301      	movs	r3, #1
 8006694:	4680      	mov	r8, r0
 8006696:	e7f0      	b.n	800667a <_vfiprintf_r+0x1b6>
 8006698:	ab03      	add	r3, sp, #12
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	4622      	mov	r2, r4
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <_vfiprintf_r+0x228>)
 80066a0:	a904      	add	r1, sp, #16
 80066a2:	4630      	mov	r0, r6
 80066a4:	f3af 8000 	nop.w
 80066a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066ac:	4681      	mov	r9, r0
 80066ae:	d1d5      	bne.n	800665c <_vfiprintf_r+0x198>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	065b      	lsls	r3, r3, #25
 80066b4:	f53f af7e 	bmi.w	80065b4 <_vfiprintf_r+0xf0>
 80066b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ba:	e77d      	b.n	80065b8 <_vfiprintf_r+0xf4>
 80066bc:	ab03      	add	r3, sp, #12
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4622      	mov	r2, r4
 80066c2:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <_vfiprintf_r+0x228>)
 80066c4:	a904      	add	r1, sp, #16
 80066c6:	4630      	mov	r0, r6
 80066c8:	f000 f888 	bl	80067dc <_printf_i>
 80066cc:	e7ec      	b.n	80066a8 <_vfiprintf_r+0x1e4>
 80066ce:	bf00      	nop
 80066d0:	080071a8 	.word	0x080071a8
 80066d4:	080071e8 	.word	0x080071e8
 80066d8:	080071c8 	.word	0x080071c8
 80066dc:	08007188 	.word	0x08007188
 80066e0:	080071ee 	.word	0x080071ee
 80066e4:	080071f2 	.word	0x080071f2
 80066e8:	00000000 	.word	0x00000000
 80066ec:	0800649f 	.word	0x0800649f

080066f0 <_printf_common>:
 80066f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	4691      	mov	r9, r2
 80066f6:	461f      	mov	r7, r3
 80066f8:	688a      	ldr	r2, [r1, #8]
 80066fa:	690b      	ldr	r3, [r1, #16]
 80066fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006700:	4293      	cmp	r3, r2
 8006702:	bfb8      	it	lt
 8006704:	4613      	movlt	r3, r2
 8006706:	f8c9 3000 	str.w	r3, [r9]
 800670a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800670e:	4606      	mov	r6, r0
 8006710:	460c      	mov	r4, r1
 8006712:	b112      	cbz	r2, 800671a <_printf_common+0x2a>
 8006714:	3301      	adds	r3, #1
 8006716:	f8c9 3000 	str.w	r3, [r9]
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	0699      	lsls	r1, r3, #26
 800671e:	bf42      	ittt	mi
 8006720:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006724:	3302      	addmi	r3, #2
 8006726:	f8c9 3000 	strmi.w	r3, [r9]
 800672a:	6825      	ldr	r5, [r4, #0]
 800672c:	f015 0506 	ands.w	r5, r5, #6
 8006730:	d107      	bne.n	8006742 <_printf_common+0x52>
 8006732:	f104 0a19 	add.w	sl, r4, #25
 8006736:	68e3      	ldr	r3, [r4, #12]
 8006738:	f8d9 2000 	ldr.w	r2, [r9]
 800673c:	1a9b      	subs	r3, r3, r2
 800673e:	42ab      	cmp	r3, r5
 8006740:	dc28      	bgt.n	8006794 <_printf_common+0xa4>
 8006742:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006746:	6822      	ldr	r2, [r4, #0]
 8006748:	3300      	adds	r3, #0
 800674a:	bf18      	it	ne
 800674c:	2301      	movne	r3, #1
 800674e:	0692      	lsls	r2, r2, #26
 8006750:	d42d      	bmi.n	80067ae <_printf_common+0xbe>
 8006752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006756:	4639      	mov	r1, r7
 8006758:	4630      	mov	r0, r6
 800675a:	47c0      	blx	r8
 800675c:	3001      	adds	r0, #1
 800675e:	d020      	beq.n	80067a2 <_printf_common+0xb2>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	68e5      	ldr	r5, [r4, #12]
 8006764:	f8d9 2000 	ldr.w	r2, [r9]
 8006768:	f003 0306 	and.w	r3, r3, #6
 800676c:	2b04      	cmp	r3, #4
 800676e:	bf08      	it	eq
 8006770:	1aad      	subeq	r5, r5, r2
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	6922      	ldr	r2, [r4, #16]
 8006776:	bf0c      	ite	eq
 8006778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800677c:	2500      	movne	r5, #0
 800677e:	4293      	cmp	r3, r2
 8006780:	bfc4      	itt	gt
 8006782:	1a9b      	subgt	r3, r3, r2
 8006784:	18ed      	addgt	r5, r5, r3
 8006786:	f04f 0900 	mov.w	r9, #0
 800678a:	341a      	adds	r4, #26
 800678c:	454d      	cmp	r5, r9
 800678e:	d11a      	bne.n	80067c6 <_printf_common+0xd6>
 8006790:	2000      	movs	r0, #0
 8006792:	e008      	b.n	80067a6 <_printf_common+0xb6>
 8006794:	2301      	movs	r3, #1
 8006796:	4652      	mov	r2, sl
 8006798:	4639      	mov	r1, r7
 800679a:	4630      	mov	r0, r6
 800679c:	47c0      	blx	r8
 800679e:	3001      	adds	r0, #1
 80067a0:	d103      	bne.n	80067aa <_printf_common+0xba>
 80067a2:	f04f 30ff 	mov.w	r0, #4294967295
 80067a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067aa:	3501      	adds	r5, #1
 80067ac:	e7c3      	b.n	8006736 <_printf_common+0x46>
 80067ae:	18e1      	adds	r1, r4, r3
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	2030      	movs	r0, #48	; 0x30
 80067b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067b8:	4422      	add	r2, r4
 80067ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067c2:	3302      	adds	r3, #2
 80067c4:	e7c5      	b.n	8006752 <_printf_common+0x62>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4622      	mov	r2, r4
 80067ca:	4639      	mov	r1, r7
 80067cc:	4630      	mov	r0, r6
 80067ce:	47c0      	blx	r8
 80067d0:	3001      	adds	r0, #1
 80067d2:	d0e6      	beq.n	80067a2 <_printf_common+0xb2>
 80067d4:	f109 0901 	add.w	r9, r9, #1
 80067d8:	e7d8      	b.n	800678c <_printf_common+0x9c>
	...

080067dc <_printf_i>:
 80067dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067e4:	460c      	mov	r4, r1
 80067e6:	7e09      	ldrb	r1, [r1, #24]
 80067e8:	b085      	sub	sp, #20
 80067ea:	296e      	cmp	r1, #110	; 0x6e
 80067ec:	4617      	mov	r7, r2
 80067ee:	4606      	mov	r6, r0
 80067f0:	4698      	mov	r8, r3
 80067f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067f4:	f000 80b3 	beq.w	800695e <_printf_i+0x182>
 80067f8:	d822      	bhi.n	8006840 <_printf_i+0x64>
 80067fa:	2963      	cmp	r1, #99	; 0x63
 80067fc:	d036      	beq.n	800686c <_printf_i+0x90>
 80067fe:	d80a      	bhi.n	8006816 <_printf_i+0x3a>
 8006800:	2900      	cmp	r1, #0
 8006802:	f000 80b9 	beq.w	8006978 <_printf_i+0x19c>
 8006806:	2958      	cmp	r1, #88	; 0x58
 8006808:	f000 8083 	beq.w	8006912 <_printf_i+0x136>
 800680c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006810:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006814:	e032      	b.n	800687c <_printf_i+0xa0>
 8006816:	2964      	cmp	r1, #100	; 0x64
 8006818:	d001      	beq.n	800681e <_printf_i+0x42>
 800681a:	2969      	cmp	r1, #105	; 0x69
 800681c:	d1f6      	bne.n	800680c <_printf_i+0x30>
 800681e:	6820      	ldr	r0, [r4, #0]
 8006820:	6813      	ldr	r3, [r2, #0]
 8006822:	0605      	lsls	r5, r0, #24
 8006824:	f103 0104 	add.w	r1, r3, #4
 8006828:	d52a      	bpl.n	8006880 <_printf_i+0xa4>
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6011      	str	r1, [r2, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	da03      	bge.n	800683a <_printf_i+0x5e>
 8006832:	222d      	movs	r2, #45	; 0x2d
 8006834:	425b      	negs	r3, r3
 8006836:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800683a:	486f      	ldr	r0, [pc, #444]	; (80069f8 <_printf_i+0x21c>)
 800683c:	220a      	movs	r2, #10
 800683e:	e039      	b.n	80068b4 <_printf_i+0xd8>
 8006840:	2973      	cmp	r1, #115	; 0x73
 8006842:	f000 809d 	beq.w	8006980 <_printf_i+0x1a4>
 8006846:	d808      	bhi.n	800685a <_printf_i+0x7e>
 8006848:	296f      	cmp	r1, #111	; 0x6f
 800684a:	d020      	beq.n	800688e <_printf_i+0xb2>
 800684c:	2970      	cmp	r1, #112	; 0x70
 800684e:	d1dd      	bne.n	800680c <_printf_i+0x30>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	f043 0320 	orr.w	r3, r3, #32
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	e003      	b.n	8006862 <_printf_i+0x86>
 800685a:	2975      	cmp	r1, #117	; 0x75
 800685c:	d017      	beq.n	800688e <_printf_i+0xb2>
 800685e:	2978      	cmp	r1, #120	; 0x78
 8006860:	d1d4      	bne.n	800680c <_printf_i+0x30>
 8006862:	2378      	movs	r3, #120	; 0x78
 8006864:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006868:	4864      	ldr	r0, [pc, #400]	; (80069fc <_printf_i+0x220>)
 800686a:	e055      	b.n	8006918 <_printf_i+0x13c>
 800686c:	6813      	ldr	r3, [r2, #0]
 800686e:	1d19      	adds	r1, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6011      	str	r1, [r2, #0]
 8006874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800687c:	2301      	movs	r3, #1
 800687e:	e08c      	b.n	800699a <_printf_i+0x1be>
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6011      	str	r1, [r2, #0]
 8006884:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006888:	bf18      	it	ne
 800688a:	b21b      	sxthne	r3, r3
 800688c:	e7cf      	b.n	800682e <_printf_i+0x52>
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	6825      	ldr	r5, [r4, #0]
 8006892:	1d18      	adds	r0, r3, #4
 8006894:	6010      	str	r0, [r2, #0]
 8006896:	0628      	lsls	r0, r5, #24
 8006898:	d501      	bpl.n	800689e <_printf_i+0xc2>
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	e002      	b.n	80068a4 <_printf_i+0xc8>
 800689e:	0668      	lsls	r0, r5, #25
 80068a0:	d5fb      	bpl.n	800689a <_printf_i+0xbe>
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	4854      	ldr	r0, [pc, #336]	; (80069f8 <_printf_i+0x21c>)
 80068a6:	296f      	cmp	r1, #111	; 0x6f
 80068a8:	bf14      	ite	ne
 80068aa:	220a      	movne	r2, #10
 80068ac:	2208      	moveq	r2, #8
 80068ae:	2100      	movs	r1, #0
 80068b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068b4:	6865      	ldr	r5, [r4, #4]
 80068b6:	60a5      	str	r5, [r4, #8]
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	f2c0 8095 	blt.w	80069e8 <_printf_i+0x20c>
 80068be:	6821      	ldr	r1, [r4, #0]
 80068c0:	f021 0104 	bic.w	r1, r1, #4
 80068c4:	6021      	str	r1, [r4, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d13d      	bne.n	8006946 <_printf_i+0x16a>
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	f040 808e 	bne.w	80069ec <_printf_i+0x210>
 80068d0:	4665      	mov	r5, ip
 80068d2:	2a08      	cmp	r2, #8
 80068d4:	d10b      	bne.n	80068ee <_printf_i+0x112>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	07db      	lsls	r3, r3, #31
 80068da:	d508      	bpl.n	80068ee <_printf_i+0x112>
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	6862      	ldr	r2, [r4, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	bfde      	ittt	le
 80068e4:	2330      	movle	r3, #48	; 0x30
 80068e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068ee:	ebac 0305 	sub.w	r3, ip, r5
 80068f2:	6123      	str	r3, [r4, #16]
 80068f4:	f8cd 8000 	str.w	r8, [sp]
 80068f8:	463b      	mov	r3, r7
 80068fa:	aa03      	add	r2, sp, #12
 80068fc:	4621      	mov	r1, r4
 80068fe:	4630      	mov	r0, r6
 8006900:	f7ff fef6 	bl	80066f0 <_printf_common>
 8006904:	3001      	adds	r0, #1
 8006906:	d14d      	bne.n	80069a4 <_printf_i+0x1c8>
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	b005      	add	sp, #20
 800690e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006912:	4839      	ldr	r0, [pc, #228]	; (80069f8 <_printf_i+0x21c>)
 8006914:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006918:	6813      	ldr	r3, [r2, #0]
 800691a:	6821      	ldr	r1, [r4, #0]
 800691c:	1d1d      	adds	r5, r3, #4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6015      	str	r5, [r2, #0]
 8006922:	060a      	lsls	r2, r1, #24
 8006924:	d50b      	bpl.n	800693e <_printf_i+0x162>
 8006926:	07ca      	lsls	r2, r1, #31
 8006928:	bf44      	itt	mi
 800692a:	f041 0120 	orrmi.w	r1, r1, #32
 800692e:	6021      	strmi	r1, [r4, #0]
 8006930:	b91b      	cbnz	r3, 800693a <_printf_i+0x15e>
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	f022 0220 	bic.w	r2, r2, #32
 8006938:	6022      	str	r2, [r4, #0]
 800693a:	2210      	movs	r2, #16
 800693c:	e7b7      	b.n	80068ae <_printf_i+0xd2>
 800693e:	064d      	lsls	r5, r1, #25
 8006940:	bf48      	it	mi
 8006942:	b29b      	uxthmi	r3, r3
 8006944:	e7ef      	b.n	8006926 <_printf_i+0x14a>
 8006946:	4665      	mov	r5, ip
 8006948:	fbb3 f1f2 	udiv	r1, r3, r2
 800694c:	fb02 3311 	mls	r3, r2, r1, r3
 8006950:	5cc3      	ldrb	r3, [r0, r3]
 8006952:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006956:	460b      	mov	r3, r1
 8006958:	2900      	cmp	r1, #0
 800695a:	d1f5      	bne.n	8006948 <_printf_i+0x16c>
 800695c:	e7b9      	b.n	80068d2 <_printf_i+0xf6>
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	6825      	ldr	r5, [r4, #0]
 8006962:	6961      	ldr	r1, [r4, #20]
 8006964:	1d18      	adds	r0, r3, #4
 8006966:	6010      	str	r0, [r2, #0]
 8006968:	0628      	lsls	r0, r5, #24
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	d501      	bpl.n	8006972 <_printf_i+0x196>
 800696e:	6019      	str	r1, [r3, #0]
 8006970:	e002      	b.n	8006978 <_printf_i+0x19c>
 8006972:	066a      	lsls	r2, r5, #25
 8006974:	d5fb      	bpl.n	800696e <_printf_i+0x192>
 8006976:	8019      	strh	r1, [r3, #0]
 8006978:	2300      	movs	r3, #0
 800697a:	6123      	str	r3, [r4, #16]
 800697c:	4665      	mov	r5, ip
 800697e:	e7b9      	b.n	80068f4 <_printf_i+0x118>
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	1d19      	adds	r1, r3, #4
 8006984:	6011      	str	r1, [r2, #0]
 8006986:	681d      	ldr	r5, [r3, #0]
 8006988:	6862      	ldr	r2, [r4, #4]
 800698a:	2100      	movs	r1, #0
 800698c:	4628      	mov	r0, r5
 800698e:	f7f9 fc3f 	bl	8000210 <memchr>
 8006992:	b108      	cbz	r0, 8006998 <_printf_i+0x1bc>
 8006994:	1b40      	subs	r0, r0, r5
 8006996:	6060      	str	r0, [r4, #4]
 8006998:	6863      	ldr	r3, [r4, #4]
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	2300      	movs	r3, #0
 800699e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a2:	e7a7      	b.n	80068f4 <_printf_i+0x118>
 80069a4:	6923      	ldr	r3, [r4, #16]
 80069a6:	462a      	mov	r2, r5
 80069a8:	4639      	mov	r1, r7
 80069aa:	4630      	mov	r0, r6
 80069ac:	47c0      	blx	r8
 80069ae:	3001      	adds	r0, #1
 80069b0:	d0aa      	beq.n	8006908 <_printf_i+0x12c>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	079b      	lsls	r3, r3, #30
 80069b6:	d413      	bmi.n	80069e0 <_printf_i+0x204>
 80069b8:	68e0      	ldr	r0, [r4, #12]
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	4298      	cmp	r0, r3
 80069be:	bfb8      	it	lt
 80069c0:	4618      	movlt	r0, r3
 80069c2:	e7a3      	b.n	800690c <_printf_i+0x130>
 80069c4:	2301      	movs	r3, #1
 80069c6:	464a      	mov	r2, r9
 80069c8:	4639      	mov	r1, r7
 80069ca:	4630      	mov	r0, r6
 80069cc:	47c0      	blx	r8
 80069ce:	3001      	adds	r0, #1
 80069d0:	d09a      	beq.n	8006908 <_printf_i+0x12c>
 80069d2:	3501      	adds	r5, #1
 80069d4:	68e3      	ldr	r3, [r4, #12]
 80069d6:	9a03      	ldr	r2, [sp, #12]
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	42ab      	cmp	r3, r5
 80069dc:	dcf2      	bgt.n	80069c4 <_printf_i+0x1e8>
 80069de:	e7eb      	b.n	80069b8 <_printf_i+0x1dc>
 80069e0:	2500      	movs	r5, #0
 80069e2:	f104 0919 	add.w	r9, r4, #25
 80069e6:	e7f5      	b.n	80069d4 <_printf_i+0x1f8>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1ac      	bne.n	8006946 <_printf_i+0x16a>
 80069ec:	7803      	ldrb	r3, [r0, #0]
 80069ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f6:	e76c      	b.n	80068d2 <_printf_i+0xf6>
 80069f8:	080071f9 	.word	0x080071f9
 80069fc:	0800720a 	.word	0x0800720a

08006a00 <_sbrk_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4c06      	ldr	r4, [pc, #24]	; (8006a1c <_sbrk_r+0x1c>)
 8006a04:	2300      	movs	r3, #0
 8006a06:	4605      	mov	r5, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	6023      	str	r3, [r4, #0]
 8006a0c:	f7fa f9de 	bl	8000dcc <_sbrk>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d102      	bne.n	8006a1a <_sbrk_r+0x1a>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	b103      	cbz	r3, 8006a1a <_sbrk_r+0x1a>
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	bd38      	pop	{r3, r4, r5, pc}
 8006a1c:	20004670 	.word	0x20004670

08006a20 <__sread>:
 8006a20:	b510      	push	{r4, lr}
 8006a22:	460c      	mov	r4, r1
 8006a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a28:	f000 fa96 	bl	8006f58 <_read_r>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	bfab      	itete	ge
 8006a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a32:	89a3      	ldrhlt	r3, [r4, #12]
 8006a34:	181b      	addge	r3, r3, r0
 8006a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a3a:	bfac      	ite	ge
 8006a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a3e:	81a3      	strhlt	r3, [r4, #12]
 8006a40:	bd10      	pop	{r4, pc}

08006a42 <__swrite>:
 8006a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a46:	461f      	mov	r7, r3
 8006a48:	898b      	ldrh	r3, [r1, #12]
 8006a4a:	05db      	lsls	r3, r3, #23
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	4616      	mov	r6, r2
 8006a52:	d505      	bpl.n	8006a60 <__swrite+0x1e>
 8006a54:	2302      	movs	r3, #2
 8006a56:	2200      	movs	r2, #0
 8006a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5c:	f000 f9b6 	bl	8006dcc <_lseek_r>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	463b      	mov	r3, r7
 8006a70:	4628      	mov	r0, r5
 8006a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	f000 b869 	b.w	8006b4c <_write_r>

08006a7a <__sseek>:
 8006a7a:	b510      	push	{r4, lr}
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a82:	f000 f9a3 	bl	8006dcc <_lseek_r>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	bf15      	itete	ne
 8006a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a96:	81a3      	strheq	r3, [r4, #12]
 8006a98:	bf18      	it	ne
 8006a9a:	81a3      	strhne	r3, [r4, #12]
 8006a9c:	bd10      	pop	{r4, pc}

08006a9e <__sclose>:
 8006a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa2:	f000 b8d3 	b.w	8006c4c <_close_r>
	...

08006aa8 <__swbuf_r>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	460e      	mov	r6, r1
 8006aac:	4614      	mov	r4, r2
 8006aae:	4605      	mov	r5, r0
 8006ab0:	b118      	cbz	r0, 8006aba <__swbuf_r+0x12>
 8006ab2:	6983      	ldr	r3, [r0, #24]
 8006ab4:	b90b      	cbnz	r3, 8006aba <__swbuf_r+0x12>
 8006ab6:	f7ff fbf7 	bl	80062a8 <__sinit>
 8006aba:	4b21      	ldr	r3, [pc, #132]	; (8006b40 <__swbuf_r+0x98>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	d12a      	bne.n	8006b16 <__swbuf_r+0x6e>
 8006ac0:	686c      	ldr	r4, [r5, #4]
 8006ac2:	69a3      	ldr	r3, [r4, #24]
 8006ac4:	60a3      	str	r3, [r4, #8]
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	071a      	lsls	r2, r3, #28
 8006aca:	d52e      	bpl.n	8006b2a <__swbuf_r+0x82>
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	b363      	cbz	r3, 8006b2a <__swbuf_r+0x82>
 8006ad0:	6923      	ldr	r3, [r4, #16]
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	1ac0      	subs	r0, r0, r3
 8006ad6:	6963      	ldr	r3, [r4, #20]
 8006ad8:	b2f6      	uxtb	r6, r6
 8006ada:	4283      	cmp	r3, r0
 8006adc:	4637      	mov	r7, r6
 8006ade:	dc04      	bgt.n	8006aea <__swbuf_r+0x42>
 8006ae0:	4621      	mov	r1, r4
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 f948 	bl	8006d78 <_fflush_r>
 8006ae8:	bb28      	cbnz	r0, 8006b36 <__swbuf_r+0x8e>
 8006aea:	68a3      	ldr	r3, [r4, #8]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	60a3      	str	r3, [r4, #8]
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	6022      	str	r2, [r4, #0]
 8006af6:	701e      	strb	r6, [r3, #0]
 8006af8:	6963      	ldr	r3, [r4, #20]
 8006afa:	3001      	adds	r0, #1
 8006afc:	4283      	cmp	r3, r0
 8006afe:	d004      	beq.n	8006b0a <__swbuf_r+0x62>
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	07db      	lsls	r3, r3, #31
 8006b04:	d519      	bpl.n	8006b3a <__swbuf_r+0x92>
 8006b06:	2e0a      	cmp	r6, #10
 8006b08:	d117      	bne.n	8006b3a <__swbuf_r+0x92>
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 f933 	bl	8006d78 <_fflush_r>
 8006b12:	b190      	cbz	r0, 8006b3a <__swbuf_r+0x92>
 8006b14:	e00f      	b.n	8006b36 <__swbuf_r+0x8e>
 8006b16:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <__swbuf_r+0x9c>)
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	d101      	bne.n	8006b20 <__swbuf_r+0x78>
 8006b1c:	68ac      	ldr	r4, [r5, #8]
 8006b1e:	e7d0      	b.n	8006ac2 <__swbuf_r+0x1a>
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <__swbuf_r+0xa0>)
 8006b22:	429c      	cmp	r4, r3
 8006b24:	bf08      	it	eq
 8006b26:	68ec      	ldreq	r4, [r5, #12]
 8006b28:	e7cb      	b.n	8006ac2 <__swbuf_r+0x1a>
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 f81f 	bl	8006b70 <__swsetup_r>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d0cc      	beq.n	8006ad0 <__swbuf_r+0x28>
 8006b36:	f04f 37ff 	mov.w	r7, #4294967295
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	080071a8 	.word	0x080071a8
 8006b44:	080071c8 	.word	0x080071c8
 8006b48:	08007188 	.word	0x08007188

08006b4c <_write_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4c07      	ldr	r4, [pc, #28]	; (8006b6c <_write_r+0x20>)
 8006b50:	4605      	mov	r5, r0
 8006b52:	4608      	mov	r0, r1
 8006b54:	4611      	mov	r1, r2
 8006b56:	2200      	movs	r2, #0
 8006b58:	6022      	str	r2, [r4, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f7f9 fd5c 	bl	8000618 <_write>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_write_r+0x1e>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_write_r+0x1e>
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20004670 	.word	0x20004670

08006b70 <__swsetup_r>:
 8006b70:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <__swsetup_r+0xcc>)
 8006b72:	b570      	push	{r4, r5, r6, lr}
 8006b74:	681d      	ldr	r5, [r3, #0]
 8006b76:	4606      	mov	r6, r0
 8006b78:	460c      	mov	r4, r1
 8006b7a:	b125      	cbz	r5, 8006b86 <__swsetup_r+0x16>
 8006b7c:	69ab      	ldr	r3, [r5, #24]
 8006b7e:	b913      	cbnz	r3, 8006b86 <__swsetup_r+0x16>
 8006b80:	4628      	mov	r0, r5
 8006b82:	f7ff fb91 	bl	80062a8 <__sinit>
 8006b86:	4b2e      	ldr	r3, [pc, #184]	; (8006c40 <__swsetup_r+0xd0>)
 8006b88:	429c      	cmp	r4, r3
 8006b8a:	d10f      	bne.n	8006bac <__swsetup_r+0x3c>
 8006b8c:	686c      	ldr	r4, [r5, #4]
 8006b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	0715      	lsls	r5, r2, #28
 8006b96:	d42c      	bmi.n	8006bf2 <__swsetup_r+0x82>
 8006b98:	06d0      	lsls	r0, r2, #27
 8006b9a:	d411      	bmi.n	8006bc0 <__swsetup_r+0x50>
 8006b9c:	2209      	movs	r2, #9
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8006baa:	e03e      	b.n	8006c2a <__swsetup_r+0xba>
 8006bac:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <__swsetup_r+0xd4>)
 8006bae:	429c      	cmp	r4, r3
 8006bb0:	d101      	bne.n	8006bb6 <__swsetup_r+0x46>
 8006bb2:	68ac      	ldr	r4, [r5, #8]
 8006bb4:	e7eb      	b.n	8006b8e <__swsetup_r+0x1e>
 8006bb6:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <__swsetup_r+0xd8>)
 8006bb8:	429c      	cmp	r4, r3
 8006bba:	bf08      	it	eq
 8006bbc:	68ec      	ldreq	r4, [r5, #12]
 8006bbe:	e7e6      	b.n	8006b8e <__swsetup_r+0x1e>
 8006bc0:	0751      	lsls	r1, r2, #29
 8006bc2:	d512      	bpl.n	8006bea <__swsetup_r+0x7a>
 8006bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bc6:	b141      	cbz	r1, 8006bda <__swsetup_r+0x6a>
 8006bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	d002      	beq.n	8006bd6 <__swsetup_r+0x66>
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f973 	bl	8006ebc <_free_r>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	2300      	movs	r3, #0
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f043 0308 	orr.w	r3, r3, #8
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	6923      	ldr	r3, [r4, #16]
 8006bf4:	b94b      	cbnz	r3, 8006c0a <__swsetup_r+0x9a>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c00:	d003      	beq.n	8006c0a <__swsetup_r+0x9a>
 8006c02:	4621      	mov	r1, r4
 8006c04:	4630      	mov	r0, r6
 8006c06:	f000 f917 	bl	8006e38 <__smakebuf_r>
 8006c0a:	89a2      	ldrh	r2, [r4, #12]
 8006c0c:	f012 0301 	ands.w	r3, r2, #1
 8006c10:	d00c      	beq.n	8006c2c <__swsetup_r+0xbc>
 8006c12:	2300      	movs	r3, #0
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	6963      	ldr	r3, [r4, #20]
 8006c18:	425b      	negs	r3, r3
 8006c1a:	61a3      	str	r3, [r4, #24]
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	b953      	cbnz	r3, 8006c36 <__swsetup_r+0xc6>
 8006c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006c28:	d1ba      	bne.n	8006ba0 <__swsetup_r+0x30>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	0792      	lsls	r2, r2, #30
 8006c2e:	bf58      	it	pl
 8006c30:	6963      	ldrpl	r3, [r4, #20]
 8006c32:	60a3      	str	r3, [r4, #8]
 8006c34:	e7f2      	b.n	8006c1c <__swsetup_r+0xac>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e7f7      	b.n	8006c2a <__swsetup_r+0xba>
 8006c3a:	bf00      	nop
 8006c3c:	20000018 	.word	0x20000018
 8006c40:	080071a8 	.word	0x080071a8
 8006c44:	080071c8 	.word	0x080071c8
 8006c48:	08007188 	.word	0x08007188

08006c4c <_close_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4c06      	ldr	r4, [pc, #24]	; (8006c68 <_close_r+0x1c>)
 8006c50:	2300      	movs	r3, #0
 8006c52:	4605      	mov	r5, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	f7fa f883 	bl	8000d62 <_close>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_close_r+0x1a>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_close_r+0x1a>
 8006c64:	602b      	str	r3, [r5, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	20004670 	.word	0x20004670

08006c6c <__sflush_r>:
 8006c6c:	898a      	ldrh	r2, [r1, #12]
 8006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	4605      	mov	r5, r0
 8006c74:	0710      	lsls	r0, r2, #28
 8006c76:	460c      	mov	r4, r1
 8006c78:	d458      	bmi.n	8006d2c <__sflush_r+0xc0>
 8006c7a:	684b      	ldr	r3, [r1, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dc05      	bgt.n	8006c8c <__sflush_r+0x20>
 8006c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dc02      	bgt.n	8006c8c <__sflush_r+0x20>
 8006c86:	2000      	movs	r0, #0
 8006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	d0f9      	beq.n	8006c86 <__sflush_r+0x1a>
 8006c92:	2300      	movs	r3, #0
 8006c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c98:	682f      	ldr	r7, [r5, #0]
 8006c9a:	6a21      	ldr	r1, [r4, #32]
 8006c9c:	602b      	str	r3, [r5, #0]
 8006c9e:	d032      	beq.n	8006d06 <__sflush_r+0x9a>
 8006ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	075a      	lsls	r2, r3, #29
 8006ca6:	d505      	bpl.n	8006cb4 <__sflush_r+0x48>
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	1ac0      	subs	r0, r0, r3
 8006cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cae:	b10b      	cbz	r3, 8006cb4 <__sflush_r+0x48>
 8006cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb2:	1ac0      	subs	r0, r0, r3
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cba:	6a21      	ldr	r1, [r4, #32]
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	47b0      	blx	r6
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	d106      	bne.n	8006cd4 <__sflush_r+0x68>
 8006cc6:	6829      	ldr	r1, [r5, #0]
 8006cc8:	291d      	cmp	r1, #29
 8006cca:	d848      	bhi.n	8006d5e <__sflush_r+0xf2>
 8006ccc:	4a29      	ldr	r2, [pc, #164]	; (8006d74 <__sflush_r+0x108>)
 8006cce:	40ca      	lsrs	r2, r1
 8006cd0:	07d6      	lsls	r6, r2, #31
 8006cd2:	d544      	bpl.n	8006d5e <__sflush_r+0xf2>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	6062      	str	r2, [r4, #4]
 8006cd8:	04d9      	lsls	r1, r3, #19
 8006cda:	6922      	ldr	r2, [r4, #16]
 8006cdc:	6022      	str	r2, [r4, #0]
 8006cde:	d504      	bpl.n	8006cea <__sflush_r+0x7e>
 8006ce0:	1c42      	adds	r2, r0, #1
 8006ce2:	d101      	bne.n	8006ce8 <__sflush_r+0x7c>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b903      	cbnz	r3, 8006cea <__sflush_r+0x7e>
 8006ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8006cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cec:	602f      	str	r7, [r5, #0]
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	d0c9      	beq.n	8006c86 <__sflush_r+0x1a>
 8006cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf6:	4299      	cmp	r1, r3
 8006cf8:	d002      	beq.n	8006d00 <__sflush_r+0x94>
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f000 f8de 	bl	8006ebc <_free_r>
 8006d00:	2000      	movs	r0, #0
 8006d02:	6360      	str	r0, [r4, #52]	; 0x34
 8006d04:	e7c0      	b.n	8006c88 <__sflush_r+0x1c>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b0      	blx	r6
 8006d0c:	1c41      	adds	r1, r0, #1
 8006d0e:	d1c8      	bne.n	8006ca2 <__sflush_r+0x36>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0c5      	beq.n	8006ca2 <__sflush_r+0x36>
 8006d16:	2b1d      	cmp	r3, #29
 8006d18:	d001      	beq.n	8006d1e <__sflush_r+0xb2>
 8006d1a:	2b16      	cmp	r3, #22
 8006d1c:	d101      	bne.n	8006d22 <__sflush_r+0xb6>
 8006d1e:	602f      	str	r7, [r5, #0]
 8006d20:	e7b1      	b.n	8006c86 <__sflush_r+0x1a>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	e7ad      	b.n	8006c88 <__sflush_r+0x1c>
 8006d2c:	690f      	ldr	r7, [r1, #16]
 8006d2e:	2f00      	cmp	r7, #0
 8006d30:	d0a9      	beq.n	8006c86 <__sflush_r+0x1a>
 8006d32:	0793      	lsls	r3, r2, #30
 8006d34:	680e      	ldr	r6, [r1, #0]
 8006d36:	bf08      	it	eq
 8006d38:	694b      	ldreq	r3, [r1, #20]
 8006d3a:	600f      	str	r7, [r1, #0]
 8006d3c:	bf18      	it	ne
 8006d3e:	2300      	movne	r3, #0
 8006d40:	eba6 0807 	sub.w	r8, r6, r7
 8006d44:	608b      	str	r3, [r1, #8]
 8006d46:	f1b8 0f00 	cmp.w	r8, #0
 8006d4a:	dd9c      	ble.n	8006c86 <__sflush_r+0x1a>
 8006d4c:	4643      	mov	r3, r8
 8006d4e:	463a      	mov	r2, r7
 8006d50:	6a21      	ldr	r1, [r4, #32]
 8006d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b0      	blx	r6
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	dc06      	bgt.n	8006d6a <__sflush_r+0xfe>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	e78e      	b.n	8006c88 <__sflush_r+0x1c>
 8006d6a:	4407      	add	r7, r0
 8006d6c:	eba8 0800 	sub.w	r8, r8, r0
 8006d70:	e7e9      	b.n	8006d46 <__sflush_r+0xda>
 8006d72:	bf00      	nop
 8006d74:	20400001 	.word	0x20400001

08006d78 <_fflush_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	690b      	ldr	r3, [r1, #16]
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	b1db      	cbz	r3, 8006dba <_fflush_r+0x42>
 8006d82:	b118      	cbz	r0, 8006d8c <_fflush_r+0x14>
 8006d84:	6983      	ldr	r3, [r0, #24]
 8006d86:	b90b      	cbnz	r3, 8006d8c <_fflush_r+0x14>
 8006d88:	f7ff fa8e 	bl	80062a8 <__sinit>
 8006d8c:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <_fflush_r+0x48>)
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d109      	bne.n	8006da6 <_fflush_r+0x2e>
 8006d92:	686c      	ldr	r4, [r5, #4]
 8006d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d98:	b17b      	cbz	r3, 8006dba <_fflush_r+0x42>
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da2:	f7ff bf63 	b.w	8006c6c <__sflush_r>
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <_fflush_r+0x4c>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	d101      	bne.n	8006db0 <_fflush_r+0x38>
 8006dac:	68ac      	ldr	r4, [r5, #8]
 8006dae:	e7f1      	b.n	8006d94 <_fflush_r+0x1c>
 8006db0:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <_fflush_r+0x50>)
 8006db2:	429c      	cmp	r4, r3
 8006db4:	bf08      	it	eq
 8006db6:	68ec      	ldreq	r4, [r5, #12]
 8006db8:	e7ec      	b.n	8006d94 <_fflush_r+0x1c>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	bd38      	pop	{r3, r4, r5, pc}
 8006dbe:	bf00      	nop
 8006dc0:	080071a8 	.word	0x080071a8
 8006dc4:	080071c8 	.word	0x080071c8
 8006dc8:	08007188 	.word	0x08007188

08006dcc <_lseek_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	4c07      	ldr	r4, [pc, #28]	; (8006dec <_lseek_r+0x20>)
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	4608      	mov	r0, r1
 8006dd4:	4611      	mov	r1, r2
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f7f9 ffe8 	bl	8000db0 <_lseek>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_lseek_r+0x1e>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_lseek_r+0x1e>
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20004670 	.word	0x20004670

08006df0 <__swhatbuf_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	460e      	mov	r6, r1
 8006df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	b096      	sub	sp, #88	; 0x58
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	461d      	mov	r5, r3
 8006e00:	da07      	bge.n	8006e12 <__swhatbuf_r+0x22>
 8006e02:	2300      	movs	r3, #0
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	89b3      	ldrh	r3, [r6, #12]
 8006e08:	061a      	lsls	r2, r3, #24
 8006e0a:	d410      	bmi.n	8006e2e <__swhatbuf_r+0x3e>
 8006e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e10:	e00e      	b.n	8006e30 <__swhatbuf_r+0x40>
 8006e12:	466a      	mov	r2, sp
 8006e14:	f000 f8b2 	bl	8006f7c <_fstat_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	dbf2      	blt.n	8006e02 <__swhatbuf_r+0x12>
 8006e1c:	9a01      	ldr	r2, [sp, #4]
 8006e1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e26:	425a      	negs	r2, r3
 8006e28:	415a      	adcs	r2, r3
 8006e2a:	602a      	str	r2, [r5, #0]
 8006e2c:	e7ee      	b.n	8006e0c <__swhatbuf_r+0x1c>
 8006e2e:	2340      	movs	r3, #64	; 0x40
 8006e30:	2000      	movs	r0, #0
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	b016      	add	sp, #88	; 0x58
 8006e36:	bd70      	pop	{r4, r5, r6, pc}

08006e38 <__smakebuf_r>:
 8006e38:	898b      	ldrh	r3, [r1, #12]
 8006e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e3c:	079d      	lsls	r5, r3, #30
 8006e3e:	4606      	mov	r6, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	d507      	bpl.n	8006e54 <__smakebuf_r+0x1c>
 8006e44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	6123      	str	r3, [r4, #16]
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	6163      	str	r3, [r4, #20]
 8006e50:	b002      	add	sp, #8
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	ab01      	add	r3, sp, #4
 8006e56:	466a      	mov	r2, sp
 8006e58:	f7ff ffca 	bl	8006df0 <__swhatbuf_r>
 8006e5c:	9900      	ldr	r1, [sp, #0]
 8006e5e:	4605      	mov	r5, r0
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff faab 	bl	80063bc <_malloc_r>
 8006e66:	b948      	cbnz	r0, 8006e7c <__smakebuf_r+0x44>
 8006e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e6c:	059a      	lsls	r2, r3, #22
 8006e6e:	d4ef      	bmi.n	8006e50 <__smakebuf_r+0x18>
 8006e70:	f023 0303 	bic.w	r3, r3, #3
 8006e74:	f043 0302 	orr.w	r3, r3, #2
 8006e78:	81a3      	strh	r3, [r4, #12]
 8006e7a:	e7e3      	b.n	8006e44 <__smakebuf_r+0xc>
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <__smakebuf_r+0x7c>)
 8006e7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	6020      	str	r0, [r4, #0]
 8006e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	9b00      	ldr	r3, [sp, #0]
 8006e8c:	6163      	str	r3, [r4, #20]
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	6120      	str	r0, [r4, #16]
 8006e92:	b15b      	cbz	r3, 8006eac <__smakebuf_r+0x74>
 8006e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f000 f881 	bl	8006fa0 <_isatty_r>
 8006e9e:	b128      	cbz	r0, 8006eac <__smakebuf_r+0x74>
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	81a3      	strh	r3, [r4, #12]
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	431d      	orrs	r5, r3
 8006eb0:	81a5      	strh	r5, [r4, #12]
 8006eb2:	e7cd      	b.n	8006e50 <__smakebuf_r+0x18>
 8006eb4:	08006271 	.word	0x08006271

08006eb8 <__malloc_lock>:
 8006eb8:	4770      	bx	lr

08006eba <__malloc_unlock>:
 8006eba:	4770      	bx	lr

08006ebc <_free_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	d045      	beq.n	8006f50 <_free_r+0x94>
 8006ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec8:	1f0c      	subs	r4, r1, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bfb8      	it	lt
 8006ece:	18e4      	addlt	r4, r4, r3
 8006ed0:	f7ff fff2 	bl	8006eb8 <__malloc_lock>
 8006ed4:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <_free_r+0x98>)
 8006ed6:	6813      	ldr	r3, [r2, #0]
 8006ed8:	4610      	mov	r0, r2
 8006eda:	b933      	cbnz	r3, 8006eea <_free_r+0x2e>
 8006edc:	6063      	str	r3, [r4, #4]
 8006ede:	6014      	str	r4, [r2, #0]
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee6:	f7ff bfe8 	b.w	8006eba <__malloc_unlock>
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	d90c      	bls.n	8006f08 <_free_r+0x4c>
 8006eee:	6821      	ldr	r1, [r4, #0]
 8006ef0:	1862      	adds	r2, r4, r1
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	bf04      	itt	eq
 8006ef6:	681a      	ldreq	r2, [r3, #0]
 8006ef8:	685b      	ldreq	r3, [r3, #4]
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	bf04      	itt	eq
 8006efe:	1852      	addeq	r2, r2, r1
 8006f00:	6022      	streq	r2, [r4, #0]
 8006f02:	6004      	str	r4, [r0, #0]
 8006f04:	e7ec      	b.n	8006ee0 <_free_r+0x24>
 8006f06:	4613      	mov	r3, r2
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	b10a      	cbz	r2, 8006f10 <_free_r+0x54>
 8006f0c:	42a2      	cmp	r2, r4
 8006f0e:	d9fa      	bls.n	8006f06 <_free_r+0x4a>
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	1858      	adds	r0, r3, r1
 8006f14:	42a0      	cmp	r0, r4
 8006f16:	d10b      	bne.n	8006f30 <_free_r+0x74>
 8006f18:	6820      	ldr	r0, [r4, #0]
 8006f1a:	4401      	add	r1, r0
 8006f1c:	1858      	adds	r0, r3, r1
 8006f1e:	4282      	cmp	r2, r0
 8006f20:	6019      	str	r1, [r3, #0]
 8006f22:	d1dd      	bne.n	8006ee0 <_free_r+0x24>
 8006f24:	6810      	ldr	r0, [r2, #0]
 8006f26:	6852      	ldr	r2, [r2, #4]
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	4401      	add	r1, r0
 8006f2c:	6019      	str	r1, [r3, #0]
 8006f2e:	e7d7      	b.n	8006ee0 <_free_r+0x24>
 8006f30:	d902      	bls.n	8006f38 <_free_r+0x7c>
 8006f32:	230c      	movs	r3, #12
 8006f34:	602b      	str	r3, [r5, #0]
 8006f36:	e7d3      	b.n	8006ee0 <_free_r+0x24>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	1821      	adds	r1, r4, r0
 8006f3c:	428a      	cmp	r2, r1
 8006f3e:	bf04      	itt	eq
 8006f40:	6811      	ldreq	r1, [r2, #0]
 8006f42:	6852      	ldreq	r2, [r2, #4]
 8006f44:	6062      	str	r2, [r4, #4]
 8006f46:	bf04      	itt	eq
 8006f48:	1809      	addeq	r1, r1, r0
 8006f4a:	6021      	streq	r1, [r4, #0]
 8006f4c:	605c      	str	r4, [r3, #4]
 8006f4e:	e7c7      	b.n	8006ee0 <_free_r+0x24>
 8006f50:	bd38      	pop	{r3, r4, r5, pc}
 8006f52:	bf00      	nop
 8006f54:	2000458c 	.word	0x2000458c

08006f58 <_read_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	4c07      	ldr	r4, [pc, #28]	; (8006f78 <_read_r+0x20>)
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	4608      	mov	r0, r1
 8006f60:	4611      	mov	r1, r2
 8006f62:	2200      	movs	r2, #0
 8006f64:	6022      	str	r2, [r4, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	f7f9 fede 	bl	8000d28 <_read>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d102      	bne.n	8006f76 <_read_r+0x1e>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	b103      	cbz	r3, 8006f76 <_read_r+0x1e>
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	bd38      	pop	{r3, r4, r5, pc}
 8006f78:	20004670 	.word	0x20004670

08006f7c <_fstat_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4c07      	ldr	r4, [pc, #28]	; (8006f9c <_fstat_r+0x20>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4605      	mov	r5, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	f7f9 fef6 	bl	8000d7a <_fstat>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	d102      	bne.n	8006f98 <_fstat_r+0x1c>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	b103      	cbz	r3, 8006f98 <_fstat_r+0x1c>
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	bd38      	pop	{r3, r4, r5, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20004670 	.word	0x20004670

08006fa0 <_isatty_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4c06      	ldr	r4, [pc, #24]	; (8006fbc <_isatty_r+0x1c>)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	f7f9 fef5 	bl	8000d9a <_isatty>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_isatty_r+0x1a>
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_isatty_r+0x1a>
 8006fb8:	602b      	str	r3, [r5, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	20004670 	.word	0x20004670

08006fc0 <_init>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	bf00      	nop
 8006fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc6:	bc08      	pop	{r3}
 8006fc8:	469e      	mov	lr, r3
 8006fca:	4770      	bx	lr

08006fcc <_fini>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr
