
F446RE_FreeRTOS_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007180  08007180  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007188  08007188  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045f8  2000007c  0800720c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004674  0800720c  00024674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001786e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033cc  00000000  00000000  0003791a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0003ace8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d8  00000000  00000000  0003c048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024cc2  00000000  00000000  0003d220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f4e0  00000000  00000000  00061ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9be0  00000000  00000000  000713c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014afa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c4  00000000  00000000  0014b020  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fb0 	.word	0x08006fb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08006fb0 	.word	0x08006fb0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000098 	.word	0x20000098
 80005e0:	200000ec 	.word	0x200000ec

080005e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetTimerTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetTimerTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	200002ec 	.word	0x200002ec
 8000614:	20000340 	.word	0x20000340

08000618 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	b29a      	uxth	r2, r3
 8000628:	230a      	movs	r3, #10
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <_write+0x24>)
 800062e:	f001 ff46 	bl	80024be <HAL_UART_Transmit>
	return len;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200045a0 	.word	0x200045a0

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fc17 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f885 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f91f 	bl	8000890 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 f8f3 	bl	800083c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  char *str3 = "Init Done\r\n";
 8000656:	4b34      	ldr	r3, [pc, #208]	; (8000728 <main+0xe8>)
 8000658:	66fb      	str	r3, [r7, #108]	; 0x6c
  printf(str3);
 800065a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800065c:	f005 fdc4 	bl	80061e8 <iprintf>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000660:	2300      	movs	r3, #0
 8000662:	667b      	str	r3, [r7, #100]	; 0x64
 8000664:	2300      	movs	r3, #0
 8000666:	66bb      	str	r3, [r7, #104]	; 0x68
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000668:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800066c:	2101      	movs	r1, #1
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fccc 	bl	800300c <osSemaphoreCreate>
 8000674:	4602      	mov	r2, r0
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <main+0xec>)
 8000678:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of periodicTimer */
  osTimerDef(periodicTimer, PTCallback);
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <main+0xf0>)
 800067c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800067e:	2300      	movs	r3, #0
 8000680:	663b      	str	r3, [r7, #96]	; 0x60
  periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);
 8000682:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fc08 	bl	8002ea0 <osTimerCreate>
 8000690:	4602      	mov	r2, r0
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <main+0xf4>)
 8000694:	601a      	str	r2, [r3, #0]

  /* definition and creation of onceTimer */
  osTimerDef(onceTimer, OTCallback);
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <main+0xf8>)
 8000698:	657b      	str	r3, [r7, #84]	; 0x54
 800069a:	2300      	movs	r3, #0
 800069c:	65bb      	str	r3, [r7, #88]	; 0x58
  onceTimerHandle = osTimerCreate(osTimer(onceTimer), osTimerOnce, NULL);
 800069e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fbfa 	bl	8002ea0 <osTimerCreate>
 80006ac:	4602      	mov	r2, r0
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <main+0xfc>)
 80006b0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, StartBlink01, osPriorityNormal, 0, 128);
 80006b2:	4b23      	ldr	r3, [pc, #140]	; (8000740 <main+0x100>)
 80006b4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006b8:	461d      	mov	r5, r3
 80006ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 80006c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fb86 	bl	8002dde <osThreadCreate>
 80006d2:	4602      	mov	r2, r0
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <main+0x104>)
 80006d6:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink02 */
  osThreadDef(blink02, StartBlink02, osPriorityNormal, 0, 128);
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <main+0x108>)
 80006da:	f107 041c 	add.w	r4, r7, #28
 80006de:	461d      	mov	r5, r3
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink02Handle = osThreadCreate(osThread(blink02), NULL);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fb73 	bl	8002dde <osThreadCreate>
 80006f8:	4602      	mov	r2, r0
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <main+0x10c>)
 80006fc:	601a      	str	r2, [r3, #0]

  /* definition and creation of readButton03 */
  osThreadDef(readButton03, StartReadButton03, osPriorityAboveNormal, 0, 128);
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <main+0x110>)
 8000700:	463c      	mov	r4, r7
 8000702:	461d      	mov	r5, r3
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readButton03Handle = osThreadCreate(osThread(readButton03), NULL);
 8000710:	463b      	mov	r3, r7
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fb62 	bl	8002dde <osThreadCreate>
 800071a:	4602      	mov	r2, r0
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <main+0x114>)
 800071e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000720:	f002 fb56 	bl	8002dd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0xe4>
 8000726:	bf00      	nop
 8000728:	08006fc8 	.word	0x08006fc8
 800072c:	2000459c 	.word	0x2000459c
 8000730:	08000aa5 	.word	0x08000aa5
 8000734:	200045e4 	.word	0x200045e4
 8000738:	08000ab9 	.word	0x08000ab9
 800073c:	20004598 	.word	0x20004598
 8000740:	08006fdc 	.word	0x08006fdc
 8000744:	200045e0 	.word	0x200045e0
 8000748:	08007000 	.word	0x08007000
 800074c:	200045e8 	.word	0x200045e8
 8000750:	0800702c 	.word	0x0800702c
 8000754:	20004594 	.word	0x20004594

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2234      	movs	r2, #52	; 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f005 fd35 	bl	80061d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <SystemClock_Config+0xdc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <SystemClock_Config+0xdc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemClock_Config+0xdc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <SystemClock_Config+0xe0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a25      	ldr	r2, [pc, #148]	; (8000838 <SystemClock_Config+0xe0>)
 80007a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <SystemClock_Config+0xe0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007cc:	23b4      	movs	r3, #180	; 0xb4
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 f987 	bl	8001af4 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007ec:	f000 f98a 	bl	8000b04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f0:	f000 fe44 	bl	800147c <HAL_PWREx_EnableOverDrive>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007fa:	f000 f983 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2105      	movs	r1, #5
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fe7d 	bl	800151c <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000828:	f000 f96c 	bl	8000b04 <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	; 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART2_UART_Init+0x4c>)
 8000874:	f001 fdd6 	bl	8002424 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f941 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200045a0 	.word	0x200045a0
 800088c:	40004400 	.word	0x40004400

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a2c      	ldr	r2, [pc, #176]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a25      	ldr	r2, [pc, #148]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a1e      	ldr	r2, [pc, #120]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_GPIO_Init+0xd0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <MX_GPIO_Init+0xd4>)
 800091c:	f000 fd7a 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_GPIO_Init+0xd8>)
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_GPIO_Init+0xdc>)
 8000936:	f000 fbc3 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093a:	2320      	movs	r3, #32
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_GPIO_Init+0xd4>)
 8000952:	f000 fbb5 	bl	80010c0 <HAL_GPIO_Init>

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	10210000 	.word	0x10210000
 800096c:	40020800 	.word	0x40020800

08000970 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void const * argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	//osTimerStart(periodicTimerHandle, 5000U);
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000978:	2120      	movs	r1, #32
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <StartBlink01+0x24>)
 800097c:	f000 fd63 	bl	8001446 <HAL_GPIO_TogglePin>
		osDelay(Led_Delay * Delay_Multiplier);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <StartBlink01+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <StartBlink01+0x2c>)
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f002 fa72 	bl	8002e76 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000992:	e7f1      	b.n	8000978 <StartBlink01+0x8>
 8000994:	40020000 	.word	0x40020000
 8000998:	20000000 	.word	0x20000000
 800099c:	20000004 	.word	0x20000004

080009a0 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void const * argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  if (Delay_Multiplier == -1)
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <StartBlink02+0x4c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d118      	bne.n	80009e4 <StartBlink02+0x44>
	  {
		  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <StartBlink02+0x50>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f04f 31ff 	mov.w	r1, #4294967295
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fb5a 	bl	8003074 <osSemaphoreWait>
		  osDelay(5000);
 80009c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80009c4:	f002 fa57 	bl	8002e76 <osDelay>
		  Delay_Multiplier = 4;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <StartBlink02+0x4c>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	601a      	str	r2, [r3, #0]
		  char *str2 = ">02> Multiplier set to 4\r\n";
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <StartBlink02+0x54>)
 80009d0:	60fb      	str	r3, [r7, #12]
		  printf(str2);
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f005 fc08 	bl	80061e8 <iprintf>
		  osSemaphoreRelease(myBinarySem01Handle);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <StartBlink02+0x50>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fb97 	bl	8003110 <osSemaphoreRelease>
 80009e2:	e7e1      	b.n	80009a8 <StartBlink02+0x8>
	  }
	  else
	  {
		  osDelay(0);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f002 fa46 	bl	8002e76 <osDelay>
	  if (Delay_Multiplier == -1)
 80009ea:	e7dd      	b.n	80009a8 <StartBlink02+0x8>
 80009ec:	20000004 	.word	0x20000004
 80009f0:	2000459c 	.word	0x2000459c
 80009f4:	08007048 	.word	0x08007048

080009f8 <StartReadButton03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadButton03 */
void StartReadButton03(void const * argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadButton03 */
	/* Infinite loop */
	osSemaphoreRelease(myBinarySem01Handle);
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <StartReadButton03+0x94>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 fb83 	bl	8003110 <osSemaphoreRelease>
	for(;;)
	{
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	4820      	ldr	r0, [pc, #128]	; (8000a90 <StartReadButton03+0x98>)
 8000a10:	f000 fce8 	bl	80013e4 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d008      	beq.n	8000a2c <StartReadButton03+0x34>
		{
			osSemaphoreRelease(myBinarySem01Handle);
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <StartReadButton03+0x94>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 fb76 	bl	8003110 <osSemaphoreRelease>
			osDelay(0);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f002 fa26 	bl	8002e76 <osDelay>
 8000a2a:	e02a      	b.n	8000a82 <StartReadButton03+0x8a>
		}
		else
		{
			// Button pushed
			if (osSemaphoreWait(myBinarySem01Handle, 10U) == osOK)
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <StartReadButton03+0x94>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	210a      	movs	r1, #10
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fb1e 	bl	8003074 <osSemaphoreWait>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d121      	bne.n	8000a82 <StartReadButton03+0x8a>
			{
				osTimerStop(onceTimerHandle);
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <StartReadButton03+0x9c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 faa6 	bl	8002f94 <osTimerStop>
				osTimerStart(onceTimerHandle, 5000U);
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <StartReadButton03+0x9c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fa59 	bl	8002f08 <osTimerStart>
				char *str3 = "One Shot Timer started\r\n";
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <StartReadButton03+0xa0>)
 8000a58:	60fb      	str	r3, [r7, #12]
				printf(str3);
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f005 fbc4 	bl	80061e8 <iprintf>
				if (Delay_Multiplier != 1)
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <StartReadButton03+0xa4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d007      	beq.n	8000a78 <StartReadButton03+0x80>
				{
					Delay_Multiplier = 1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <StartReadButton03+0xa4>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
					char *str3 = "> Multiplier set to 1\r\n";
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <StartReadButton03+0xa8>)
 8000a70:	60bb      	str	r3, [r7, #8]
					printf(str3);
 8000a72:	68b8      	ldr	r0, [r7, #8]
 8000a74:	f005 fbb8 	bl	80061e8 <iprintf>
				}
				osSemaphoreRelease(myBinarySem01Handle);
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <StartReadButton03+0x94>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fb47 	bl	8003110 <osSemaphoreRelease>
			}

		}
		osDelay(10);
 8000a82:	200a      	movs	r0, #10
 8000a84:	f002 f9f7 	bl	8002e76 <osDelay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000a88:	e7bf      	b.n	8000a0a <StartReadButton03+0x12>
 8000a8a:	bf00      	nop
 8000a8c:	2000459c 	.word	0x2000459c
 8000a90:	40020800 	.word	0x40020800
 8000a94:	20004598 	.word	0x20004598
 8000a98:	08007064 	.word	0x08007064
 8000a9c:	20000004 	.word	0x20000004
 8000aa0:	08007080 	.word	0x08007080

08000aa4 <PTCallback>:
  /* USER CODE END StartReadButton03 */
}

/* PTCallback function */
void PTCallback(void const * argument)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
	//HAL_UART_Transmit(&huart2, "Sending from PERIODIC TIMER\r\n", 29, 10);
  /* USER CODE END PTCallback */
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <OTCallback>:

/* OTCallback function */
void OTCallback(void const * argument)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OTCallback */
	Delay_Multiplier = 4;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <OTCallback+0x20>)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	601a      	str	r2, [r3, #0]
	char *str3 = ">>>> Multiplier set to 4\r\n";
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <OTCallback+0x24>)
 8000ac8:	60fb      	str	r3, [r7, #12]
	printf(str3);
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f005 fb8c 	bl	80061e8 <iprintf>
  /* USER CODE END OTCallback */
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	08007098 	.word	0x08007098

08000ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000af2:	f000 f9e3 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40001000 	.word	0x40001000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <Error_Handler+0x6>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_MspInit+0x54>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <HAL_MspInit+0x54>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x54>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_MspInit+0x54>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_MspInit+0x54>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_MspInit+0x54>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	f06f 0001 	mvn.w	r0, #1
 8000b52:	f000 fa8b 	bl	800106c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d12b      	bne.n	8000bde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000bda:	f000 fa71 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	; 0x30
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2036      	movs	r0, #54	; 0x36
 8000c0a:	f000 fa2f 	bl	800106c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c0e:	2036      	movs	r0, #54	; 0x36
 8000c10:	f000 fa48 	bl	80010a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	6413      	str	r3, [r2, #64]	; 0x40
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_InitTick+0xa4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f003 0310 	and.w	r3, r3, #16
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c30:	f107 0210 	add.w	r2, r7, #16
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fd88 	bl	8001750 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c40:	f000 fd5e 	bl	8001700 <HAL_RCC_GetPCLK1Freq>
 8000c44:	4603      	mov	r3, r0
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <HAL_InitTick+0xa8>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9b      	lsrs	r3, r3, #18
 8000c54:	3b01      	subs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_InitTick+0xac>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <HAL_InitTick+0xb0>)
 8000c5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_InitTick+0xac>)
 8000c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_InitTick+0xac>)
 8000c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_InitTick+0xac>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_InitTick+0xac>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <HAL_InitTick+0xac>)
 8000c7a:	f001 f995 	bl	8001fa8 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d104      	bne.n	8000c8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <HAL_InitTick+0xac>)
 8000c86:	f001 f9c4 	bl	8002012 <HAL_TIM_Base_Start_IT>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3730      	adds	r7, #48	; 0x30
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	200045ec 	.word	0x200045ec
 8000ca4:	40001000 	.word	0x40001000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <TIM6_DAC_IRQHandler+0x10>)
 8000cda:	f001 f9be 	bl	800205a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200045ec 	.word	0x200045ec

08000ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
	}

return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_isatty>:

int _isatty(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f005 f9d6 	bl	800616c <__errno>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20020000 	.word	0x20020000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	20000740 	.word	0x20000740
 8000df4:	20004678 	.word	0x20004678

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <SystemInit+0x28>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <SystemInit+0x28>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SystemInit+0x28>)
 8000e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e12:	609a      	str	r2, [r3, #8]
#endif
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e2a:	e003      	b.n	8000e34 <LoopCopyDataInit>

08000e2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e32:	3104      	adds	r1, #4

08000e34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e3c:	d3f6      	bcc.n	8000e2c <CopyDataInit>
  ldr  r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e40:	e002      	b.n	8000e48 <LoopFillZerobss>

08000e42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e44:	f842 3b04 	str.w	r3, [r2], #4

08000e48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e4c:	d3f9      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd3 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f005 f991 	bl	8006178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fbf3 	bl	8000640 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e60:	08007190 	.word	0x08007190
  ldr  r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e68:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000e6c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000e70:	20004674 	.word	0x20004674

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f8d8 	bl	8001056 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fea4 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe2e 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000010 	.word	0x20000010
 8000ee0:	2000462c 	.word	0x2000462c

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000462c 	.word	0x2000462c

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff4c 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107e:	f7ff ff61 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 8001082:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	6978      	ldr	r0, [r7, #20]
 800108a:	f7ff ffb1 	bl	8000ff0 <NVIC_EncodePriority>
 800108e:	4602      	mov	r2, r0
 8001090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff80 	bl	8000f9c <__NVIC_SetPriority>
}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff54 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	e165      	b.n	80013a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f040 8154 	bne.w	80013a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d00b      	beq.n	800111a <HAL_GPIO_Init+0x5a>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110e:	2b11      	cmp	r3, #17
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b12      	cmp	r3, #18
 8001118:	d130      	bne.n	800117c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0xfc>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b12      	cmp	r3, #18
 80011ba:	d123      	bne.n	8001204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	69b9      	ldr	r1, [r7, #24]
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0203 	and.w	r2, r3, #3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80ae 	beq.w	80013a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_GPIO_Init+0x2fc>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a5b      	ldr	r2, [pc, #364]	; (80013bc <HAL_GPIO_Init+0x2fc>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b59      	ldr	r3, [pc, #356]	; (80013bc <HAL_GPIO_Init+0x2fc>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001262:	4a57      	ldr	r2, [pc, #348]	; (80013c0 <HAL_GPIO_Init+0x300>)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4e      	ldr	r2, [pc, #312]	; (80013c4 <HAL_GPIO_Init+0x304>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d025      	beq.n	80012da <HAL_GPIO_Init+0x21a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4d      	ldr	r2, [pc, #308]	; (80013c8 <HAL_GPIO_Init+0x308>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d01f      	beq.n	80012d6 <HAL_GPIO_Init+0x216>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4c      	ldr	r2, [pc, #304]	; (80013cc <HAL_GPIO_Init+0x30c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x212>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_GPIO_Init+0x310>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x20e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4a      	ldr	r2, [pc, #296]	; (80013d4 <HAL_GPIO_Init+0x314>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x20a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a49      	ldr	r2, [pc, #292]	; (80013d8 <HAL_GPIO_Init+0x318>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x206>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a48      	ldr	r2, [pc, #288]	; (80013dc <HAL_GPIO_Init+0x31c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x202>
 80012be:	2306      	movs	r3, #6
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x21c>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4934      	ldr	r1, [pc, #208]	; (80013c0 <HAL_GPIO_Init+0x300>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_GPIO_Init+0x320>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800131e:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <HAL_GPIO_Init+0x320>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <HAL_GPIO_Init+0x320>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <HAL_GPIO_Init+0x320>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_GPIO_Init+0x320>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_GPIO_Init+0x320>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_GPIO_Init+0x320>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800139c:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_GPIO_Init+0x320>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae96 	bls.w	80010dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	3724      	adds	r7, #36	; 0x24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40013800 	.word	0x40013800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40021400 	.word	0x40021400
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	401a      	ands	r2, r3
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	429a      	cmp	r2, r3
 800145e:	d104      	bne.n	800146a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	041a      	lsls	r2, r3, #16
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001468:	e002      	b.n	8001470 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_PWREx_EnableOverDrive+0x90>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <HAL_PWREx_EnableOverDrive+0x90>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_PWREx_EnableOverDrive+0x90>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_PWREx_EnableOverDrive+0x94>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a8:	f7ff fd1c 	bl	8000ee4 <HAL_GetTick>
 80014ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ae:	e009      	b.n	80014c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014b0:	f7ff fd18 	bl	8000ee4 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014be:	d901      	bls.n	80014c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e01f      	b.n	8001504 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_PWREx_EnableOverDrive+0x98>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d1ee      	bne.n	80014b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d8:	f7ff fd04 	bl	8000ee4 <HAL_GetTick>
 80014dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014de:	e009      	b.n	80014f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014e0:	f7ff fd00 	bl	8000ee4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ee:	d901      	bls.n	80014f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e007      	b.n	8001504 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_PWREx_EnableOverDrive+0x98>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001500:	d1ee      	bne.n	80014e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	420e0040 	.word	0x420e0040
 8001514:	40007000 	.word	0x40007000
 8001518:	420e0044 	.word	0x420e0044

0800151c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0cc      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d90c      	bls.n	8001558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800157a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d044      	beq.n	800163c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d119      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d003      	beq.n	80015da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e067      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4934      	ldr	r1, [pc, #208]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff fc6a 	bl	8000ee4 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	e00a      	b.n	800162a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff fc66 	bl	8000ee4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e04f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 020c 	and.w	r2, r3, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d1eb      	bne.n	8001614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d20c      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f887 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 80016a6:	4601      	mov	r1, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	fa21 f303 	lsr.w	r3, r1, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fa96 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00
 80016d8:	40023800 	.word	0x40023800
 80016dc:	080070d0 	.word	0x080070d0
 80016e0:	20000008 	.word	0x20000008
 80016e4:	2000000c 	.word	0x2000000c

080016e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_RCC_GetHCLKFreq+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008

08001700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001704:	f7ff fff0 	bl	80016e8 <HAL_RCC_GetHCLKFreq>
 8001708:	4601      	mov	r1, r0
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	0a9b      	lsrs	r3, r3, #10
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	080070e0 	.word	0x080070e0

08001728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800172c:	f7ff ffdc 	bl	80016e8 <HAL_RCC_GetHCLKFreq>
 8001730:	4601      	mov	r1, r0
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	0b5b      	lsrs	r3, r3, #13
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_RCC_GetPCLK2Freq+0x24>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	080070e0 	.word	0x080070e0

08001750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	220f      	movs	r2, #15
 800175e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_GetClockConfig+0x5c>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_RCC_GetClockConfig+0x5c>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_RCC_GetClockConfig+0x5c>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_GetClockConfig+0x5c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <HAL_RCC_GetClockConfig+0x60>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 020f 	and.w	r2, r3, #15
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	601a      	str	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ce:	4bc6      	ldr	r3, [pc, #792]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	f200 817e 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x324>
 80017dc:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	08001819 	.word	0x08001819
 80017e8:	08001ad9 	.word	0x08001ad9
 80017ec:	08001ad9 	.word	0x08001ad9
 80017f0:	08001ad9 	.word	0x08001ad9
 80017f4:	0800181f 	.word	0x0800181f
 80017f8:	08001ad9 	.word	0x08001ad9
 80017fc:	08001ad9 	.word	0x08001ad9
 8001800:	08001ad9 	.word	0x08001ad9
 8001804:	08001825 	.word	0x08001825
 8001808:	08001ad9 	.word	0x08001ad9
 800180c:	08001ad9 	.word	0x08001ad9
 8001810:	08001ad9 	.word	0x08001ad9
 8001814:	08001981 	.word	0x08001981
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4bb4      	ldr	r3, [pc, #720]	; (8001aec <HAL_RCC_GetSysClockFreq+0x338>)
 800181a:	613b      	str	r3, [r7, #16]
       break;
 800181c:	e15f      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181e:	4bb4      	ldr	r3, [pc, #720]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001820:	613b      	str	r3, [r7, #16]
      break;
 8001822:	e15c      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001824:	4bb0      	ldr	r3, [pc, #704]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800182c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182e:	4bae      	ldr	r3, [pc, #696]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d04a      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4bab      	ldr	r3, [pc, #684]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	ea03 0501 	and.w	r5, r3, r1
 8001850:	ea04 0602 	and.w	r6, r4, r2
 8001854:	4629      	mov	r1, r5
 8001856:	4632      	mov	r2, r6
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	0154      	lsls	r4, r2, #5
 8001862:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001866:	014b      	lsls	r3, r1, #5
 8001868:	4619      	mov	r1, r3
 800186a:	4622      	mov	r2, r4
 800186c:	1b49      	subs	r1, r1, r5
 800186e:	eb62 0206 	sbc.w	r2, r2, r6
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	f04f 0400 	mov.w	r4, #0
 800187a:	0194      	lsls	r4, r2, #6
 800187c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001880:	018b      	lsls	r3, r1, #6
 8001882:	1a5b      	subs	r3, r3, r1
 8001884:	eb64 0402 	sbc.w	r4, r4, r2
 8001888:	f04f 0100 	mov.w	r1, #0
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	00e2      	lsls	r2, r4, #3
 8001892:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001896:	00d9      	lsls	r1, r3, #3
 8001898:	460b      	mov	r3, r1
 800189a:	4614      	mov	r4, r2
 800189c:	195b      	adds	r3, r3, r5
 800189e:	eb44 0406 	adc.w	r4, r4, r6
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	0262      	lsls	r2, r4, #9
 80018ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018b0:	0259      	lsls	r1, r3, #9
 80018b2:	460b      	mov	r3, r1
 80018b4:	4614      	mov	r4, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	4621      	mov	r1, r4
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f04f 0400 	mov.w	r4, #0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4623      	mov	r3, r4
 80018c4:	f7fe fcf4 	bl	80002b0 <__aeabi_uldivmod>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e049      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d0:	4b85      	ldr	r3, [pc, #532]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	099b      	lsrs	r3, r3, #6
 80018d6:	f04f 0400 	mov.w	r4, #0
 80018da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	ea03 0501 	and.w	r5, r3, r1
 80018e6:	ea04 0602 	and.w	r6, r4, r2
 80018ea:	4629      	mov	r1, r5
 80018ec:	4632      	mov	r2, r6
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	f04f 0400 	mov.w	r4, #0
 80018f6:	0154      	lsls	r4, r2, #5
 80018f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018fc:	014b      	lsls	r3, r1, #5
 80018fe:	4619      	mov	r1, r3
 8001900:	4622      	mov	r2, r4
 8001902:	1b49      	subs	r1, r1, r5
 8001904:	eb62 0206 	sbc.w	r2, r2, r6
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	f04f 0400 	mov.w	r4, #0
 8001910:	0194      	lsls	r4, r2, #6
 8001912:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	1a5b      	subs	r3, r3, r1
 800191a:	eb64 0402 	sbc.w	r4, r4, r2
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	00e2      	lsls	r2, r4, #3
 8001928:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800192c:	00d9      	lsls	r1, r3, #3
 800192e:	460b      	mov	r3, r1
 8001930:	4614      	mov	r4, r2
 8001932:	195b      	adds	r3, r3, r5
 8001934:	eb44 0406 	adc.w	r4, r4, r6
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	02a2      	lsls	r2, r4, #10
 8001942:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001946:	0299      	lsls	r1, r3, #10
 8001948:	460b      	mov	r3, r1
 800194a:	4614      	mov	r4, r2
 800194c:	4618      	mov	r0, r3
 800194e:	4621      	mov	r1, r4
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f04f 0400 	mov.w	r4, #0
 8001956:	461a      	mov	r2, r3
 8001958:	4623      	mov	r3, r4
 800195a:	f7fe fca9 	bl	80002b0 <__aeabi_uldivmod>
 800195e:	4603      	mov	r3, r0
 8001960:	460c      	mov	r4, r1
 8001962:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001964:	4b60      	ldr	r3, [pc, #384]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	613b      	str	r3, [r7, #16]
      break;
 800197e:	e0ae      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001980:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001988:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198a:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d04a      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b54      	ldr	r3, [pc, #336]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	f04f 0400 	mov.w	r4, #0
 80019a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	ea03 0501 	and.w	r5, r3, r1
 80019ac:	ea04 0602 	and.w	r6, r4, r2
 80019b0:	4629      	mov	r1, r5
 80019b2:	4632      	mov	r2, r6
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	0154      	lsls	r4, r2, #5
 80019be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019c2:	014b      	lsls	r3, r1, #5
 80019c4:	4619      	mov	r1, r3
 80019c6:	4622      	mov	r2, r4
 80019c8:	1b49      	subs	r1, r1, r5
 80019ca:	eb62 0206 	sbc.w	r2, r2, r6
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	f04f 0400 	mov.w	r4, #0
 80019d6:	0194      	lsls	r4, r2, #6
 80019d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019dc:	018b      	lsls	r3, r1, #6
 80019de:	1a5b      	subs	r3, r3, r1
 80019e0:	eb64 0402 	sbc.w	r4, r4, r2
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	00e2      	lsls	r2, r4, #3
 80019ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019f2:	00d9      	lsls	r1, r3, #3
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	195b      	adds	r3, r3, r5
 80019fa:	eb44 0406 	adc.w	r4, r4, r6
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	0262      	lsls	r2, r4, #9
 8001a08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a0c:	0259      	lsls	r1, r3, #9
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4614      	mov	r4, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	4621      	mov	r1, r4
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f04f 0400 	mov.w	r4, #0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	f7fe fc46 	bl	80002b0 <__aeabi_uldivmod>
 8001a24:	4603      	mov	r3, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e049      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	099b      	lsrs	r3, r3, #6
 8001a32:	f04f 0400 	mov.w	r4, #0
 8001a36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	ea03 0501 	and.w	r5, r3, r1
 8001a42:	ea04 0602 	and.w	r6, r4, r2
 8001a46:	4629      	mov	r1, r5
 8001a48:	4632      	mov	r2, r6
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	f04f 0400 	mov.w	r4, #0
 8001a52:	0154      	lsls	r4, r2, #5
 8001a54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a58:	014b      	lsls	r3, r1, #5
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	1b49      	subs	r1, r1, r5
 8001a60:	eb62 0206 	sbc.w	r2, r2, r6
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	f04f 0400 	mov.w	r4, #0
 8001a6c:	0194      	lsls	r4, r2, #6
 8001a6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a72:	018b      	lsls	r3, r1, #6
 8001a74:	1a5b      	subs	r3, r3, r1
 8001a76:	eb64 0402 	sbc.w	r4, r4, r2
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	00e2      	lsls	r2, r4, #3
 8001a84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a88:	00d9      	lsls	r1, r3, #3
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4614      	mov	r4, r2
 8001a8e:	195b      	adds	r3, r3, r5
 8001a90:	eb44 0406 	adc.w	r4, r4, r6
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	02a2      	lsls	r2, r4, #10
 8001a9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001aa2:	0299      	lsls	r1, r3, #10
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4621      	mov	r1, r4
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f04f 0400 	mov.w	r4, #0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	f7fe fbfb 	bl	80002b0 <__aeabi_uldivmod>
 8001aba:	4603      	mov	r3, r0
 8001abc:	460c      	mov	r4, r1
 8001abe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0f1b      	lsrs	r3, r3, #28
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	613b      	str	r3, [r7, #16]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_GetSysClockFreq+0x338>)
 8001ada:	613b      	str	r3, [r7, #16]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	693b      	ldr	r3, [r7, #16]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8083 	beq.w	8001c14 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b0e:	4b95      	ldr	r3, [pc, #596]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d019      	beq.n	8001b4e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b1a:	4b92      	ldr	r3, [pc, #584]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b26:	4b8f      	ldr	r3, [pc, #572]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b34:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d112      	bne.n	8001b66 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b40:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d05b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x11e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d157      	bne.n	8001c12 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e216      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x8a>
 8001b70:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7b      	ldr	r2, [pc, #492]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e01d      	b.n	8001bba <HAL_RCC_OscConfig+0xc6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0xae>
 8001b88:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a75      	ldr	r2, [pc, #468]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a72      	ldr	r2, [pc, #456]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0xc6>
 8001ba2:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6f      	ldr	r2, [pc, #444]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6c      	ldr	r2, [pc, #432]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d013      	beq.n	8001bea <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f98f 	bl	8000ee4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bca:	f7ff f98b 	bl	8000ee4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1db      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bdc:	4b61      	ldr	r3, [pc, #388]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0xd6>
 8001be8:	e014      	b.n	8001c14 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f97b 	bl	8000ee4 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf2:	f7ff f977 	bl	8000ee4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e1c7      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c04:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xfe>
 8001c10:	e000      	b.n	8001c14 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d06f      	beq.n	8001d00 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d017      	beq.n	8001c5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c2c:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d105      	bne.n	8001c44 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c38:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00b      	beq.n	8001c5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c44:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	d11c      	bne.n	8001c8a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c50:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d116      	bne.n	8001c8a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5c:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_OscConfig+0x180>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e18f      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4938      	ldr	r1, [pc, #224]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c88:	e03a      	b.n	8001d00 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d020      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f924 	bl	8000ee4 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f920 	bl	8000ee4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e170      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4925      	ldr	r1, [pc, #148]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
 8001cd2:	e015      	b.n	8001d00 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff f903 	bl	8000ee4 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff f8ff 	bl	8000ee4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e14f      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d037      	beq.n	8001d7c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d016      	beq.n	8001d42 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_RCC_OscConfig+0x278>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f8e3 	bl	8000ee4 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d22:	f7ff f8df 	bl	8000ee4 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e12f      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x22e>
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_RCC_OscConfig+0x278>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff f8cc 	bl	8000ee4 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4e:	e00f      	b.n	8001d70 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff f8c8 	bl	8000ee4 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d908      	bls.n	8001d70 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e118      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	42470000 	.word	0x42470000
 8001d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	4b8a      	ldr	r3, [pc, #552]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1e9      	bne.n	8001d50 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8097 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4b83      	ldr	r3, [pc, #524]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10f      	bne.n	8001dba <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a7e      	ldr	r2, [pc, #504]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc6:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a75      	ldr	r2, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f887 	bl	8000ee4 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff f883 	bl	8000ee4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0d3      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x4ac>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x31a>
 8001e00:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x354>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x33c>
 8001e16:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	4a60      	ldr	r2, [pc, #384]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6713      	str	r3, [r2, #112]	; 0x70
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0x354>
 8001e30:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e34:	4a59      	ldr	r2, [pc, #356]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3c:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e42:	f023 0304 	bic.w	r3, r3, #4
 8001e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d015      	beq.n	8001e7c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff f848 	bl	8000ee4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7ff f844 	bl	8000ee4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e092      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ee      	beq.n	8001e58 <HAL_RCC_OscConfig+0x364>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff f832 	bl	8000ee4 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff f82e 	bl	8000ee4 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e07c      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ee      	bne.n	8001e84 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d068      	beq.n	8001f92 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d060      	beq.n	8001f8e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d145      	bne.n	8001f60 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_RCC_OscConfig+0x4b0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff f803 	bl	8000ee4 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7fe ffff 	bl	8000ee4 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e04f      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	019b      	lsls	r3, r3, #6
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	071b      	lsls	r3, r3, #28
 8001f2c:	491b      	ldr	r1, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_RCC_OscConfig+0x4b0>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7fe ffd4 	bl	8000ee4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f40:	f7fe ffd0 	bl	8000ee4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e020      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x44c>
 8001f5e:	e018      	b.n	8001f92 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_RCC_OscConfig+0x4b0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe ffbd 	bl	8000ee4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe ffb9 	bl	8000ee4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e009      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_RCC_OscConfig+0x4a8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x47a>
 8001f8c:	e001      	b.n	8001f92 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42470060 	.word	0x42470060

08001fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e01d      	b.n	8001ff6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f815 	bl	8001ffe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 f968 	bl	80022bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b06      	cmp	r3, #6
 800203a:	d007      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b02      	cmp	r3, #2
 800206e:	d122      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d11b      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0202 	mvn.w	r2, #2
 8002086:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f8ee 	bl	800227e <HAL_TIM_IC_CaptureCallback>
 80020a2:	e005      	b.n	80020b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f8e0 	bl	800226a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f8f1 	bl	8002292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d122      	bne.n	800210a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d11b      	bne.n	800210a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f06f 0204 	mvn.w	r2, #4
 80020da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f8c4 	bl	800227e <HAL_TIM_IC_CaptureCallback>
 80020f6:	e005      	b.n	8002104 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f8b6 	bl	800226a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8c7 	bl	8002292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b08      	cmp	r3, #8
 8002116:	d122      	bne.n	800215e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b08      	cmp	r3, #8
 8002124:	d11b      	bne.n	800215e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f06f 0208 	mvn.w	r2, #8
 800212e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f89a 	bl	800227e <HAL_TIM_IC_CaptureCallback>
 800214a:	e005      	b.n	8002158 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f88c 	bl	800226a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f89d 	bl	8002292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b10      	cmp	r3, #16
 800216a:	d122      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b10      	cmp	r3, #16
 8002178:	d11b      	bne.n	80021b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f06f 0210 	mvn.w	r2, #16
 8002182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2208      	movs	r2, #8
 8002188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f870 	bl	800227e <HAL_TIM_IC_CaptureCallback>
 800219e:	e005      	b.n	80021ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f862 	bl	800226a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f873 	bl	8002292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10e      	bne.n	80021de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0201 	mvn.w	r2, #1
 80021d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe fc81 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d10e      	bne.n	800220a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f6:	2b80      	cmp	r3, #128	; 0x80
 80021f8:	d107      	bne.n	800220a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f903 	bl	8002410 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d10e      	bne.n	8002236 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d107      	bne.n	8002236 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800222e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f838 	bl	80022a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b20      	cmp	r3, #32
 8002242:	d10e      	bne.n	8002262 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b20      	cmp	r3, #32
 8002250:	d107      	bne.n	8002262 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f06f 0220 	mvn.w	r2, #32
 800225a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f8cd 	bl	80023fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a40      	ldr	r2, [pc, #256]	; (80023d0 <TIM_Base_SetConfig+0x114>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <TIM_Base_SetConfig+0x40>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022da:	d00f      	beq.n	80022fc <TIM_Base_SetConfig+0x40>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a3d      	ldr	r2, [pc, #244]	; (80023d4 <TIM_Base_SetConfig+0x118>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00b      	beq.n	80022fc <TIM_Base_SetConfig+0x40>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a3c      	ldr	r2, [pc, #240]	; (80023d8 <TIM_Base_SetConfig+0x11c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d007      	beq.n	80022fc <TIM_Base_SetConfig+0x40>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <TIM_Base_SetConfig+0x120>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d003      	beq.n	80022fc <TIM_Base_SetConfig+0x40>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3a      	ldr	r2, [pc, #232]	; (80023e0 <TIM_Base_SetConfig+0x124>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d108      	bne.n	800230e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2f      	ldr	r2, [pc, #188]	; (80023d0 <TIM_Base_SetConfig+0x114>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02b      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d027      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a2c      	ldr	r2, [pc, #176]	; (80023d4 <TIM_Base_SetConfig+0x118>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d023      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a2b      	ldr	r2, [pc, #172]	; (80023d8 <TIM_Base_SetConfig+0x11c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <TIM_Base_SetConfig+0x120>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01b      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <TIM_Base_SetConfig+0x124>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d017      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <TIM_Base_SetConfig+0x128>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <TIM_Base_SetConfig+0x12c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00f      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a26      	ldr	r2, [pc, #152]	; (80023ec <TIM_Base_SetConfig+0x130>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00b      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a25      	ldr	r2, [pc, #148]	; (80023f0 <TIM_Base_SetConfig+0x134>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <TIM_Base_SetConfig+0x138>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d003      	beq.n	800236e <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <TIM_Base_SetConfig+0x13c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d108      	bne.n	8002380 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <TIM_Base_SetConfig+0x114>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d003      	beq.n	80023b4 <TIM_Base_SetConfig+0xf8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <TIM_Base_SetConfig+0x124>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d103      	bne.n	80023bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	615a      	str	r2, [r3, #20]
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40010000 	.word	0x40010000
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40000c00 	.word	0x40000c00
 80023e0:	40010400 	.word	0x40010400
 80023e4:	40014000 	.word	0x40014000
 80023e8:	40014400 	.word	0x40014400
 80023ec:	40014800 	.word	0x40014800
 80023f0:	40001800 	.word	0x40001800
 80023f4:	40001c00 	.word	0x40001c00
 80023f8:	40002000 	.word	0x40002000

080023fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e03f      	b.n	80024b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fb8a 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f90b 	bl	8002684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800247c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800248c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800249c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b088      	sub	sp, #32
 80024c2:	af02      	add	r7, sp, #8
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	f040 8083 	bne.w	80025e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_UART_Transmit+0x2e>
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e07b      	b.n	80025e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Transmit+0x40>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e074      	b.n	80025e8 <HAL_UART_Transmit+0x12a>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2221      	movs	r2, #33	; 0x21
 8002510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002514:	f7fe fce6 	bl	8000ee4 <HAL_GetTick>
 8002518:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	88fa      	ldrh	r2, [r7, #6]
 8002524:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800252e:	e042      	b.n	80025b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002546:	d122      	bne.n	800258e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2200      	movs	r2, #0
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f84c 	bl	80025f0 <UART_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e042      	b.n	80025e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002574:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3302      	adds	r3, #2
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	e017      	b.n	80025b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	e013      	b.n	80025b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2200      	movs	r2, #0
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f829 	bl	80025f0 <UART_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e01f      	b.n	80025e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	60ba      	str	r2, [r7, #8]
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1b7      	bne.n	8002530 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f810 	bl	80025f0 <UART_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e006      	b.n	80025e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e000      	b.n	80025e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
  }
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002600:	e02c      	b.n	800265c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d028      	beq.n	800265c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0x30>
 8002610:	f7fe fc68 	bl	8000ee4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	429a      	cmp	r2, r3
 800261e:	d21d      	bcs.n	800265c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800262e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e00f      	b.n	800267c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4013      	ands	r3, r2
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	429a      	cmp	r2, r3
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	429a      	cmp	r2, r3
 8002678:	d0c3      	beq.n	8002602 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026c6:	f023 030c 	bic.w	r3, r3, #12
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	68f9      	ldr	r1, [r7, #12]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f2:	f040 818b 	bne.w	8002a0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4ac1      	ldr	r2, [pc, #772]	; (8002a00 <UART_SetConfig+0x37c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d005      	beq.n	800270c <UART_SetConfig+0x88>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4abf      	ldr	r2, [pc, #764]	; (8002a04 <UART_SetConfig+0x380>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f040 80bd 	bne.w	8002886 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800270c:	f7ff f80c 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8002710:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	461d      	mov	r5, r3
 8002716:	f04f 0600 	mov.w	r6, #0
 800271a:	46a8      	mov	r8, r5
 800271c:	46b1      	mov	r9, r6
 800271e:	eb18 0308 	adds.w	r3, r8, r8
 8002722:	eb49 0409 	adc.w	r4, r9, r9
 8002726:	4698      	mov	r8, r3
 8002728:	46a1      	mov	r9, r4
 800272a:	eb18 0805 	adds.w	r8, r8, r5
 800272e:	eb49 0906 	adc.w	r9, r9, r6
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800273e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002742:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002746:	4688      	mov	r8, r1
 8002748:	4691      	mov	r9, r2
 800274a:	eb18 0005 	adds.w	r0, r8, r5
 800274e:	eb49 0106 	adc.w	r1, r9, r6
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	461d      	mov	r5, r3
 8002758:	f04f 0600 	mov.w	r6, #0
 800275c:	196b      	adds	r3, r5, r5
 800275e:	eb46 0406 	adc.w	r4, r6, r6
 8002762:	461a      	mov	r2, r3
 8002764:	4623      	mov	r3, r4
 8002766:	f7fd fda3 	bl	80002b0 <__aeabi_uldivmod>
 800276a:	4603      	mov	r3, r0
 800276c:	460c      	mov	r4, r1
 800276e:	461a      	mov	r2, r3
 8002770:	4ba5      	ldr	r3, [pc, #660]	; (8002a08 <UART_SetConfig+0x384>)
 8002772:	fba3 2302 	umull	r2, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	461d      	mov	r5, r3
 8002780:	f04f 0600 	mov.w	r6, #0
 8002784:	46a9      	mov	r9, r5
 8002786:	46b2      	mov	sl, r6
 8002788:	eb19 0309 	adds.w	r3, r9, r9
 800278c:	eb4a 040a 	adc.w	r4, sl, sl
 8002790:	4699      	mov	r9, r3
 8002792:	46a2      	mov	sl, r4
 8002794:	eb19 0905 	adds.w	r9, r9, r5
 8002798:	eb4a 0a06 	adc.w	sl, sl, r6
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027b0:	4689      	mov	r9, r1
 80027b2:	4692      	mov	sl, r2
 80027b4:	eb19 0005 	adds.w	r0, r9, r5
 80027b8:	eb4a 0106 	adc.w	r1, sl, r6
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	461d      	mov	r5, r3
 80027c2:	f04f 0600 	mov.w	r6, #0
 80027c6:	196b      	adds	r3, r5, r5
 80027c8:	eb46 0406 	adc.w	r4, r6, r6
 80027cc:	461a      	mov	r2, r3
 80027ce:	4623      	mov	r3, r4
 80027d0:	f7fd fd6e 	bl	80002b0 <__aeabi_uldivmod>
 80027d4:	4603      	mov	r3, r0
 80027d6:	460c      	mov	r4, r1
 80027d8:	461a      	mov	r2, r3
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <UART_SetConfig+0x384>)
 80027dc:	fba3 1302 	umull	r1, r3, r3, r2
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	2164      	movs	r1, #100	; 0x64
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	3332      	adds	r3, #50	; 0x32
 80027ee:	4a86      	ldr	r2, [pc, #536]	; (8002a08 <UART_SetConfig+0x384>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027fc:	4498      	add	r8, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	461d      	mov	r5, r3
 8002802:	f04f 0600 	mov.w	r6, #0
 8002806:	46a9      	mov	r9, r5
 8002808:	46b2      	mov	sl, r6
 800280a:	eb19 0309 	adds.w	r3, r9, r9
 800280e:	eb4a 040a 	adc.w	r4, sl, sl
 8002812:	4699      	mov	r9, r3
 8002814:	46a2      	mov	sl, r4
 8002816:	eb19 0905 	adds.w	r9, r9, r5
 800281a:	eb4a 0a06 	adc.w	sl, sl, r6
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800282e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002832:	4689      	mov	r9, r1
 8002834:	4692      	mov	sl, r2
 8002836:	eb19 0005 	adds.w	r0, r9, r5
 800283a:	eb4a 0106 	adc.w	r1, sl, r6
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	461d      	mov	r5, r3
 8002844:	f04f 0600 	mov.w	r6, #0
 8002848:	196b      	adds	r3, r5, r5
 800284a:	eb46 0406 	adc.w	r4, r6, r6
 800284e:	461a      	mov	r2, r3
 8002850:	4623      	mov	r3, r4
 8002852:	f7fd fd2d 	bl	80002b0 <__aeabi_uldivmod>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	461a      	mov	r2, r3
 800285c:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <UART_SetConfig+0x384>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2164      	movs	r1, #100	; 0x64
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a65      	ldr	r2, [pc, #404]	; (8002a08 <UART_SetConfig+0x384>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 0207 	and.w	r2, r3, #7
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4442      	add	r2, r8
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e26f      	b.n	8002d66 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002886:	f7fe ff3b 	bl	8001700 <HAL_RCC_GetPCLK1Freq>
 800288a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	461d      	mov	r5, r3
 8002890:	f04f 0600 	mov.w	r6, #0
 8002894:	46a8      	mov	r8, r5
 8002896:	46b1      	mov	r9, r6
 8002898:	eb18 0308 	adds.w	r3, r8, r8
 800289c:	eb49 0409 	adc.w	r4, r9, r9
 80028a0:	4698      	mov	r8, r3
 80028a2:	46a1      	mov	r9, r4
 80028a4:	eb18 0805 	adds.w	r8, r8, r5
 80028a8:	eb49 0906 	adc.w	r9, r9, r6
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028c0:	4688      	mov	r8, r1
 80028c2:	4691      	mov	r9, r2
 80028c4:	eb18 0005 	adds.w	r0, r8, r5
 80028c8:	eb49 0106 	adc.w	r1, r9, r6
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	461d      	mov	r5, r3
 80028d2:	f04f 0600 	mov.w	r6, #0
 80028d6:	196b      	adds	r3, r5, r5
 80028d8:	eb46 0406 	adc.w	r4, r6, r6
 80028dc:	461a      	mov	r2, r3
 80028de:	4623      	mov	r3, r4
 80028e0:	f7fd fce6 	bl	80002b0 <__aeabi_uldivmod>
 80028e4:	4603      	mov	r3, r0
 80028e6:	460c      	mov	r4, r1
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <UART_SetConfig+0x384>)
 80028ec:	fba3 2302 	umull	r2, r3, r3, r2
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	461d      	mov	r5, r3
 80028fa:	f04f 0600 	mov.w	r6, #0
 80028fe:	46a9      	mov	r9, r5
 8002900:	46b2      	mov	sl, r6
 8002902:	eb19 0309 	adds.w	r3, r9, r9
 8002906:	eb4a 040a 	adc.w	r4, sl, sl
 800290a:	4699      	mov	r9, r3
 800290c:	46a2      	mov	sl, r4
 800290e:	eb19 0905 	adds.w	r9, r9, r5
 8002912:	eb4a 0a06 	adc.w	sl, sl, r6
 8002916:	f04f 0100 	mov.w	r1, #0
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800292a:	4689      	mov	r9, r1
 800292c:	4692      	mov	sl, r2
 800292e:	eb19 0005 	adds.w	r0, r9, r5
 8002932:	eb4a 0106 	adc.w	r1, sl, r6
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	461d      	mov	r5, r3
 800293c:	f04f 0600 	mov.w	r6, #0
 8002940:	196b      	adds	r3, r5, r5
 8002942:	eb46 0406 	adc.w	r4, r6, r6
 8002946:	461a      	mov	r2, r3
 8002948:	4623      	mov	r3, r4
 800294a:	f7fd fcb1 	bl	80002b0 <__aeabi_uldivmod>
 800294e:	4603      	mov	r3, r0
 8002950:	460c      	mov	r4, r1
 8002952:	461a      	mov	r2, r3
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <UART_SetConfig+0x384>)
 8002956:	fba3 1302 	umull	r1, r3, r3, r2
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2164      	movs	r1, #100	; 0x64
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	3332      	adds	r3, #50	; 0x32
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <UART_SetConfig+0x384>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002976:	4498      	add	r8, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	461d      	mov	r5, r3
 800297c:	f04f 0600 	mov.w	r6, #0
 8002980:	46a9      	mov	r9, r5
 8002982:	46b2      	mov	sl, r6
 8002984:	eb19 0309 	adds.w	r3, r9, r9
 8002988:	eb4a 040a 	adc.w	r4, sl, sl
 800298c:	4699      	mov	r9, r3
 800298e:	46a2      	mov	sl, r4
 8002990:	eb19 0905 	adds.w	r9, r9, r5
 8002994:	eb4a 0a06 	adc.w	sl, sl, r6
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029ac:	4689      	mov	r9, r1
 80029ae:	4692      	mov	sl, r2
 80029b0:	eb19 0005 	adds.w	r0, r9, r5
 80029b4:	eb4a 0106 	adc.w	r1, sl, r6
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	461d      	mov	r5, r3
 80029be:	f04f 0600 	mov.w	r6, #0
 80029c2:	196b      	adds	r3, r5, r5
 80029c4:	eb46 0406 	adc.w	r4, r6, r6
 80029c8:	461a      	mov	r2, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	f7fd fc70 	bl	80002b0 <__aeabi_uldivmod>
 80029d0:	4603      	mov	r3, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <UART_SetConfig+0x384>)
 80029d8:	fba3 1302 	umull	r1, r3, r3, r2
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	2164      	movs	r1, #100	; 0x64
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	3332      	adds	r3, #50	; 0x32
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <UART_SetConfig+0x384>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	f003 0207 	and.w	r2, r3, #7
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4442      	add	r2, r8
 80029fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80029fe:	e1b2      	b.n	8002d66 <UART_SetConfig+0x6e2>
 8002a00:	40011000 	.word	0x40011000
 8002a04:	40011400 	.word	0x40011400
 8002a08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4ad7      	ldr	r2, [pc, #860]	; (8002d70 <UART_SetConfig+0x6ec>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d005      	beq.n	8002a22 <UART_SetConfig+0x39e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4ad6      	ldr	r2, [pc, #856]	; (8002d74 <UART_SetConfig+0x6f0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	f040 80d1 	bne.w	8002bc4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a22:	f7fe fe81 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8002a26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	f04f 0b00 	mov.w	fp, #0
 8002a30:	46d0      	mov	r8, sl
 8002a32:	46d9      	mov	r9, fp
 8002a34:	eb18 0308 	adds.w	r3, r8, r8
 8002a38:	eb49 0409 	adc.w	r4, r9, r9
 8002a3c:	4698      	mov	r8, r3
 8002a3e:	46a1      	mov	r9, r4
 8002a40:	eb18 080a 	adds.w	r8, r8, sl
 8002a44:	eb49 090b 	adc.w	r9, r9, fp
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a5c:	4688      	mov	r8, r1
 8002a5e:	4691      	mov	r9, r2
 8002a60:	eb1a 0508 	adds.w	r5, sl, r8
 8002a64:	eb4b 0609 	adc.w	r6, fp, r9
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	0094      	lsls	r4, r2, #2
 8002a7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a80:	008b      	lsls	r3, r1, #2
 8002a82:	461a      	mov	r2, r3
 8002a84:	4623      	mov	r3, r4
 8002a86:	4628      	mov	r0, r5
 8002a88:	4631      	mov	r1, r6
 8002a8a:	f7fd fc11 	bl	80002b0 <__aeabi_uldivmod>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	460c      	mov	r4, r1
 8002a92:	461a      	mov	r2, r3
 8002a94:	4bb8      	ldr	r3, [pc, #736]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002a96:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	469b      	mov	fp, r3
 8002aa4:	f04f 0c00 	mov.w	ip, #0
 8002aa8:	46d9      	mov	r9, fp
 8002aaa:	46e2      	mov	sl, ip
 8002aac:	eb19 0309 	adds.w	r3, r9, r9
 8002ab0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	46a2      	mov	sl, r4
 8002ab8:	eb19 090b 	adds.w	r9, r9, fp
 8002abc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002acc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ad0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ad4:	4689      	mov	r9, r1
 8002ad6:	4692      	mov	sl, r2
 8002ad8:	eb1b 0509 	adds.w	r5, fp, r9
 8002adc:	eb4c 060a 	adc.w	r6, ip, sl
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	f04f 0400 	mov.w	r4, #0
 8002af2:	0094      	lsls	r4, r2, #2
 8002af4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002af8:	008b      	lsls	r3, r1, #2
 8002afa:	461a      	mov	r2, r3
 8002afc:	4623      	mov	r3, r4
 8002afe:	4628      	mov	r0, r5
 8002b00:	4631      	mov	r1, r6
 8002b02:	f7fd fbd5 	bl	80002b0 <__aeabi_uldivmod>
 8002b06:	4603      	mov	r3, r0
 8002b08:	460c      	mov	r4, r1
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b9a      	ldr	r3, [pc, #616]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2164      	movs	r1, #100	; 0x64
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	3332      	adds	r3, #50	; 0x32
 8002b20:	4a95      	ldr	r2, [pc, #596]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b2c:	4498      	add	r8, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	469b      	mov	fp, r3
 8002b32:	f04f 0c00 	mov.w	ip, #0
 8002b36:	46d9      	mov	r9, fp
 8002b38:	46e2      	mov	sl, ip
 8002b3a:	eb19 0309 	adds.w	r3, r9, r9
 8002b3e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b42:	4699      	mov	r9, r3
 8002b44:	46a2      	mov	sl, r4
 8002b46:	eb19 090b 	adds.w	r9, r9, fp
 8002b4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b62:	4689      	mov	r9, r1
 8002b64:	4692      	mov	sl, r2
 8002b66:	eb1b 0509 	adds.w	r5, fp, r9
 8002b6a:	eb4c 060a 	adc.w	r6, ip, sl
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4619      	mov	r1, r3
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	0094      	lsls	r4, r2, #2
 8002b82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b86:	008b      	lsls	r3, r1, #2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	4631      	mov	r1, r6
 8002b90:	f7fd fb8e 	bl	80002b0 <__aeabi_uldivmod>
 8002b94:	4603      	mov	r3, r0
 8002b96:	460c      	mov	r4, r1
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b77      	ldr	r3, [pc, #476]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	2164      	movs	r1, #100	; 0x64
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	3332      	adds	r3, #50	; 0x32
 8002bae:	4a72      	ldr	r2, [pc, #456]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4442      	add	r2, r8
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	e0d0      	b.n	8002d66 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bc4:	f7fe fd9c 	bl	8001700 <HAL_RCC_GetPCLK1Freq>
 8002bc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	469a      	mov	sl, r3
 8002bce:	f04f 0b00 	mov.w	fp, #0
 8002bd2:	46d0      	mov	r8, sl
 8002bd4:	46d9      	mov	r9, fp
 8002bd6:	eb18 0308 	adds.w	r3, r8, r8
 8002bda:	eb49 0409 	adc.w	r4, r9, r9
 8002bde:	4698      	mov	r8, r3
 8002be0:	46a1      	mov	r9, r4
 8002be2:	eb18 080a 	adds.w	r8, r8, sl
 8002be6:	eb49 090b 	adc.w	r9, r9, fp
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bfe:	4688      	mov	r8, r1
 8002c00:	4691      	mov	r9, r2
 8002c02:	eb1a 0508 	adds.w	r5, sl, r8
 8002c06:	eb4b 0609 	adc.w	r6, fp, r9
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	0094      	lsls	r4, r2, #2
 8002c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c22:	008b      	lsls	r3, r1, #2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	4628      	mov	r0, r5
 8002c2a:	4631      	mov	r1, r6
 8002c2c:	f7fd fb40 	bl	80002b0 <__aeabi_uldivmod>
 8002c30:	4603      	mov	r3, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002c38:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	469b      	mov	fp, r3
 8002c46:	f04f 0c00 	mov.w	ip, #0
 8002c4a:	46d9      	mov	r9, fp
 8002c4c:	46e2      	mov	sl, ip
 8002c4e:	eb19 0309 	adds.w	r3, r9, r9
 8002c52:	eb4a 040a 	adc.w	r4, sl, sl
 8002c56:	4699      	mov	r9, r3
 8002c58:	46a2      	mov	sl, r4
 8002c5a:	eb19 090b 	adds.w	r9, r9, fp
 8002c5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c76:	4689      	mov	r9, r1
 8002c78:	4692      	mov	sl, r2
 8002c7a:	eb1b 0509 	adds.w	r5, fp, r9
 8002c7e:	eb4c 060a 	adc.w	r6, ip, sl
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4619      	mov	r1, r3
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f04f 0400 	mov.w	r4, #0
 8002c94:	0094      	lsls	r4, r2, #2
 8002c96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c9a:	008b      	lsls	r3, r1, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	f7fd fb04 	bl	80002b0 <__aeabi_uldivmod>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	2164      	movs	r1, #100	; 0x64
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	3332      	adds	r3, #50	; 0x32
 8002cc2:	4a2d      	ldr	r2, [pc, #180]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cce:	4498      	add	r8, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	469b      	mov	fp, r3
 8002cd4:	f04f 0c00 	mov.w	ip, #0
 8002cd8:	46d9      	mov	r9, fp
 8002cda:	46e2      	mov	sl, ip
 8002cdc:	eb19 0309 	adds.w	r3, r9, r9
 8002ce0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ce4:	4699      	mov	r9, r3
 8002ce6:	46a2      	mov	sl, r4
 8002ce8:	eb19 090b 	adds.w	r9, r9, fp
 8002cec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d04:	4689      	mov	r9, r1
 8002d06:	4692      	mov	sl, r2
 8002d08:	eb1b 0509 	adds.w	r5, fp, r9
 8002d0c:	eb4c 060a 	adc.w	r6, ip, sl
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4619      	mov	r1, r3
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	f04f 0400 	mov.w	r4, #0
 8002d22:	0094      	lsls	r4, r2, #2
 8002d24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d28:	008b      	lsls	r3, r1, #2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	4628      	mov	r0, r5
 8002d30:	4631      	mov	r1, r6
 8002d32:	f7fd fabd 	bl	80002b0 <__aeabi_uldivmod>
 8002d36:	4603      	mov	r3, r0
 8002d38:	460c      	mov	r4, r1
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2164      	movs	r1, #100	; 0x64
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	3332      	adds	r3, #50	; 0x32
 8002d50:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <UART_SetConfig+0x6f4>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4442      	add	r2, r8
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	e7ff      	b.n	8002d66 <UART_SetConfig+0x6e2>
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d70:	40011000 	.word	0x40011000
 8002d74:	40011400 	.word	0x40011400
 8002d78:	51eb851f 	.word	0x51eb851f

08002d7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d8e:	2b84      	cmp	r3, #132	; 0x84
 8002d90:	d005      	beq.n	8002d9e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3303      	adds	r3, #3
 8002d9c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002db2:	f3ef 8305 	mrs	r3, IPSR
 8002db6:	607b      	str	r3, [r7, #4]
  return(result);
 8002db8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002dd4:	f001 fb82 	bl	80044dc <vTaskStartScheduler>
  
  return osOK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de0:	b089      	sub	sp, #36	; 0x24
 8002de2:	af04      	add	r7, sp, #16
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <osThreadCreate+0x54>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01c      	beq.n	8002e32 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685c      	ldr	r4, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681d      	ldr	r5, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691e      	ldr	r6, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ffb6 	bl	8002d7c <makeFreeRtosPriority>
 8002e10:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e1a:	9202      	str	r2, [sp, #8]
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	9100      	str	r1, [sp, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4632      	mov	r2, r6
 8002e24:	4629      	mov	r1, r5
 8002e26:	4620      	mov	r0, r4
 8002e28:	f001 f994 	bl	8004154 <xTaskCreateStatic>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e01c      	b.n	8002e6c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685c      	ldr	r4, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e3e:	b29e      	uxth	r6, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff98 	bl	8002d7c <makeFreeRtosPriority>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	4632      	mov	r2, r6
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f001 f9d3 	bl	8004208 <xTaskCreate>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d001      	beq.n	8002e6c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e000      	b.n	8002e6e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <osDelay+0x16>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	e000      	b.n	8002e8e <osDelay+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f001 faf0 	bl	8004474 <vTaskDelay>
  
  return osOK;
 8002e94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d013      	beq.n	8002ede <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <osTimerCreate+0x20>
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	e000      	b.n	8002ec2 <osTimerCreate+0x22>
 8002ec0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8002eca:	9201      	str	r2, [sp, #4]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	480b      	ldr	r0, [pc, #44]	; (8002f04 <osTimerCreate+0x64>)
 8002ed6:	f002 f9d2 	bl	800527e <xTimerCreateStatic>
 8002eda:	4603      	mov	r3, r0
 8002edc:	e00e      	b.n	8002efc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8002ede:	7afb      	ldrb	r3, [r7, #11]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <osTimerCreate+0x48>
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	e000      	b.n	8002eea <osTimerCreate+0x4a>
 8002ee8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <osTimerCreate+0x64>)
 8002ef6:	f002 f9a1 	bl	800523c <xTimerCreate>
 8002efa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	080070b4 	.word	0x080070b4

08002f08 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <osTimerStart+0x20>
    ticks = 1;
 8002f24:	2301      	movs	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002f28:	f7ff ff40 	bl	8002dac <inHandlerMode>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01b      	beq.n	8002f6a <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002f32:	f107 020c 	add.w	r2, r7, #12
 8002f36:	2300      	movs	r3, #0
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	2109      	movs	r1, #9
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f002 fa13 	bl	800536c <xTimerGenericCommand>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d002      	beq.n	8002f52 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8002f4c:	23ff      	movs	r3, #255	; 0xff
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e018      	b.n	8002f84 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <osTimerStart+0x7c>
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <osTimerStart+0x88>)
 8002f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	e00c      	b.n	8002f84 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	2104      	movs	r1, #4
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f002 f9f9 	bl	800536c <xTimerGenericCommand>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d001      	beq.n	8002f84 <osTimerStart+0x7c>
      result = osErrorOS;
 8002f80:	23ff      	movs	r3, #255	; 0xff
 8002f82:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002f84:	697b      	ldr	r3, [r7, #20]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8002fa4:	f7ff ff02 	bl	8002dac <inHandlerMode>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01a      	beq.n	8002fe4 <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8002fae:	f107 0208 	add.w	r2, r7, #8
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2108      	movs	r1, #8
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f002 f9d5 	bl	800536c <xTimerGenericCommand>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d001      	beq.n	8002fcc <osTimerStop+0x38>
      return osErrorOS;
 8002fc8:	23ff      	movs	r3, #255	; 0xff
 8002fca:	e019      	b.n	8003000 <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d015      	beq.n	8002ffe <osTimerStop+0x6a>
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <osTimerStop+0x74>)
 8002fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	e00c      	b.n	8002ffe <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2200      	movs	r2, #0
 8002fec:	2103      	movs	r1, #3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f002 f9bc 	bl	800536c <xTimerGenericCommand>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <osTimerStop+0x6a>
      result = osErrorOS;
 8002ffa:	23ff      	movs	r3, #255	; 0xff
 8002ffc:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af02      	add	r7, sp, #8
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10b      	bne.n	800303c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	2303      	movs	r3, #3
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	2001      	movs	r0, #1
 8003034:	f000 f9be 	bl	80033b4 <xQueueGenericCreateStatic>
 8003038:	4603      	mov	r3, r0
 800303a:	e016      	b.n	800306a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	e014      	b.n	800306a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d110      	bne.n	8003068 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003046:	2203      	movs	r2, #3
 8003048:	2100      	movs	r1, #0
 800304a:	2001      	movs	r0, #1
 800304c:	f000 fa25 	bl	800349a <xQueueGenericCreate>
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <osSemaphoreCreate+0x58>
 8003058:	2300      	movs	r3, #0
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fa7a 	bl	8003558 <xQueueGenericSend>
      return sema;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	e000      	b.n	800306a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003068:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	e03a      	b.n	8003102 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d103      	bne.n	80030a0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e009      	b.n	80030b4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <osSemaphoreWait+0x40>
      ticks = 1;
 80030b0:	2301      	movs	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80030b4:	f7ff fe7a 	bl	8002dac <inHandlerMode>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d017      	beq.n	80030ee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	461a      	mov	r2, r3
 80030c4:	2100      	movs	r1, #0
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fe42 	bl	8003d50 <xQueueReceiveFromISR>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80030d2:	23ff      	movs	r3, #255	; 0xff
 80030d4:	e015      	b.n	8003102 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d011      	beq.n	8003100 <osSemaphoreWait+0x8c>
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <osSemaphoreWait+0x98>)
 80030de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	e008      	b.n	8003100 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fd25 	bl	8003b40 <xQueueSemaphoreTake>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80030fc:	23ff      	movs	r3, #255	; 0xff
 80030fe:	e000      	b.n	8003102 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	e000ed04 	.word	0xe000ed04

08003110 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003120:	f7ff fe44 	bl	8002dac <inHandlerMode>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	4619      	mov	r1, r3
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fb9f 	bl	8003874 <xQueueGiveFromISR>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d001      	beq.n	8003140 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800313c:	23ff      	movs	r3, #255	; 0xff
 800313e:	e017      	b.n	8003170 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d013      	beq.n	800316e <osSemaphoreRelease+0x5e>
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <osSemaphoreRelease+0x68>)
 8003148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	e00a      	b.n	800316e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003158:	2300      	movs	r3, #0
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9fa 	bl	8003558 <xQueueGenericSend>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d001      	beq.n	800316e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800316a:	23ff      	movs	r3, #255	; 0xff
 800316c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f103 0208 	add.w	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f103 0208 	add.w	r2, r3, #8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f103 0208 	add.w	r2, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	601a      	str	r2, [r3, #0]
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d103      	bne.n	800323e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e00c      	b.n	8003258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3308      	adds	r3, #8
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e002      	b.n	800324c <vListInsert+0x2e>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	d2f6      	bcs.n	8003246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	601a      	str	r2, [r3, #0]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6892      	ldr	r2, [r2, #8]
 80032a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6852      	ldr	r2, [r2, #4]
 80032b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d103      	bne.n	80032c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	e7fe      	b.n	800330a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800330c:	f002 fc3e 	bl	8005b8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	441a      	add	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	3b01      	subs	r3, #1
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	441a      	add	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	22ff      	movs	r2, #255	; 0xff
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d114      	bne.n	800338c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01a      	beq.n	80033a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3310      	adds	r3, #16
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fb32 	bl	80049d8 <xTaskRemoveFromEventList>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d012      	beq.n	80033a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <xQueueGenericReset+0xcc>)
 800337c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	e009      	b.n	80033a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3310      	adds	r3, #16
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fef3 	bl	800317c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3324      	adds	r3, #36	; 0x24
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff feee 	bl	800317c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033a0:	f002 fc22 	bl	8005be8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033a4:	2301      	movs	r3, #1
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08e      	sub	sp, #56	; 0x38
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <xQueueGenericCreateStatic+0x28>
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033da:	e7fe      	b.n	80033da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <xQueueGenericCreateStatic+0x42>
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e7fe      	b.n	80033f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <xQueueGenericCreateStatic+0x4e>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <xQueueGenericCreateStatic+0x52>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <xQueueGenericCreateStatic+0x54>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <xQueueGenericCreateStatic+0x6c>
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	623b      	str	r3, [r7, #32]
 800341e:	e7fe      	b.n	800341e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <xQueueGenericCreateStatic+0x78>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <xQueueGenericCreateStatic+0x7c>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <xQueueGenericCreateStatic+0x7e>
 8003430:	2300      	movs	r3, #0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <xQueueGenericCreateStatic+0x96>
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	e7fe      	b.n	8003448 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800344a:	2348      	movs	r3, #72	; 0x48
 800344c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b48      	cmp	r3, #72	; 0x48
 8003452:	d009      	beq.n	8003468 <xQueueGenericCreateStatic+0xb4>
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	e7fe      	b.n	8003466 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003468:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800347c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f844 	bl	8003518 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003492:	4618      	mov	r0, r3
 8003494:	3730      	adds	r7, #48	; 0x30
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08a      	sub	sp, #40	; 0x28
 800349e:	af02      	add	r7, sp, #8
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	4613      	mov	r3, r2
 80034a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <xQueueGenericCreate+0x28>
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e004      	b.n	80034d8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	fb02 f303 	mul.w	r3, r2, r3
 80034d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3348      	adds	r3, #72	; 0x48
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fc6f 	bl	8005dc0 <pvPortMalloc>
 80034e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d011      	beq.n	800350e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3348      	adds	r3, #72	; 0x48
 80034f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034fc:	79fa      	ldrb	r2, [r7, #7]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f805 	bl	8003518 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800350e:	69bb      	ldr	r3, [r7, #24]
	}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e002      	b.n	800353a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003546:	2101      	movs	r1, #1
 8003548:	69b8      	ldr	r0, [r7, #24]
 800354a:	f7ff fecb 	bl	80032e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	; 0x38
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003566:	2300      	movs	r3, #0
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <xQueueGenericSend+0x30>
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
 8003586:	e7fe      	b.n	8003586 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <xQueueGenericSend+0x3e>
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <xQueueGenericSend+0x42>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <xQueueGenericSend+0x44>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <xQueueGenericSend+0x5c>
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
 80035b2:	e7fe      	b.n	80035b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d103      	bne.n	80035c2 <xQueueGenericSend+0x6a>
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <xQueueGenericSend+0x6e>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <xQueueGenericSend+0x70>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <xQueueGenericSend+0x88>
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	e7fe      	b.n	80035de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035e0:	f001 fbb0 	bl	8004d44 <xTaskGetSchedulerState>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <xQueueGenericSend+0x98>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <xQueueGenericSend+0x9c>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <xQueueGenericSend+0x9e>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <xQueueGenericSend+0xb6>
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e7fe      	b.n	800360c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800360e:	f002 fabd 	bl	8005b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <xQueueGenericSend+0xcc>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d129      	bne.n	8003678 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800362a:	f000 fc26 	bl	8003e7a <prvCopyDataToQueue>
 800362e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	3324      	adds	r3, #36	; 0x24
 800363c:	4618      	mov	r0, r3
 800363e:	f001 f9cb 	bl	80049d8 <xTaskRemoveFromEventList>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003648:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <xQueueGenericSend+0x1f0>)
 800364a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	e00a      	b.n	8003670 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003660:	4b39      	ldr	r3, [pc, #228]	; (8003748 <xQueueGenericSend+0x1f0>)
 8003662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003670:	f002 faba 	bl	8005be8 <vPortExitCritical>
				return pdPASS;
 8003674:	2301      	movs	r3, #1
 8003676:	e063      	b.n	8003740 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d103      	bne.n	8003686 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800367e:	f002 fab3 	bl	8005be8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003682:	2300      	movs	r3, #0
 8003684:	e05c      	b.n	8003740 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	2b00      	cmp	r3, #0
 800368a:	d106      	bne.n	800369a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4618      	mov	r0, r3
 8003692:	f001 fa03 	bl	8004a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003696:	2301      	movs	r3, #1
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800369a:	f002 faa5 	bl	8005be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800369e:	f000 ff81 	bl	80045a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036a2:	f002 fa73 	bl	8005b8c <vPortEnterCritical>
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	d103      	bne.n	80036bc <xQueueGenericSend+0x164>
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d103      	bne.n	80036d2 <xQueueGenericSend+0x17a>
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036d2:	f002 fa89 	bl	8005be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036d6:	1d3a      	adds	r2, r7, #4
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f9f2 	bl	8004ac8 <xTaskCheckForTimeOut>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d124      	bne.n	8003734 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ec:	f000 fcbd 	bl	800406a <prvIsQueueFull>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d018      	beq.n	8003728 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	3310      	adds	r3, #16
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f91c 	bl	800493c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003706:	f000 fc48 	bl	8003f9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800370a:	f000 ff59 	bl	80045c0 <xTaskResumeAll>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	f47f af7c 	bne.w	800360e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003716:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <xQueueGenericSend+0x1f0>)
 8003718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	e772      	b.n	800360e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372a:	f000 fc36 	bl	8003f9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800372e:	f000 ff47 	bl	80045c0 <xTaskResumeAll>
 8003732:	e76c      	b.n	800360e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003736:	f000 fc30 	bl	8003f9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800373a:	f000 ff41 	bl	80045c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800373e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003740:	4618      	mov	r0, r3
 8003742:	3738      	adds	r7, #56	; 0x38
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08e      	sub	sp, #56	; 0x38
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <xQueueGenericSendFromISR+0x2c>
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e7fe      	b.n	8003776 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <xQueueGenericSendFromISR+0x3a>
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <xQueueGenericSendFromISR+0x3e>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <xQueueGenericSendFromISR+0x40>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <xQueueGenericSendFromISR+0x58>
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	e7fe      	b.n	80037a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d103      	bne.n	80037b2 <xQueueGenericSendFromISR+0x66>
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <xQueueGenericSendFromISR+0x6a>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <xQueueGenericSendFromISR+0x6c>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <xQueueGenericSendFromISR+0x84>
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	e7fe      	b.n	80037ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037d0:	f002 fab8 	bl	8005d44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037d4:	f3ef 8211 	mrs	r2, BASEPRI
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	61ba      	str	r2, [r7, #24]
 80037ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <xQueueGenericSendFromISR+0xb6>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d12c      	bne.n	800385c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003812:	f000 fb32 	bl	8003e7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003816:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381e:	d112      	bne.n	8003846 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d016      	beq.n	8003856 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	3324      	adds	r3, #36	; 0x24
 800382c:	4618      	mov	r0, r3
 800382e:	f001 f8d3 	bl	80049d8 <xTaskRemoveFromEventList>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	e007      	b.n	8003856 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800384a:	3301      	adds	r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	b25a      	sxtb	r2, r3
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003856:	2301      	movs	r3, #1
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800385a:	e001      	b.n	8003860 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800385c:	2300      	movs	r3, #0
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800386c:	4618      	mov	r0, r3
 800386e:	3738      	adds	r7, #56	; 0x38
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <xQueueGiveFromISR+0x28>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	e7fe      	b.n	800389a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <xQueueGiveFromISR+0x44>
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e7fe      	b.n	80038b6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d103      	bne.n	80038c8 <xQueueGiveFromISR+0x54>
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <xQueueGiveFromISR+0x58>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <xQueueGiveFromISR+0x5a>
 80038cc:	2300      	movs	r3, #0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <xQueueGiveFromISR+0x72>
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e7fe      	b.n	80038e4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038e6:	f002 fa2d 	bl	8005d44 <vPortValidateInterruptPriority>
	__asm volatile
 80038ea:	f3ef 8211 	mrs	r2, BASEPRI
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	617a      	str	r2, [r7, #20]
 8003900:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003902:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003912:	429a      	cmp	r2, r3
 8003914:	d22b      	bcs.n	800396e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800391c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d112      	bne.n	8003958 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	3324      	adds	r3, #36	; 0x24
 800393e:	4618      	mov	r0, r3
 8003940:	f001 f84a 	bl	80049d8 <xTaskRemoveFromEventList>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00e      	beq.n	8003968 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e007      	b.n	8003968 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800395c:	3301      	adds	r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	b25a      	sxtb	r2, r3
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003968:	2301      	movs	r3, #1
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
 800396c:	e001      	b.n	8003972 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800396e:	2300      	movs	r3, #0
 8003970:	637b      	str	r3, [r7, #52]	; 0x34
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800397e:	4618      	mov	r0, r3
 8003980:	3738      	adds	r7, #56	; 0x38
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003994:	2300      	movs	r3, #0
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <xQueueReceive+0x2e>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	e7fe      	b.n	80039b4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <xQueueReceive+0x3c>
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <xQueueReceive+0x40>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <xQueueReceive+0x42>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <xQueueReceive+0x5a>
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	e7fe      	b.n	80039e0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039e2:	f001 f9af 	bl	8004d44 <xTaskGetSchedulerState>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <xQueueReceive+0x6a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueReceive+0x6e>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueReceive+0x70>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <xQueueReceive+0x88>
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	e7fe      	b.n	8003a0e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a10:	f002 f8bc 	bl	8005b8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01f      	beq.n	8003a60 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a24:	f000 fa93 	bl	8003f4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	1e5a      	subs	r2, r3, #1
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00f      	beq.n	8003a58 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	3310      	adds	r3, #16
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 ffcb 	bl	80049d8 <xTaskRemoveFromEventList>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a48:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <xQueueReceive+0x1b4>)
 8003a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a58:	f002 f8c6 	bl	8005be8 <vPortExitCritical>
				return pdPASS;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e069      	b.n	8003b34 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a66:	f002 f8bf 	bl	8005be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e062      	b.n	8003b34 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a74:	f107 0310 	add.w	r3, r7, #16
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 f80f 	bl	8004a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a82:	f002 f8b1 	bl	8005be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a86:	f000 fd8d 	bl	80045a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a8a:	f002 f87f 	bl	8005b8c <vPortEnterCritical>
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d103      	bne.n	8003aa4 <xQueueReceive+0x11c>
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d103      	bne.n	8003aba <xQueueReceive+0x132>
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aba:	f002 f895 	bl	8005be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003abe:	1d3a      	adds	r2, r7, #4
 8003ac0:	f107 0310 	add.w	r3, r7, #16
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fffe 	bl	8004ac8 <xTaskCheckForTimeOut>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d123      	bne.n	8003b1a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad4:	f000 fab3 	bl	800403e <prvIsQueueEmpty>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d017      	beq.n	8003b0e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	3324      	adds	r3, #36	; 0x24
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 ff28 	bl	800493c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aee:	f000 fa54 	bl	8003f9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003af2:	f000 fd65 	bl	80045c0 <xTaskResumeAll>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d189      	bne.n	8003a10 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <xQueueReceive+0x1b4>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	e780      	b.n	8003a10 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b10:	f000 fa43 	bl	8003f9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b14:	f000 fd54 	bl	80045c0 <xTaskResumeAll>
 8003b18:	e77a      	b.n	8003a10 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b1c:	f000 fa3d 	bl	8003f9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b20:	f000 fd4e 	bl	80045c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b26:	f000 fa8a 	bl	800403e <prvIsQueueEmpty>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f43f af6f 	beq.w	8003a10 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3730      	adds	r7, #48	; 0x30
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08e      	sub	sp, #56	; 0x38
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <xQueueSemaphoreTake+0x30>
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	623b      	str	r3, [r7, #32]
 8003b6e:	e7fe      	b.n	8003b6e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <xQueueSemaphoreTake+0x4c>
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	e7fe      	b.n	8003b8a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b8c:	f001 f8da 	bl	8004d44 <xTaskGetSchedulerState>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <xQueueSemaphoreTake+0x5c>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <xQueueSemaphoreTake+0x60>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <xQueueSemaphoreTake+0x62>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <xQueueSemaphoreTake+0x7a>
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e7fe      	b.n	8003bb8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bba:	f001 ffe7 	bl	8005b8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d024      	beq.n	8003c14 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	1e5a      	subs	r2, r3, #1
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003bda:	f001 fa6d 	bl	80050b8 <pvTaskIncrementMutexHeldCount>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00f      	beq.n	8003c0c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	3310      	adds	r3, #16
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fef1 	bl	80049d8 <xTaskRemoveFromEventList>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <xQueueSemaphoreTake+0x20c>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c0c:	f001 ffec 	bl	8005be8 <vPortExitCritical>
				return pdPASS;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e096      	b.n	8003d42 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d110      	bne.n	8003c3c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d009      	beq.n	8003c34 <xQueueSemaphoreTake+0xf4>
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e7fe      	b.n	8003c32 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c34:	f001 ffd8 	bl	8005be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e082      	b.n	8003d42 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c42:	f107 030c 	add.w	r3, r7, #12
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 ff28 	bl	8004a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c50:	f001 ffca 	bl	8005be8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c54:	f000 fca6 	bl	80045a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c58:	f001 ff98 	bl	8005b8c <vPortEnterCritical>
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c62:	b25b      	sxtb	r3, r3
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d103      	bne.n	8003c72 <xQueueSemaphoreTake+0x132>
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7e:	d103      	bne.n	8003c88 <xQueueSemaphoreTake+0x148>
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c88:	f001 ffae 	bl	8005be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c8c:	463a      	mov	r2, r7
 8003c8e:	f107 030c 	add.w	r3, r7, #12
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 ff17 	bl	8004ac8 <xTaskCheckForTimeOut>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d132      	bne.n	8003d06 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ca2:	f000 f9cc 	bl	800403e <prvIsQueueEmpty>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d026      	beq.n	8003cfa <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003cb4:	f001 ff6a 	bl	8005b8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 f85f 	bl	8004d80 <xTaskPriorityInherit>
 8003cc2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003cc4:	f001 ff90 	bl	8005be8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	3324      	adds	r3, #36	; 0x24
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fe33 	bl	800493c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cd8:	f000 f95f 	bl	8003f9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cdc:	f000 fc70 	bl	80045c0 <xTaskResumeAll>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f47f af69 	bne.w	8003bba <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <xQueueSemaphoreTake+0x20c>)
 8003cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	e75f      	b.n	8003bba <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cfc:	f000 f94d 	bl	8003f9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d00:	f000 fc5e 	bl	80045c0 <xTaskResumeAll>
 8003d04:	e759      	b.n	8003bba <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d08:	f000 f947 	bl	8003f9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d0c:	f000 fc58 	bl	80045c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d12:	f000 f994 	bl	800403e <prvIsQueueEmpty>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f43f af4e 	beq.w	8003bba <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00d      	beq.n	8003d40 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003d24:	f001 ff32 	bl	8005b8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d2a:	f000 f88e 	bl	8003e4a <prvGetDisinheritPriorityAfterTimeout>
 8003d2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f926 	bl	8004f88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d3c:	f001 ff54 	bl	8005be8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3738      	adds	r7, #56	; 0x38
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	; 0x38
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <xQueueReceiveFromISR+0x2a>
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	623b      	str	r3, [r7, #32]
 8003d78:	e7fe      	b.n	8003d78 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <xQueueReceiveFromISR+0x38>
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <xQueueReceiveFromISR+0x3c>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <xQueueReceiveFromISR+0x3e>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <xQueueReceiveFromISR+0x56>
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	e7fe      	b.n	8003da4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003da6:	f001 ffcd 	bl	8005d44 <vPortValidateInterruptPriority>
	__asm volatile
 8003daa:	f3ef 8211 	mrs	r2, BASEPRI
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	61ba      	str	r2, [r7, #24]
 8003dc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003dc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d02f      	beq.n	8003e32 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de0:	f000 f8b5 	bl	8003f4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	1e5a      	subs	r2, r3, #1
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003dec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d112      	bne.n	8003e1c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	3310      	adds	r3, #16
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fde8 	bl	80049d8 <xTaskRemoveFromEventList>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00e      	beq.n	8003e2c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e007      	b.n	8003e2c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e20:	3301      	adds	r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	b25a      	sxtb	r2, r3
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e30:	e001      	b.n	8003e36 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3738      	adds	r7, #56	; 0x38
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d006      	beq.n	8003e68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1c3 0307 	rsb	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e001      	b.n	8003e6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
	}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b086      	sub	sp, #24
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10d      	bne.n	8003eb4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d14d      	bne.n	8003f3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 ffeb 	bl	8004e80 <xTaskPriorityDisinherit>
 8003eaa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	e043      	b.n	8003f3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d119      	bne.n	8003eee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6858      	ldr	r0, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	f002 f97b 	bl	80061c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	441a      	add	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d32b      	bcc.n	8003f3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e026      	b.n	8003f3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68d8      	ldr	r0, [r3, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	f002 f961 	bl	80061c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	425b      	negs	r3, r3
 8003f08:	441a      	add	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d207      	bcs.n	8003f2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	425b      	negs	r3, r3
 8003f24:	441a      	add	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d105      	bne.n	8003f3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f44:	697b      	ldr	r3, [r7, #20]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d018      	beq.n	8003f92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d303      	bcc.n	8003f82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68d9      	ldr	r1, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	6838      	ldr	r0, [r7, #0]
 8003f8e:	f002 f917 	bl	80061c0 <memcpy>
	}
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fa2:	f001 fdf3 	bl	8005b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fae:	e011      	b.n	8003fd4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d012      	beq.n	8003fde <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fd0b 	bl	80049d8 <xTaskRemoveFromEventList>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fc8:	f000 fdde 	bl	8004b88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	dce9      	bgt.n	8003fb0 <prvUnlockQueue+0x16>
 8003fdc:	e000      	b.n	8003fe0 <prvUnlockQueue+0x46>
					break;
 8003fde:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	22ff      	movs	r2, #255	; 0xff
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fe8:	f001 fdfe 	bl	8005be8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fec:	f001 fdce 	bl	8005b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ff8:	e011      	b.n	800401e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d012      	beq.n	8004028 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3310      	adds	r3, #16
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fce6 	bl	80049d8 <xTaskRemoveFromEventList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004012:	f000 fdb9 	bl	8004b88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004016:	7bbb      	ldrb	r3, [r7, #14]
 8004018:	3b01      	subs	r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800401e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004022:	2b00      	cmp	r3, #0
 8004024:	dce9      	bgt.n	8003ffa <prvUnlockQueue+0x60>
 8004026:	e000      	b.n	800402a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004028:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004032:	f001 fdd9 	bl	8005be8 <vPortExitCritical>
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004046:	f001 fda1 	bl	8005b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e001      	b.n	800405c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800405c:	f001 fdc4 	bl	8005be8 <vPortExitCritical>

	return xReturn;
 8004060:	68fb      	ldr	r3, [r7, #12]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004072:	f001 fd8b 	bl	8005b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	429a      	cmp	r2, r3
 8004080:	d102      	bne.n	8004088 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004082:	2301      	movs	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e001      	b.n	800408c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800408c:	f001 fdac 	bl	8005be8 <vPortExitCritical>

	return xReturn;
 8004090:	68fb      	ldr	r3, [r7, #12]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e014      	b.n	80040d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040ac:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <vQueueAddToRegistry+0x4c>)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040b8:	490b      	ldr	r1, [pc, #44]	; (80040e8 <vQueueAddToRegistry+0x4c>)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <vQueueAddToRegistry+0x4c>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040ce:	e005      	b.n	80040dc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3301      	adds	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b07      	cmp	r3, #7
 80040da:	d9e7      	bls.n	80040ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	20004630 	.word	0x20004630

080040ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040fc:	f001 fd46 	bl	8005b8c <vPortEnterCritical>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004106:	b25b      	sxtb	r3, r3
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d103      	bne.n	8004116 <vQueueWaitForMessageRestricted+0x2a>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411c:	b25b      	sxtb	r3, r3
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d103      	bne.n	800412c <vQueueWaitForMessageRestricted+0x40>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800412c:	f001 fd5c 	bl	8005be8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3324      	adds	r3, #36	; 0x24
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fc1f 	bl	8004984 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004146:	6978      	ldr	r0, [r7, #20]
 8004148:	f7ff ff27 	bl	8003f9a <prvUnlockQueue>
	}
 800414c:	bf00      	nop
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08e      	sub	sp, #56	; 0x38
 8004158:	af04      	add	r7, sp, #16
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <xTaskCreateStatic+0x28>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	e7fe      	b.n	800417a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <xTaskCreateStatic+0x42>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e7fe      	b.n	8004194 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004196:	2354      	movs	r3, #84	; 0x54
 8004198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b54      	cmp	r3, #84	; 0x54
 800419e:	d009      	beq.n	80041b4 <xTaskCreateStatic+0x60>
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e7fe      	b.n	80041b2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01e      	beq.n	80041fa <xTaskCreateStatic+0xa6>
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d01b      	beq.n	80041fa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041d4:	2300      	movs	r3, #0
 80041d6:	9303      	str	r3, [sp, #12]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	9302      	str	r3, [sp, #8]
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f850 	bl	8004292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f4:	f000 f8d4 	bl	80043a0 <prvAddNewTaskToReadyList>
 80041f8:	e001      	b.n	80041fe <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041fe:	697b      	ldr	r3, [r7, #20]
	}
 8004200:	4618      	mov	r0, r3
 8004202:	3728      	adds	r7, #40	; 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	; 0x30
 800420c:	af04      	add	r7, sp, #16
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4618      	mov	r0, r3
 800421e:	f001 fdcf 	bl	8005dc0 <pvPortMalloc>
 8004222:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00e      	beq.n	8004248 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800422a:	2054      	movs	r0, #84	; 0x54
 800422c:	f001 fdc8 	bl	8005dc0 <pvPortMalloc>
 8004230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
 800423e:	e005      	b.n	800424c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004240:	6978      	ldr	r0, [r7, #20]
 8004242:	f001 fe7f 	bl	8005f44 <vPortFree>
 8004246:	e001      	b.n	800424c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d017      	beq.n	8004282 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	2300      	movs	r3, #0
 800425e:	9303      	str	r3, [sp, #12]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	9302      	str	r3, [sp, #8]
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f80e 	bl	8004292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004276:	69f8      	ldr	r0, [r7, #28]
 8004278:	f000 f892 	bl	80043a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800427c:	2301      	movs	r3, #1
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	e002      	b.n	8004288 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004288:	69bb      	ldr	r3, [r7, #24]
	}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b088      	sub	sp, #32
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042aa:	3b01      	subs	r3, #1
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f023 0307 	bic.w	r3, r3, #7
 80042b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <prvInitialiseNewTask+0x46>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e7fe      	b.n	80042d6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01f      	beq.n	800431e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e012      	b.n	800430a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	7819      	ldrb	r1, [r3, #0]
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	3334      	adds	r3, #52	; 0x34
 80042f4:	460a      	mov	r2, r1
 80042f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2b0f      	cmp	r3, #15
 800430e:	d9e9      	bls.n	80042e4 <prvInitialiseNewTask+0x52>
 8004310:	e000      	b.n	8004314 <prvInitialiseNewTask+0x82>
			{
				break;
 8004312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800431c:	e003      	b.n	8004326 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	2b06      	cmp	r3, #6
 800432a:	d901      	bls.n	8004330 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800432c:	2306      	movs	r3, #6
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	2200      	movs	r2, #0
 8004340:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	3304      	adds	r3, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe ff38 	bl	80031bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	3318      	adds	r3, #24
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe ff33 	bl	80031bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	f1c3 0207 	rsb	r2, r3, #7
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	2200      	movs	r2, #0
 8004370:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68f9      	ldr	r1, [r7, #12]
 800437e:	69b8      	ldr	r0, [r7, #24]
 8004380:	f001 fada 	bl	8005938 <pxPortInitialiseStack>
 8004384:	4602      	mov	r2, r0
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004396:	bf00      	nop
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043a8:	f001 fbf0 	bl	8005b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a29      	ldr	r2, [pc, #164]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043be:	4a27      	ldr	r2, [pc, #156]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d110      	bne.n	80043ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043cc:	f000 fc00 	bl	8004bd0 <prvInitialiseTaskLists>
 80043d0:	e00d      	b.n	80043ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <prvAddNewTaskToReadyList+0xc0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d802      	bhi.n	80043ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <prvAddNewTaskToReadyList+0xc4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <prvAddNewTaskToReadyList+0xc4>)
 80043f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2201      	movs	r2, #1
 80043fe:	409a      	lsls	r2, r3
 8004400:	4b19      	ldr	r3, [pc, #100]	; (8004468 <prvAddNewTaskToReadyList+0xc8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <prvAddNewTaskToReadyList+0xc8>)
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <prvAddNewTaskToReadyList+0xcc>)
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	4619      	mov	r1, r3
 8004420:	4610      	mov	r0, r2
 8004422:	f7fe fed8 	bl	80031d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004426:	f001 fbdf 	bl	8005be8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <prvAddNewTaskToReadyList+0xc0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00e      	beq.n	8004450 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	429a      	cmp	r2, r3
 800443e:	d207      	bcs.n	8004450 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <prvAddNewTaskToReadyList+0xd0>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000844 	.word	0x20000844
 800445c:	20000744 	.word	0x20000744
 8004460:	20000850 	.word	0x20000850
 8004464:	20000860 	.word	0x20000860
 8004468:	2000084c 	.word	0x2000084c
 800446c:	20000748 	.word	0x20000748
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <vTaskDelay+0x60>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <vTaskDelay+0x2e>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	e7fe      	b.n	80044a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80044a2:	f000 f87f 	bl	80045a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044a6:	2100      	movs	r1, #0
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fe19 	bl	80050e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044ae:	f000 f887 	bl	80045c0 <xTaskResumeAll>
 80044b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <vTaskDelay+0x64>)
 80044bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	2000086c 	.word	0x2000086c
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ea:	463a      	mov	r2, r7
 80044ec:	1d39      	adds	r1, r7, #4
 80044ee:	f107 0308 	add.w	r3, r7, #8
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc f85c 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	9202      	str	r2, [sp, #8]
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2300      	movs	r3, #0
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	460a      	mov	r2, r1
 800450a:	4920      	ldr	r1, [pc, #128]	; (800458c <vTaskStartScheduler+0xb0>)
 800450c:	4820      	ldr	r0, [pc, #128]	; (8004590 <vTaskStartScheduler+0xb4>)
 800450e:	f7ff fe21 	bl	8004154 <xTaskCreateStatic>
 8004512:	4602      	mov	r2, r0
 8004514:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <vTaskStartScheduler+0xb8>)
 8004516:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <vTaskStartScheduler+0xb8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e001      	b.n	800452a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004530:	f000 fe3c 	bl	80051ac <xTimerCreateTimerTask>
 8004534:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d115      	bne.n	8004568 <vTaskStartScheduler+0x8c>
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <vTaskStartScheduler+0xbc>)
 8004550:	f04f 32ff 	mov.w	r2, #4294967295
 8004554:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <vTaskStartScheduler+0xc0>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <vTaskStartScheduler+0xc4>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004562:	f001 fa75 	bl	8005a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004566:	e00d      	b.n	8004584 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d109      	bne.n	8004584 <vTaskStartScheduler+0xa8>
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e7fe      	b.n	8004582 <vTaskStartScheduler+0xa6>
}
 8004584:	bf00      	nop
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	080070b8 	.word	0x080070b8
 8004590:	08004ba1 	.word	0x08004ba1
 8004594:	20000868 	.word	0x20000868
 8004598:	20000864 	.word	0x20000864
 800459c:	20000850 	.word	0x20000850
 80045a0:	20000848 	.word	0x20000848

080045a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <vTaskSuspendAll+0x18>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3301      	adds	r3, #1
 80045ae:	4a03      	ldr	r2, [pc, #12]	; (80045bc <vTaskSuspendAll+0x18>)
 80045b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80045b2:	bf00      	nop
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	2000086c 	.word	0x2000086c

080045c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ce:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <xTaskResumeAll+0x114>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <xTaskResumeAll+0x2a>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	e7fe      	b.n	80045e8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045ea:	f001 facf 	bl	8005b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045ee:	4b39      	ldr	r3, [pc, #228]	; (80046d4 <xTaskResumeAll+0x114>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	4a37      	ldr	r2, [pc, #220]	; (80046d4 <xTaskResumeAll+0x114>)
 80045f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f8:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <xTaskResumeAll+0x114>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d161      	bne.n	80046c4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004600:	4b35      	ldr	r3, [pc, #212]	; (80046d8 <xTaskResumeAll+0x118>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d05d      	beq.n	80046c4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004608:	e02e      	b.n	8004668 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800460a:	4b34      	ldr	r3, [pc, #208]	; (80046dc <xTaskResumeAll+0x11c>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3318      	adds	r3, #24
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fe3a 	bl	8003290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3304      	adds	r3, #4
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe fe35 	bl	8003290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	2201      	movs	r2, #1
 800462c:	409a      	lsls	r2, r3
 800462e:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <xTaskResumeAll+0x120>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4313      	orrs	r3, r2
 8004634:	4a2a      	ldr	r2, [pc, #168]	; (80046e0 <xTaskResumeAll+0x120>)
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <xTaskResumeAll+0x124>)
 8004646:	441a      	add	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f7fe fdc1 	bl	80031d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <xTaskResumeAll+0x128>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <xTaskResumeAll+0x12c>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <xTaskResumeAll+0x11c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1cc      	bne.n	800460a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004676:	f000 fb45 	bl	8004d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <xTaskResumeAll+0x130>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d010      	beq.n	80046a8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004686:	f000 f847 	bl	8004718 <xTaskIncrementTick>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004690:	4b16      	ldr	r3, [pc, #88]	; (80046ec <xTaskResumeAll+0x12c>)
 8004692:	2201      	movs	r2, #1
 8004694:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3b01      	subs	r3, #1
 800469a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f1      	bne.n	8004686 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <xTaskResumeAll+0x130>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046a8:	4b10      	ldr	r3, [pc, #64]	; (80046ec <xTaskResumeAll+0x12c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <xTaskResumeAll+0x134>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046c4:	f001 fa90 	bl	8005be8 <vPortExitCritical>

	return xAlreadyYielded;
 80046c8:	68bb      	ldr	r3, [r7, #8]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000086c 	.word	0x2000086c
 80046d8:	20000844 	.word	0x20000844
 80046dc:	20000804 	.word	0x20000804
 80046e0:	2000084c 	.word	0x2000084c
 80046e4:	20000748 	.word	0x20000748
 80046e8:	20000744 	.word	0x20000744
 80046ec:	20000858 	.word	0x20000858
 80046f0:	20000854 	.word	0x20000854
 80046f4:	e000ed04 	.word	0xe000ed04

080046f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046fe:	4b05      	ldr	r3, [pc, #20]	; (8004714 <xTaskGetTickCount+0x1c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004704:	687b      	ldr	r3, [r7, #4]
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000848 	.word	0x20000848

08004718 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004722:	4b4e      	ldr	r3, [pc, #312]	; (800485c <xTaskIncrementTick+0x144>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 8087 	bne.w	800483a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800472c:	4b4c      	ldr	r3, [pc, #304]	; (8004860 <xTaskIncrementTick+0x148>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004734:	4a4a      	ldr	r2, [pc, #296]	; (8004860 <xTaskIncrementTick+0x148>)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11f      	bne.n	8004780 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004740:	4b48      	ldr	r3, [pc, #288]	; (8004864 <xTaskIncrementTick+0x14c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <xTaskIncrementTick+0x46>
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	e7fe      	b.n	800475c <xTaskIncrementTick+0x44>
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <xTaskIncrementTick+0x14c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	4b40      	ldr	r3, [pc, #256]	; (8004868 <xTaskIncrementTick+0x150>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a3e      	ldr	r2, [pc, #248]	; (8004864 <xTaskIncrementTick+0x14c>)
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4a3e      	ldr	r2, [pc, #248]	; (8004868 <xTaskIncrementTick+0x150>)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b3e      	ldr	r3, [pc, #248]	; (800486c <xTaskIncrementTick+0x154>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	4a3c      	ldr	r2, [pc, #240]	; (800486c <xTaskIncrementTick+0x154>)
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	f000 fac2 	bl	8004d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004780:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <xTaskIncrementTick+0x158>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	429a      	cmp	r2, r3
 8004788:	d348      	bcc.n	800481c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800478a:	4b36      	ldr	r3, [pc, #216]	; (8004864 <xTaskIncrementTick+0x14c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <xTaskIncrementTick+0x158>)
 8004796:	f04f 32ff 	mov.w	r2, #4294967295
 800479a:	601a      	str	r2, [r3, #0]
					break;
 800479c:	e03e      	b.n	800481c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479e:	4b31      	ldr	r3, [pc, #196]	; (8004864 <xTaskIncrementTick+0x14c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d203      	bcs.n	80047be <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047b6:	4a2e      	ldr	r2, [pc, #184]	; (8004870 <xTaskIncrementTick+0x158>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047bc:	e02e      	b.n	800481c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fd64 	bl	8003290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	3318      	adds	r3, #24
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fd5b 	bl	8003290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	2201      	movs	r2, #1
 80047e0:	409a      	lsls	r2, r3
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <xTaskIncrementTick+0x15c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	4a22      	ldr	r2, [pc, #136]	; (8004874 <xTaskIncrementTick+0x15c>)
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4a1f      	ldr	r2, [pc, #124]	; (8004878 <xTaskIncrementTick+0x160>)
 80047fa:	441a      	add	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7fe fce7 	bl	80031d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	4b1b      	ldr	r3, [pc, #108]	; (800487c <xTaskIncrementTick+0x164>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	429a      	cmp	r2, r3
 8004814:	d3b9      	bcc.n	800478a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004816:	2301      	movs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800481a:	e7b6      	b.n	800478a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800481c:	4b17      	ldr	r3, [pc, #92]	; (800487c <xTaskIncrementTick+0x164>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004822:	4915      	ldr	r1, [pc, #84]	; (8004878 <xTaskIncrementTick+0x160>)
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d907      	bls.n	8004844 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e004      	b.n	8004844 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <xTaskIncrementTick+0x168>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a0f      	ldr	r2, [pc, #60]	; (8004880 <xTaskIncrementTick+0x168>)
 8004842:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <xTaskIncrementTick+0x16c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800484c:	2301      	movs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004850:	697b      	ldr	r3, [r7, #20]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	2000086c 	.word	0x2000086c
 8004860:	20000848 	.word	0x20000848
 8004864:	200007fc 	.word	0x200007fc
 8004868:	20000800 	.word	0x20000800
 800486c:	2000085c 	.word	0x2000085c
 8004870:	20000864 	.word	0x20000864
 8004874:	2000084c 	.word	0x2000084c
 8004878:	20000748 	.word	0x20000748
 800487c:	20000744 	.word	0x20000744
 8004880:	20000854 	.word	0x20000854
 8004884:	20000858 	.word	0x20000858

08004888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <vTaskSwitchContext+0xa0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004896:	4b25      	ldr	r3, [pc, #148]	; (800492c <vTaskSwitchContext+0xa4>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800489c:	e03e      	b.n	800491c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800489e:	4b23      	ldr	r3, [pc, #140]	; (800492c <vTaskSwitchContext+0xa4>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <vTaskSwitchContext+0xa8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	fab3 f383 	clz	r3, r3
 80048b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	f1c3 031f 	rsb	r3, r3, #31
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	491e      	ldr	r1, [pc, #120]	; (8004934 <vTaskSwitchContext+0xac>)
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	e7fe      	b.n	80048e0 <vTaskSwitchContext+0x58>
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a11      	ldr	r2, [pc, #68]	; (8004934 <vTaskSwitchContext+0xac>)
 80048ee:	4413      	add	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	605a      	str	r2, [r3, #4]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3308      	adds	r3, #8
 8004904:	429a      	cmp	r2, r3
 8004906:	d104      	bne.n	8004912 <vTaskSwitchContext+0x8a>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	4a07      	ldr	r2, [pc, #28]	; (8004938 <vTaskSwitchContext+0xb0>)
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	371c      	adds	r7, #28
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	2000086c 	.word	0x2000086c
 800492c:	20000858 	.word	0x20000858
 8004930:	2000084c 	.word	0x2000084c
 8004934:	20000748 	.word	0x20000748
 8004938:	20000744 	.word	0x20000744

0800493c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d109      	bne.n	8004960 <vTaskPlaceOnEventList+0x24>
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	e7fe      	b.n	800495e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <vTaskPlaceOnEventList+0x44>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3318      	adds	r3, #24
 8004966:	4619      	mov	r1, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fe fc58 	bl	800321e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800496e:	2101      	movs	r1, #1
 8004970:	6838      	ldr	r0, [r7, #0]
 8004972:	f000 fbb5 	bl	80050e0 <prvAddCurrentTaskToDelayedList>
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000744 	.word	0x20000744

08004984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <vTaskPlaceOnEventListRestricted+0x26>
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e7fe      	b.n	80049a8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <vTaskPlaceOnEventListRestricted+0x50>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3318      	adds	r3, #24
 80049b0:	4619      	mov	r1, r3
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7fe fc0f 	bl	80031d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	68b8      	ldr	r0, [r7, #8]
 80049c8:	f000 fb8a 	bl	80050e0 <prvAddCurrentTaskToDelayedList>
	}
 80049cc:	bf00      	nop
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000744 	.word	0x20000744

080049d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <xTaskRemoveFromEventList+0x2a>
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e7fe      	b.n	8004a00 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3318      	adds	r3, #24
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fc42 	bl	8003290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a0c:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <xTaskRemoveFromEventList+0xac>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11c      	bne.n	8004a4e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe fc39 	bl	8003290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	2201      	movs	r2, #1
 8004a24:	409a      	lsls	r2, r3
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <xTaskRemoveFromEventList+0xb0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <xTaskRemoveFromEventList+0xb0>)
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <xTaskRemoveFromEventList+0xb4>)
 8004a3e:	441a      	add	r2, r3
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f7fe fbc5 	bl	80031d6 <vListInsertEnd>
 8004a4c:	e005      	b.n	8004a5a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3318      	adds	r3, #24
 8004a52:	4619      	mov	r1, r3
 8004a54:	480e      	ldr	r0, [pc, #56]	; (8004a90 <xTaskRemoveFromEventList+0xb8>)
 8004a56:	f7fe fbbe 	bl	80031d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <xTaskRemoveFromEventList+0xbc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d905      	bls.n	8004a74 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <xTaskRemoveFromEventList+0xc0>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e001      	b.n	8004a78 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a78:	697b      	ldr	r3, [r7, #20]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000086c 	.word	0x2000086c
 8004a88:	2000084c 	.word	0x2000084c
 8004a8c:	20000748 	.word	0x20000748
 8004a90:	20000804 	.word	0x20000804
 8004a94:	20000744 	.word	0x20000744
 8004a98:	20000858 	.word	0x20000858

08004a9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <vTaskInternalSetTimeOutState+0x24>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <vTaskInternalSetTimeOutState+0x28>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	605a      	str	r2, [r3, #4]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	2000085c 	.word	0x2000085c
 8004ac4:	20000848 	.word	0x20000848

08004ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <xTaskCheckForTimeOut+0x24>
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e7fe      	b.n	8004aea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <xTaskCheckForTimeOut+0x3e>
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e7fe      	b.n	8004b04 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b06:	f001 f841 	bl	8005b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <xTaskCheckForTimeOut+0xb8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d102      	bne.n	8004b2a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e023      	b.n	8004b72 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <xTaskCheckForTimeOut+0xbc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d007      	beq.n	8004b46 <xTaskCheckForTimeOut+0x7e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e015      	b.n	8004b72 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d20b      	bcs.n	8004b68 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff9d 	bl	8004a9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	e004      	b.n	8004b72 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b72:	f001 f839 	bl	8005be8 <vPortExitCritical>

	return xReturn;
 8004b76:	69fb      	ldr	r3, [r7, #28]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000848 	.word	0x20000848
 8004b84:	2000085c 	.word	0x2000085c

08004b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <vTaskMissedYield+0x14>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000858 	.word	0x20000858

08004ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ba8:	f000 f852 	bl	8004c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <prvIdleTask+0x28>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d9f9      	bls.n	8004ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <prvIdleTask+0x2c>)
 8004bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bc4:	e7f0      	b.n	8004ba8 <prvIdleTask+0x8>
 8004bc6:	bf00      	nop
 8004bc8:	20000748 	.word	0x20000748
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	e00c      	b.n	8004bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <prvInitialiseTaskLists+0x60>)
 8004be8:	4413      	add	r3, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fac6 	bl	800317c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b06      	cmp	r3, #6
 8004bfa:	d9ef      	bls.n	8004bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bfc:	480d      	ldr	r0, [pc, #52]	; (8004c34 <prvInitialiseTaskLists+0x64>)
 8004bfe:	f7fe fabd 	bl	800317c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c02:	480d      	ldr	r0, [pc, #52]	; (8004c38 <prvInitialiseTaskLists+0x68>)
 8004c04:	f7fe faba 	bl	800317c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c08:	480c      	ldr	r0, [pc, #48]	; (8004c3c <prvInitialiseTaskLists+0x6c>)
 8004c0a:	f7fe fab7 	bl	800317c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c0e:	480c      	ldr	r0, [pc, #48]	; (8004c40 <prvInitialiseTaskLists+0x70>)
 8004c10:	f7fe fab4 	bl	800317c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c14:	480b      	ldr	r0, [pc, #44]	; (8004c44 <prvInitialiseTaskLists+0x74>)
 8004c16:	f7fe fab1 	bl	800317c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <prvInitialiseTaskLists+0x78>)
 8004c1c:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <prvInitialiseTaskLists+0x64>)
 8004c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <prvInitialiseTaskLists+0x7c>)
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <prvInitialiseTaskLists+0x68>)
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000748 	.word	0x20000748
 8004c34:	200007d4 	.word	0x200007d4
 8004c38:	200007e8 	.word	0x200007e8
 8004c3c:	20000804 	.word	0x20000804
 8004c40:	20000818 	.word	0x20000818
 8004c44:	20000830 	.word	0x20000830
 8004c48:	200007fc 	.word	0x200007fc
 8004c4c:	20000800 	.word	0x20000800

08004c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c56:	e019      	b.n	8004c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c58:	f000 ff98 	bl	8005b8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5c:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <prvCheckTasksWaitingTermination+0x4c>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe fb11 	bl	8003290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <prvCheckTasksWaitingTermination+0x50>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <prvCheckTasksWaitingTermination+0x50>)
 8004c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c82:	f000 ffb1 	bl	8005be8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f80e 	bl	8004ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e1      	bne.n	8004c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000818 	.word	0x20000818
 8004ca0:	20000844 	.word	0x20000844
 8004ca4:	2000082c 	.word	0x2000082c

08004ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f940 	bl	8005f44 <vPortFree>
				vPortFree( pxTCB );
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f001 f93d 	bl	8005f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cca:	e017      	b.n	8004cfc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d103      	bne.n	8004cde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f001 f934 	bl	8005f44 <vPortFree>
	}
 8004cdc:	e00e      	b.n	8004cfc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d009      	beq.n	8004cfc <prvDeleteTCB+0x54>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e7fe      	b.n	8004cfa <prvDeleteTCB+0x52>
	}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <prvResetNextTaskUnblockTime+0x38>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <prvResetNextTaskUnblockTime+0x3c>)
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d1c:	e008      	b.n	8004d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <prvResetNextTaskUnblockTime+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <prvResetNextTaskUnblockTime+0x3c>)
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	200007fc 	.word	0x200007fc
 8004d40:	20000864 	.word	0x20000864

08004d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <xTaskGetSchedulerState+0x34>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d52:	2301      	movs	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	e008      	b.n	8004d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <xTaskGetSchedulerState+0x38>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d60:	2302      	movs	r3, #2
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e001      	b.n	8004d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d6a:	687b      	ldr	r3, [r7, #4]
	}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000850 	.word	0x20000850
 8004d7c:	2000086c 	.word	0x2000086c

08004d80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d069      	beq.n	8004e6a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <xTaskPriorityInherit+0xf4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d259      	bcs.n	8004e58 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db06      	blt.n	8004dba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dac:	4b31      	ldr	r3, [pc, #196]	; (8004e74 <xTaskPriorityInherit+0xf4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	f1c3 0207 	rsb	r2, r3, #7
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6959      	ldr	r1, [r3, #20]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4a2b      	ldr	r2, [pc, #172]	; (8004e78 <xTaskPriorityInherit+0xf8>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	d13a      	bne.n	8004e48 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fa5a 	bl	8003290 <uxListRemove>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d115      	bne.n	8004e0e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4924      	ldr	r1, [pc, #144]	; (8004e78 <xTaskPriorityInherit+0xf8>)
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xTaskPriorityInherit+0x8e>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43da      	mvns	r2, r3
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <xTaskPriorityInherit+0xfc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	4a1c      	ldr	r2, [pc, #112]	; (8004e7c <xTaskPriorityInherit+0xfc>)
 8004e0c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e0e:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <xTaskPriorityInherit+0xf4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <xTaskPriorityInherit+0xfc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <xTaskPriorityInherit+0xfc>)
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <xTaskPriorityInherit+0xf8>)
 8004e38:	441a      	add	r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7fe f9c8 	bl	80031d6 <vListInsertEnd>
 8004e46:	e004      	b.n	8004e52 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <xTaskPriorityInherit+0xf4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e008      	b.n	8004e6a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <xTaskPriorityInherit+0xf4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d201      	bcs.n	8004e6a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
	}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000744 	.word	0x20000744
 8004e78:	20000748 	.word	0x20000748
 8004e7c:	2000084c 	.word	0x2000084c

08004e80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d06c      	beq.n	8004f70 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e96:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <xTaskPriorityDisinherit+0xfc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d009      	beq.n	8004eb4 <xTaskPriorityDisinherit+0x34>
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e7fe      	b.n	8004eb2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <xTaskPriorityDisinherit+0x50>
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	e7fe      	b.n	8004ece <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed4:	1e5a      	subs	r2, r3, #1
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d044      	beq.n	8004f70 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d140      	bne.n	8004f70 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe f9cc 	bl	8003290 <uxListRemove>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d115      	bne.n	8004f2a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f02:	491f      	ldr	r1, [pc, #124]	; (8004f80 <xTaskPriorityDisinherit+0x100>)
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xTaskPriorityDisinherit+0xaa>
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	2201      	movs	r2, #1
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <xTaskPriorityDisinherit+0x104>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4013      	ands	r3, r2
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <xTaskPriorityDisinherit+0x104>)
 8004f28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	f1c3 0207 	rsb	r2, r3, #7
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	2201      	movs	r2, #1
 8004f44:	409a      	lsls	r2, r3
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <xTaskPriorityDisinherit+0x104>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <xTaskPriorityDisinherit+0x104>)
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <xTaskPriorityDisinherit+0x100>)
 8004f5e:	441a      	add	r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f7fe f935 	bl	80031d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f70:	697b      	ldr	r3, [r7, #20]
	}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000744 	.word	0x20000744
 8004f80:	20000748 	.word	0x20000748
 8004f84:	2000084c 	.word	0x2000084c

08004f88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8081 	beq.w	80050a4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e7fe      	b.n	8004fbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d902      	bls.n	8004fce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e002      	b.n	8004fd4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d062      	beq.n	80050a4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d15d      	bne.n	80050a4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fe8:	4b30      	ldr	r3, [pc, #192]	; (80050ac <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d109      	bne.n	8005006 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	e7fe      	b.n	8005004 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	db04      	blt.n	8005024 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f1c3 0207 	rsb	r2, r3, #7
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	6959      	ldr	r1, [r3, #20]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005034:	4413      	add	r3, r2
 8005036:	4299      	cmp	r1, r3
 8005038:	d134      	bne.n	80050a4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	3304      	adds	r3, #4
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe f926 	bl	8003290 <uxListRemove>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d115      	bne.n	8005076 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504e:	4918      	ldr	r1, [pc, #96]	; (80050b0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	2201      	movs	r2, #1
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43da      	mvns	r2, r3
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4013      	ands	r3, r2
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005074:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	2201      	movs	r2, #1
 800507c:	409a      	lsls	r2, r3
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4313      	orrs	r3, r2
 8005084:	4a0b      	ldr	r2, [pc, #44]	; (80050b4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4a06      	ldr	r2, [pc, #24]	; (80050b0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005096:	441a      	add	r2, r3
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	3304      	adds	r3, #4
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f7fe f899 	bl	80031d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050a4:	bf00      	nop
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000744 	.word	0x20000744
 80050b0:	20000748 	.word	0x20000748
 80050b4:	2000084c 	.word	0x2000084c

080050b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80050bc:	4b07      	ldr	r3, [pc, #28]	; (80050dc <pvTaskIncrementMutexHeldCount+0x24>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <pvTaskIncrementMutexHeldCount+0x24>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ca:	3201      	adds	r2, #1
 80050cc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80050ce:	4b03      	ldr	r3, [pc, #12]	; (80050dc <pvTaskIncrementMutexHeldCount+0x24>)
 80050d0:	681b      	ldr	r3, [r3, #0]
	}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000744 	.word	0x20000744

080050e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050ea:	4b29      	ldr	r3, [pc, #164]	; (8005190 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f0:	4b28      	ldr	r3, [pc, #160]	; (8005194 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe f8ca 	bl	8003290 <uxListRemove>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005102:	4b24      	ldr	r3, [pc, #144]	; (8005194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	2201      	movs	r2, #1
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43da      	mvns	r2, r3
 8005110:	4b21      	ldr	r3, [pc, #132]	; (8005198 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4013      	ands	r3, r2
 8005116:	4a20      	ldr	r2, [pc, #128]	; (8005198 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005118:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d10a      	bne.n	8005138 <prvAddCurrentTaskToDelayedList+0x58>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005128:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	481a      	ldr	r0, [pc, #104]	; (800519c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005132:	f7fe f850 	bl	80031d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005136:	e026      	b.n	8005186 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005140:	4b14      	ldr	r3, [pc, #80]	; (8005194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	429a      	cmp	r2, r3
 800514e:	d209      	bcs.n	8005164 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005150:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3304      	adds	r3, #4
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f7fe f85e 	bl	800321e <vListInsert>
}
 8005162:	e010      	b.n	8005186 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3304      	adds	r3, #4
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7fe f854 	bl	800321e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005176:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d202      	bcs.n	8005186 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005180:	4a09      	ldr	r2, [pc, #36]	; (80051a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000848 	.word	0x20000848
 8005194:	20000744 	.word	0x20000744
 8005198:	2000084c 	.word	0x2000084c
 800519c:	20000830 	.word	0x20000830
 80051a0:	20000800 	.word	0x20000800
 80051a4:	200007fc 	.word	0x200007fc
 80051a8:	20000864 	.word	0x20000864

080051ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051b6:	f000 fb7f 	bl	80058b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051ba:	4b1c      	ldr	r3, [pc, #112]	; (800522c <xTimerCreateTimerTask+0x80>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d021      	beq.n	8005206 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051ca:	1d3a      	adds	r2, r7, #4
 80051cc:	f107 0108 	add.w	r1, r7, #8
 80051d0:	f107 030c 	add.w	r3, r7, #12
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fb fa05 	bl	80005e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	9202      	str	r2, [sp, #8]
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	2306      	movs	r3, #6
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	2300      	movs	r3, #0
 80051ea:	460a      	mov	r2, r1
 80051ec:	4910      	ldr	r1, [pc, #64]	; (8005230 <xTimerCreateTimerTask+0x84>)
 80051ee:	4811      	ldr	r0, [pc, #68]	; (8005234 <xTimerCreateTimerTask+0x88>)
 80051f0:	f7fe ffb0 	bl	8004154 <xTaskCreateStatic>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <xTimerCreateTimerTask+0x8c>)
 80051f8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <xTimerCreateTimerTask+0x8c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005202:	2301      	movs	r3, #1
 8005204:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <xTimerCreateTimerTask+0x74>
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e7fe      	b.n	800521e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005220:	697b      	ldr	r3, [r7, #20]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	200008a0 	.word	0x200008a0
 8005230:	080070c0 	.word	0x080070c0
 8005234:	0800549d 	.word	0x0800549d
 8005238:	200008a4 	.word	0x200008a4

0800523c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800524a:	2028      	movs	r0, #40	; 0x28
 800524c:	f000 fdb8 	bl	8005dc0 <pvPortMalloc>
 8005250:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	9301      	str	r3, [sp, #4]
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f841 	bl	80052f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005274:	697b      	ldr	r3, [r7, #20]
	}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800527e:	b580      	push	{r7, lr}
 8005280:	b08a      	sub	sp, #40	; 0x28
 8005282:	af02      	add	r7, sp, #8
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800528c:	2328      	movs	r3, #40	; 0x28
 800528e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b28      	cmp	r3, #40	; 0x28
 8005294:	d009      	beq.n	80052aa <xTimerCreateStatic+0x2c>
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	e7fe      	b.n	80052a8 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <xTimerCreateStatic+0x48>
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e7fe      	b.n	80052c4 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00d      	beq.n	80052ec <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f805 	bl	80052f6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80052ec:	69fb      	ldr	r3, [r7, #28]
	}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b086      	sub	sp, #24
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <prvInitialiseNewTimer+0x28>
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e7fe      	b.n	800531c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01e      	beq.n	8005362 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005324:	f000 fac8 	bl	80058b8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	3304      	adds	r3, #4
 8005344:	4618      	mov	r0, r3
 8005346:	f7fd ff39 	bl	80031bc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	b2da      	uxtb	r2, r3
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005362:	bf00      	nop
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08a      	sub	sp, #40	; 0x28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800537a:	2300      	movs	r3, #0
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <xTimerGenericCommand+0x2c>
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	e7fe      	b.n	8005396 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <xTimerGenericCommand+0x94>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d02a      	beq.n	80053f6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	dc18      	bgt.n	80053e4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053b2:	f7ff fcc7 	bl	8004d44 <xTaskGetSchedulerState>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d109      	bne.n	80053d0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053bc:	4b10      	ldr	r3, [pc, #64]	; (8005400 <xTimerGenericCommand+0x94>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	f107 0114 	add.w	r1, r7, #20
 80053c4:	2300      	movs	r3, #0
 80053c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c8:	f7fe f8c6 	bl	8003558 <xQueueGenericSend>
 80053cc:	6278      	str	r0, [r7, #36]	; 0x24
 80053ce:	e012      	b.n	80053f6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <xTimerGenericCommand+0x94>)
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	f107 0114 	add.w	r1, r7, #20
 80053d8:	2300      	movs	r3, #0
 80053da:	2200      	movs	r2, #0
 80053dc:	f7fe f8bc 	bl	8003558 <xQueueGenericSend>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24
 80053e2:	e008      	b.n	80053f6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <xTimerGenericCommand+0x94>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	f107 0114 	add.w	r1, r7, #20
 80053ec:	2300      	movs	r3, #0
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	f7fe f9ac 	bl	800374c <xQueueGenericSendFromISR>
 80053f4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	; 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	200008a0 	.word	0x200008a0

08005404 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af02      	add	r7, sp, #8
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800540e:	4b22      	ldr	r3, [pc, #136]	; (8005498 <prvProcessExpiredTimer+0x94>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fd ff37 	bl	8003290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d021      	beq.n	8005474 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	18d1      	adds	r1, r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	6978      	ldr	r0, [r7, #20]
 800543e:	f000 f8d1 	bl	80055e4 <prvInsertTimerInActiveList>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01e      	beq.n	8005486 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005448:	2300      	movs	r3, #0
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	2300      	movs	r3, #0
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	2100      	movs	r1, #0
 8005452:	6978      	ldr	r0, [r7, #20]
 8005454:	f7ff ff8a 	bl	800536c <xTimerGenericCommand>
 8005458:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d112      	bne.n	8005486 <prvProcessExpiredTimer+0x82>
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	e7fe      	b.n	8005472 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800547a:	f023 0301 	bic.w	r3, r3, #1
 800547e:	b2da      	uxtb	r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	6978      	ldr	r0, [r7, #20]
 800548c:	4798      	blx	r3
}
 800548e:	bf00      	nop
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000898 	.word	0x20000898

0800549c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054a4:	f107 0308 	add.w	r3, r7, #8
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 f857 	bl	800555c <prvGetNextExpireTime>
 80054ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4619      	mov	r1, r3
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f803 	bl	80054c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054ba:	f000 f8d5 	bl	8005668 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054be:	e7f1      	b.n	80054a4 <prvTimerTask+0x8>

080054c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054ca:	f7ff f86b 	bl	80045a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f866 	bl	80055a4 <prvSampleTimeNow>
 80054d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d130      	bne.n	8005542 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <prvProcessTimerOrBlockTask+0x3c>
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d806      	bhi.n	80054fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80054ee:	f7ff f867 	bl	80045c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ff85 	bl	8005404 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80054fa:	e024      	b.n	8005546 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005502:	4b13      	ldr	r3, [pc, #76]	; (8005550 <prvProcessTimerOrBlockTask+0x90>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <prvProcessTimerOrBlockTask+0x50>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <prvProcessTimerOrBlockTask+0x52>
 8005510:	2300      	movs	r3, #0
 8005512:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005514:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <prvProcessTimerOrBlockTask+0x94>)
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	4619      	mov	r1, r3
 8005522:	f7fe fde3 	bl	80040ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005526:	f7ff f84b 	bl	80045c0 <xTaskResumeAll>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <prvProcessTimerOrBlockTask+0x98>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
}
 8005540:	e001      	b.n	8005546 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005542:	f7ff f83d 	bl	80045c0 <xTaskResumeAll>
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	2000089c 	.word	0x2000089c
 8005554:	200008a0 	.word	0x200008a0
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <prvGetNextExpireTime+0x44>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <prvGetNextExpireTime+0x16>
 800556e:	2201      	movs	r2, #1
 8005570:	e000      	b.n	8005574 <prvGetNextExpireTime+0x18>
 8005572:	2200      	movs	r2, #0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <prvGetNextExpireTime+0x44>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	e001      	b.n	8005590 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005590:	68fb      	ldr	r3, [r7, #12]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000898 	.word	0x20000898

080055a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055ac:	f7ff f8a4 	bl	80046f8 <xTaskGetTickCount>
 80055b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055b2:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <prvSampleTimeNow+0x3c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d205      	bcs.n	80055c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055bc:	f000 f918 	bl	80057f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e002      	b.n	80055ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055ce:	4a04      	ldr	r2, [pc, #16]	; (80055e0 <prvSampleTimeNow+0x3c>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	200008a8 	.word	0x200008a8

080055e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d812      	bhi.n	8005630 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005618:	2301      	movs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e01b      	b.n	8005656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <prvInsertTimerInActiveList+0x7c>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3304      	adds	r3, #4
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f7fd fdf8 	bl	800321e <vListInsert>
 800562e:	e012      	b.n	8005656 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d206      	bcs.n	8005646 <prvInsertTimerInActiveList+0x62>
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e007      	b.n	8005656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005646:	4b07      	ldr	r3, [pc, #28]	; (8005664 <prvInsertTimerInActiveList+0x80>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3304      	adds	r3, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f7fd fde4 	bl	800321e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005656:	697b      	ldr	r3, [r7, #20]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	2000089c 	.word	0x2000089c
 8005664:	20000898 	.word	0x20000898

08005668 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08c      	sub	sp, #48	; 0x30
 800566c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800566e:	e0ac      	b.n	80057ca <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f2c0 80a8 	blt.w	80057c8 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	3304      	adds	r3, #4
 8005688:	4618      	mov	r0, r3
 800568a:	f7fd fe01 	bl	8003290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800568e:	1d3b      	adds	r3, r7, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ff87 	bl	80055a4 <prvSampleTimeNow>
 8005696:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b09      	cmp	r3, #9
 800569c:	f200 8095 	bhi.w	80057ca <prvProcessReceivedCommands+0x162>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <prvProcessReceivedCommands+0x40>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d1 	.word	0x080056d1
 80056b4:	08005743 	.word	0x08005743
 80056b8:	08005757 	.word	0x08005757
 80056bc:	0800579f 	.word	0x0800579f
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056d1 	.word	0x080056d1
 80056c8:	08005743 	.word	0x08005743
 80056cc:	08005757 	.word	0x08005757
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	18d1      	adds	r1, r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a3a      	ldr	r2, [r7, #32]
 80056ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056f0:	f7ff ff78 	bl	80055e4 <prvInsertTimerInActiveList>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d067      	beq.n	80057ca <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005700:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d05c      	beq.n	80057ca <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	441a      	add	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2300      	movs	r3, #0
 800571e:	2100      	movs	r1, #0
 8005720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005722:	f7ff fe23 	bl	800536c <xTimerGenericCommand>
 8005726:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d14d      	bne.n	80057ca <prvProcessReceivedCommands+0x162>
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	e7fe      	b.n	8005740 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	b2da      	uxtb	r2, r3
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005754:	e039      	b.n	80057ca <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	b2da      	uxtb	r2, r3
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <prvProcessReceivedCommands+0x122>
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e7fe      	b.n	8005788 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	18d1      	adds	r1, r2, r3
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	6a3a      	ldr	r2, [r7, #32]
 8005796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005798:	f7ff ff24 	bl	80055e4 <prvInsertTimerInActiveList>
					break;
 800579c:	e015      	b.n	80057ca <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d103      	bne.n	80057b4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80057ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ae:	f000 fbc9 	bl	8005f44 <vPortFree>
 80057b2:	e00a      	b.n	80057ca <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057c6:	e000      	b.n	80057ca <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057ca:	4b08      	ldr	r3, [pc, #32]	; (80057ec <prvProcessReceivedCommands+0x184>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f107 0108 	add.w	r1, r7, #8
 80057d2:	2200      	movs	r2, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe f8d7 	bl	8003988 <xQueueReceive>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f47f af47 	bne.w	8005670 <prvProcessReceivedCommands+0x8>
	}
}
 80057e2:	bf00      	nop
 80057e4:	3728      	adds	r7, #40	; 0x28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	200008a0 	.word	0x200008a0

080057f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057f6:	e047      	b.n	8005888 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057f8:	4b2d      	ldr	r3, [pc, #180]	; (80058b0 <prvSwitchTimerLists+0xc0>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <prvSwitchTimerLists+0xc0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3304      	adds	r3, #4
 8005810:	4618      	mov	r0, r3
 8005812:	f7fd fd3d 	bl	8003290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d02d      	beq.n	8005888 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	429a      	cmp	r2, r3
 800583c:	d90e      	bls.n	800585c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800584a:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <prvSwitchTimerLists+0xc0>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3304      	adds	r3, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f7fd fce2 	bl	800321e <vListInsert>
 800585a:	e015      	b.n	8005888 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800585c:	2300      	movs	r3, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	2300      	movs	r3, #0
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	2100      	movs	r1, #0
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fd80 	bl	800536c <xTimerGenericCommand>
 800586c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <prvSwitchTimerLists+0x98>
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	e7fe      	b.n	8005886 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005888:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <prvSwitchTimerLists+0xc0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1b2      	bne.n	80057f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <prvSwitchTimerLists+0xc0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005898:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <prvSwitchTimerLists+0xc4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <prvSwitchTimerLists+0xc0>)
 800589e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058a0:	4a04      	ldr	r2, [pc, #16]	; (80058b4 <prvSwitchTimerLists+0xc4>)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	6013      	str	r3, [r2, #0]
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000898 	.word	0x20000898
 80058b4:	2000089c 	.word	0x2000089c

080058b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058be:	f000 f965 	bl	8005b8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058c2:	4b15      	ldr	r3, [pc, #84]	; (8005918 <prvCheckForValidListAndQueue+0x60>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d120      	bne.n	800590c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058ca:	4814      	ldr	r0, [pc, #80]	; (800591c <prvCheckForValidListAndQueue+0x64>)
 80058cc:	f7fd fc56 	bl	800317c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058d0:	4813      	ldr	r0, [pc, #76]	; (8005920 <prvCheckForValidListAndQueue+0x68>)
 80058d2:	f7fd fc53 	bl	800317c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058d6:	4b13      	ldr	r3, [pc, #76]	; (8005924 <prvCheckForValidListAndQueue+0x6c>)
 80058d8:	4a10      	ldr	r2, [pc, #64]	; (800591c <prvCheckForValidListAndQueue+0x64>)
 80058da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058dc:	4b12      	ldr	r3, [pc, #72]	; (8005928 <prvCheckForValidListAndQueue+0x70>)
 80058de:	4a10      	ldr	r2, [pc, #64]	; (8005920 <prvCheckForValidListAndQueue+0x68>)
 80058e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058e2:	2300      	movs	r3, #0
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <prvCheckForValidListAndQueue+0x74>)
 80058e8:	4a11      	ldr	r2, [pc, #68]	; (8005930 <prvCheckForValidListAndQueue+0x78>)
 80058ea:	210c      	movs	r1, #12
 80058ec:	200a      	movs	r0, #10
 80058ee:	f7fd fd61 	bl	80033b4 <xQueueGenericCreateStatic>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b08      	ldr	r3, [pc, #32]	; (8005918 <prvCheckForValidListAndQueue+0x60>)
 80058f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <prvCheckForValidListAndQueue+0x60>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <prvCheckForValidListAndQueue+0x60>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	490b      	ldr	r1, [pc, #44]	; (8005934 <prvCheckForValidListAndQueue+0x7c>)
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fbc8 	bl	800409c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800590c:	f000 f96c 	bl	8005be8 <vPortExitCritical>
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	200008a0 	.word	0x200008a0
 800591c:	20000870 	.word	0x20000870
 8005920:	20000884 	.word	0x20000884
 8005924:	20000898 	.word	0x20000898
 8005928:	2000089c 	.word	0x2000089c
 800592c:	20000924 	.word	0x20000924
 8005930:	200008ac 	.word	0x200008ac
 8005934:	080070c8 	.word	0x080070c8

08005938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3b04      	subs	r3, #4
 8005948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3b04      	subs	r3, #4
 8005956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0201 	bic.w	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3b04      	subs	r3, #4
 8005966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005968:	4a0c      	ldr	r2, [pc, #48]	; (800599c <pxPortInitialiseStack+0x64>)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3b14      	subs	r3, #20
 8005972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3b04      	subs	r3, #4
 800597e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f06f 0202 	mvn.w	r2, #2
 8005986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3b20      	subs	r3, #32
 800598c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	080059a1 	.word	0x080059a1

080059a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <prvTaskExitError+0x50>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	d009      	beq.n	80059c8 <prvTaskExitError+0x28>
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e7fe      	b.n	80059c6 <prvTaskExitError+0x26>
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059da:	bf00      	nop
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0fc      	beq.n	80059dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059e2:	bf00      	nop
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000014 	.word	0x20000014
	...

08005a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a00:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <pxCurrentTCBConst2>)
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	6808      	ldr	r0, [r1, #0]
 8005a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	f380 8809 	msr	PSP, r0
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8811 	msr	BASEPRI, r0
 8005a1a:	4770      	bx	lr
 8005a1c:	f3af 8000 	nop.w

08005a20 <pxCurrentTCBConst2>:
 8005a20:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a28:	4808      	ldr	r0, [pc, #32]	; (8005a4c <prvPortStartFirstTask+0x24>)
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	6800      	ldr	r0, [r0, #0]
 8005a2e:	f380 8808 	msr	MSP, r0
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f380 8814 	msr	CONTROL, r0
 8005a3a:	b662      	cpsie	i
 8005a3c:	b661      	cpsie	f
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	df00      	svc	0
 8005a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a4a:	bf00      	nop
 8005a4c:	e000ed08 	.word	0xe000ed08

08005a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a56:	4b44      	ldr	r3, [pc, #272]	; (8005b68 <xPortStartScheduler+0x118>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a44      	ldr	r2, [pc, #272]	; (8005b6c <xPortStartScheduler+0x11c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <xPortStartScheduler+0x24>
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	e7fe      	b.n	8005a72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a74:	4b3c      	ldr	r3, [pc, #240]	; (8005b68 <xPortStartScheduler+0x118>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a3d      	ldr	r2, [pc, #244]	; (8005b70 <xPortStartScheduler+0x120>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d109      	bne.n	8005a92 <xPortStartScheduler+0x42>
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e7fe      	b.n	8005a90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a92:	4b38      	ldr	r3, [pc, #224]	; (8005b74 <xPortStartScheduler+0x124>)
 8005a94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	4b30      	ldr	r3, [pc, #192]	; (8005b78 <xPortStartScheduler+0x128>)
 8005ab8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005aba:	4b30      	ldr	r3, [pc, #192]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005abc:	2207      	movs	r2, #7
 8005abe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ac0:	e009      	b.n	8005ad6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005ac2:	4b2e      	ldr	r3, [pc, #184]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005aca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d0ef      	beq.n	8005ac2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ae2:	4b26      	ldr	r3, [pc, #152]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1c3 0307 	rsb	r3, r3, #7
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d009      	beq.n	8005b02 <xPortStartScheduler+0xb2>
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	e7fe      	b.n	8005b00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b02:	4b1e      	ldr	r3, [pc, #120]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b0c:	4b1b      	ldr	r3, [pc, #108]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b14:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <xPortStartScheduler+0x130>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <xPortStartScheduler+0x130>)
 8005b26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b2c:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <xPortStartScheduler+0x130>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <xPortStartScheduler+0x130>)
 8005b32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b38:	f000 f8d6 	bl	8005ce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b3c:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <xPortStartScheduler+0x134>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b42:	f000 f8f5 	bl	8005d30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <xPortStartScheduler+0x138>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a0f      	ldr	r2, [pc, #60]	; (8005b88 <xPortStartScheduler+0x138>)
 8005b4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b52:	f7ff ff69 	bl	8005a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b56:	f7fe fe97 	bl	8004888 <vTaskSwitchContext>
	prvTaskExitError();
 8005b5a:	f7ff ff21 	bl	80059a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed00 	.word	0xe000ed00
 8005b6c:	410fc271 	.word	0x410fc271
 8005b70:	410fc270 	.word	0x410fc270
 8005b74:	e000e400 	.word	0xe000e400
 8005b78:	2000096c 	.word	0x2000096c
 8005b7c:	20000970 	.word	0x20000970
 8005b80:	e000ed20 	.word	0xe000ed20
 8005b84:	20000014 	.word	0x20000014
 8005b88:	e000ef34 	.word	0xe000ef34

08005b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ba4:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <vPortEnterCritical+0x54>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	4a0d      	ldr	r2, [pc, #52]	; (8005be0 <vPortEnterCritical+0x54>)
 8005bac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <vPortEnterCritical+0x54>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d10e      	bne.n	8005bd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <vPortEnterCritical+0x58>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d009      	beq.n	8005bd4 <vPortEnterCritical+0x48>
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	e7fe      	b.n	8005bd2 <vPortEnterCritical+0x46>
	}
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	20000014 	.word	0x20000014
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bee:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <vPortExitCritical+0x4c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <vPortExitCritical+0x22>
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	e7fe      	b.n	8005c08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c0a:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <vPortExitCritical+0x4c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <vPortExitCritical+0x4c>)
 8005c12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <vPortExitCritical+0x4c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <vPortExitCritical+0x3e>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20000014 	.word	0x20000014
	...

08005c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c40:	f3ef 8009 	mrs	r0, PSP
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	4b15      	ldr	r3, [pc, #84]	; (8005ca0 <pxCurrentTCBConst>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	f01e 0f10 	tst.w	lr, #16
 8005c50:	bf08      	it	eq
 8005c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5a:	6010      	str	r0, [r2, #0]
 8005c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c64:	f380 8811 	msr	BASEPRI, r0
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f7fe fe0a 	bl	8004888 <vTaskSwitchContext>
 8005c74:	f04f 0000 	mov.w	r0, #0
 8005c78:	f380 8811 	msr	BASEPRI, r0
 8005c7c:	bc09      	pop	{r0, r3}
 8005c7e:	6819      	ldr	r1, [r3, #0]
 8005c80:	6808      	ldr	r0, [r1, #0]
 8005c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c86:	f01e 0f10 	tst.w	lr, #16
 8005c8a:	bf08      	it	eq
 8005c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c90:	f380 8809 	msr	PSP, r0
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	f3af 8000 	nop.w

08005ca0 <pxCurrentTCBConst>:
 8005ca0:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop

08005ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cc0:	f7fe fd2a 	bl	8004718 <xTaskIncrementTick>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <SysTick_Handler+0x3c>)
 8005ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <vPortSetupTimerInterrupt+0x34>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <vPortSetupTimerInterrupt+0x38>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <vPortSetupTimerInterrupt+0x3c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <vPortSetupTimerInterrupt+0x40>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	099b      	lsrs	r3, r3, #6
 8005d04:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <vPortSetupTimerInterrupt+0x44>)
 8005d06:	3b01      	subs	r3, #1
 8005d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d0a:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <vPortSetupTimerInterrupt+0x34>)
 8005d0c:	2207      	movs	r2, #7
 8005d0e:	601a      	str	r2, [r3, #0]
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	e000e010 	.word	0xe000e010
 8005d20:	e000e018 	.word	0xe000e018
 8005d24:	20000008 	.word	0x20000008
 8005d28:	10624dd3 	.word	0x10624dd3
 8005d2c:	e000e014 	.word	0xe000e014

08005d30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d40 <vPortEnableVFP+0x10>
 8005d34:	6801      	ldr	r1, [r0, #0]
 8005d36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d3a:	6001      	str	r1, [r0, #0]
 8005d3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d3e:	bf00      	nop
 8005d40:	e000ed88 	.word	0xe000ed88

08005d44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d4a:	f3ef 8305 	mrs	r3, IPSR
 8005d4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b0f      	cmp	r3, #15
 8005d54:	d913      	bls.n	8005d7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d56:	4a16      	ldr	r2, [pc, #88]	; (8005db0 <vPortValidateInterruptPriority+0x6c>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d60:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <vPortValidateInterruptPriority+0x70>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	7afa      	ldrb	r2, [r7, #11]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d209      	bcs.n	8005d7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	e7fe      	b.n	8005d7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d7e:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <vPortValidateInterruptPriority+0x74>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d86:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <vPortValidateInterruptPriority+0x78>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d909      	bls.n	8005da2 <vPortValidateInterruptPriority+0x5e>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	e7fe      	b.n	8005da0 <vPortValidateInterruptPriority+0x5c>
	}
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	e000e3f0 	.word	0xe000e3f0
 8005db4:	2000096c 	.word	0x2000096c
 8005db8:	e000ed0c 	.word	0xe000ed0c
 8005dbc:	20000970 	.word	0x20000970

08005dc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005dcc:	f7fe fbea 	bl	80045a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dd0:	4b57      	ldr	r3, [pc, #348]	; (8005f30 <pvPortMalloc+0x170>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005dd8:	f000 f90c 	bl	8005ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ddc:	4b55      	ldr	r3, [pc, #340]	; (8005f34 <pvPortMalloc+0x174>)
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f040 808c 	bne.w	8005f02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01c      	beq.n	8005e2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005df0:	2208      	movs	r2, #8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4413      	add	r3, r2
 8005df6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d013      	beq.n	8005e2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f023 0307 	bic.w	r3, r3, #7
 8005e08:	3308      	adds	r3, #8
 8005e0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <pvPortMalloc+0x6a>
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	e7fe      	b.n	8005e28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d068      	beq.n	8005f02 <pvPortMalloc+0x142>
 8005e30:	4b41      	ldr	r3, [pc, #260]	; (8005f38 <pvPortMalloc+0x178>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d863      	bhi.n	8005f02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e3a:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <pvPortMalloc+0x17c>)
 8005e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e3e:	4b3f      	ldr	r3, [pc, #252]	; (8005f3c <pvPortMalloc+0x17c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e44:	e004      	b.n	8005e50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d903      	bls.n	8005e62 <pvPortMalloc+0xa2>
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f1      	bne.n	8005e46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e62:	4b33      	ldr	r3, [pc, #204]	; (8005f30 <pvPortMalloc+0x170>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d04a      	beq.n	8005f02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2208      	movs	r2, #8
 8005e72:	4413      	add	r3, r2
 8005e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	1ad2      	subs	r2, r2, r3
 8005e86:	2308      	movs	r3, #8
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d91e      	bls.n	8005ecc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <pvPortMalloc+0xf4>
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e7fe      	b.n	8005eb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ec6:	69b8      	ldr	r0, [r7, #24]
 8005ec8:	f000 f8f6 	bl	80060b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <pvPortMalloc+0x178>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <pvPortMalloc+0x178>)
 8005ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005eda:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <pvPortMalloc+0x178>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <pvPortMalloc+0x180>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d203      	bcs.n	8005eee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <pvPortMalloc+0x178>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a15      	ldr	r2, [pc, #84]	; (8005f40 <pvPortMalloc+0x180>)
 8005eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <pvPortMalloc+0x174>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f02:	f7fe fb5d 	bl	80045c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d009      	beq.n	8005f24 <pvPortMalloc+0x164>
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e7fe      	b.n	8005f22 <pvPortMalloc+0x162>
	return pvReturn;
 8005f24:	69fb      	ldr	r3, [r7, #28]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3728      	adds	r7, #40	; 0x28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	2000457c 	.word	0x2000457c
 8005f34:	20004588 	.word	0x20004588
 8005f38:	20004580 	.word	0x20004580
 8005f3c:	20004574 	.word	0x20004574
 8005f40:	20004584 	.word	0x20004584

08005f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d046      	beq.n	8005fe4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f56:	2308      	movs	r3, #8
 8005f58:	425b      	negs	r3, r3
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	4b20      	ldr	r3, [pc, #128]	; (8005fec <vPortFree+0xa8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <vPortFree+0x42>
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e7fe      	b.n	8005f84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <vPortFree+0x5e>
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	e7fe      	b.n	8005fa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	4b11      	ldr	r3, [pc, #68]	; (8005fec <vPortFree+0xa8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d019      	beq.n	8005fe4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d115      	bne.n	8005fe4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <vPortFree+0xa8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fc8:	f7fe faec 	bl	80045a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <vPortFree+0xac>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4a06      	ldr	r2, [pc, #24]	; (8005ff0 <vPortFree+0xac>)
 8005fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fda:	6938      	ldr	r0, [r7, #16]
 8005fdc:	f000 f86c 	bl	80060b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005fe0:	f7fe faee 	bl	80045c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fe4:	bf00      	nop
 8005fe6:	3718      	adds	r7, #24
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20004588 	.word	0x20004588
 8005ff0:	20004580 	.word	0x20004580

08005ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006000:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <prvHeapInit+0xac>)
 8006002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3307      	adds	r3, #7
 8006012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0307 	bic.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <prvHeapInit+0xac>)
 8006024:	4413      	add	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800602c:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <prvHeapInit+0xb0>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006032:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <prvHeapInit+0xb0>)
 8006034:	2200      	movs	r2, #0
 8006036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	4413      	add	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006040:	2208      	movs	r2, #8
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0307 	bic.w	r3, r3, #7
 800604e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <prvHeapInit+0xb4>)
 8006054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <prvHeapInit+0xb4>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2200      	movs	r2, #0
 800605c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800605e:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <prvHeapInit+0xb4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	1ad2      	subs	r2, r2, r3
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <prvHeapInit+0xb4>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <prvHeapInit+0xb8>)
 8006082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	4a09      	ldr	r2, [pc, #36]	; (80060b0 <prvHeapInit+0xbc>)
 800608a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <prvHeapInit+0xc0>)
 800608e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006092:	601a      	str	r2, [r3, #0]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20000974 	.word	0x20000974
 80060a4:	20004574 	.word	0x20004574
 80060a8:	2000457c 	.word	0x2000457c
 80060ac:	20004584 	.word	0x20004584
 80060b0:	20004580 	.word	0x20004580
 80060b4:	20004588 	.word	0x20004588

080060b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060c0:	4b28      	ldr	r3, [pc, #160]	; (8006164 <prvInsertBlockIntoFreeList+0xac>)
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	e002      	b.n	80060cc <prvInsertBlockIntoFreeList+0x14>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d8f7      	bhi.n	80060c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	4413      	add	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d108      	bne.n	80060fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	441a      	add	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	441a      	add	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d118      	bne.n	8006140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <prvInsertBlockIntoFreeList+0xb0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d00d      	beq.n	8006136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e008      	b.n	8006148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006136:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <prvInsertBlockIntoFreeList+0xb0>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e003      	b.n	8006148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	429a      	cmp	r2, r3
 800614e:	d002      	beq.n	8006156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20004574 	.word	0x20004574
 8006168:	2000457c 	.word	0x2000457c

0800616c <__errno>:
 800616c:	4b01      	ldr	r3, [pc, #4]	; (8006174 <__errno+0x8>)
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20000018 	.word	0x20000018

08006178 <__libc_init_array>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	4e0d      	ldr	r6, [pc, #52]	; (80061b0 <__libc_init_array+0x38>)
 800617c:	4c0d      	ldr	r4, [pc, #52]	; (80061b4 <__libc_init_array+0x3c>)
 800617e:	1ba4      	subs	r4, r4, r6
 8006180:	10a4      	asrs	r4, r4, #2
 8006182:	2500      	movs	r5, #0
 8006184:	42a5      	cmp	r5, r4
 8006186:	d109      	bne.n	800619c <__libc_init_array+0x24>
 8006188:	4e0b      	ldr	r6, [pc, #44]	; (80061b8 <__libc_init_array+0x40>)
 800618a:	4c0c      	ldr	r4, [pc, #48]	; (80061bc <__libc_init_array+0x44>)
 800618c:	f000 ff10 	bl	8006fb0 <_init>
 8006190:	1ba4      	subs	r4, r4, r6
 8006192:	10a4      	asrs	r4, r4, #2
 8006194:	2500      	movs	r5, #0
 8006196:	42a5      	cmp	r5, r4
 8006198:	d105      	bne.n	80061a6 <__libc_init_array+0x2e>
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061a0:	4798      	blx	r3
 80061a2:	3501      	adds	r5, #1
 80061a4:	e7ee      	b.n	8006184 <__libc_init_array+0xc>
 80061a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061aa:	4798      	blx	r3
 80061ac:	3501      	adds	r5, #1
 80061ae:	e7f2      	b.n	8006196 <__libc_init_array+0x1e>
 80061b0:	08007188 	.word	0x08007188
 80061b4:	08007188 	.word	0x08007188
 80061b8:	08007188 	.word	0x08007188
 80061bc:	0800718c 	.word	0x0800718c

080061c0 <memcpy>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	1e43      	subs	r3, r0, #1
 80061c4:	440a      	add	r2, r1
 80061c6:	4291      	cmp	r1, r2
 80061c8:	d100      	bne.n	80061cc <memcpy+0xc>
 80061ca:	bd10      	pop	{r4, pc}
 80061cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061d4:	e7f7      	b.n	80061c6 <memcpy+0x6>

080061d6 <memset>:
 80061d6:	4402      	add	r2, r0
 80061d8:	4603      	mov	r3, r0
 80061da:	4293      	cmp	r3, r2
 80061dc:	d100      	bne.n	80061e0 <memset+0xa>
 80061de:	4770      	bx	lr
 80061e0:	f803 1b01 	strb.w	r1, [r3], #1
 80061e4:	e7f9      	b.n	80061da <memset+0x4>
	...

080061e8 <iprintf>:
 80061e8:	b40f      	push	{r0, r1, r2, r3}
 80061ea:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <iprintf+0x2c>)
 80061ec:	b513      	push	{r0, r1, r4, lr}
 80061ee:	681c      	ldr	r4, [r3, #0]
 80061f0:	b124      	cbz	r4, 80061fc <iprintf+0x14>
 80061f2:	69a3      	ldr	r3, [r4, #24]
 80061f4:	b913      	cbnz	r3, 80061fc <iprintf+0x14>
 80061f6:	4620      	mov	r0, r4
 80061f8:	f000 f84e 	bl	8006298 <__sinit>
 80061fc:	ab05      	add	r3, sp, #20
 80061fe:	9a04      	ldr	r2, [sp, #16]
 8006200:	68a1      	ldr	r1, [r4, #8]
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	4620      	mov	r0, r4
 8006206:	f000 f955 	bl	80064b4 <_vfiprintf_r>
 800620a:	b002      	add	sp, #8
 800620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006210:	b004      	add	sp, #16
 8006212:	4770      	bx	lr
 8006214:	20000018 	.word	0x20000018

08006218 <std>:
 8006218:	2300      	movs	r3, #0
 800621a:	b510      	push	{r4, lr}
 800621c:	4604      	mov	r4, r0
 800621e:	e9c0 3300 	strd	r3, r3, [r0]
 8006222:	6083      	str	r3, [r0, #8]
 8006224:	8181      	strh	r1, [r0, #12]
 8006226:	6643      	str	r3, [r0, #100]	; 0x64
 8006228:	81c2      	strh	r2, [r0, #14]
 800622a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800622e:	6183      	str	r3, [r0, #24]
 8006230:	4619      	mov	r1, r3
 8006232:	2208      	movs	r2, #8
 8006234:	305c      	adds	r0, #92	; 0x5c
 8006236:	f7ff ffce 	bl	80061d6 <memset>
 800623a:	4b05      	ldr	r3, [pc, #20]	; (8006250 <std+0x38>)
 800623c:	6263      	str	r3, [r4, #36]	; 0x24
 800623e:	4b05      	ldr	r3, [pc, #20]	; (8006254 <std+0x3c>)
 8006240:	62a3      	str	r3, [r4, #40]	; 0x28
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <std+0x40>)
 8006244:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006246:	4b05      	ldr	r3, [pc, #20]	; (800625c <std+0x44>)
 8006248:	6224      	str	r4, [r4, #32]
 800624a:	6323      	str	r3, [r4, #48]	; 0x30
 800624c:	bd10      	pop	{r4, pc}
 800624e:	bf00      	nop
 8006250:	08006a11 	.word	0x08006a11
 8006254:	08006a33 	.word	0x08006a33
 8006258:	08006a6b 	.word	0x08006a6b
 800625c:	08006a8f 	.word	0x08006a8f

08006260 <_cleanup_r>:
 8006260:	4901      	ldr	r1, [pc, #4]	; (8006268 <_cleanup_r+0x8>)
 8006262:	f000 b885 	b.w	8006370 <_fwalk_reent>
 8006266:	bf00      	nop
 8006268:	08006d69 	.word	0x08006d69

0800626c <__sfmoreglue>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	1e4a      	subs	r2, r1, #1
 8006270:	2568      	movs	r5, #104	; 0x68
 8006272:	4355      	muls	r5, r2
 8006274:	460e      	mov	r6, r1
 8006276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800627a:	f000 f897 	bl	80063ac <_malloc_r>
 800627e:	4604      	mov	r4, r0
 8006280:	b140      	cbz	r0, 8006294 <__sfmoreglue+0x28>
 8006282:	2100      	movs	r1, #0
 8006284:	e9c0 1600 	strd	r1, r6, [r0]
 8006288:	300c      	adds	r0, #12
 800628a:	60a0      	str	r0, [r4, #8]
 800628c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006290:	f7ff ffa1 	bl	80061d6 <memset>
 8006294:	4620      	mov	r0, r4
 8006296:	bd70      	pop	{r4, r5, r6, pc}

08006298 <__sinit>:
 8006298:	6983      	ldr	r3, [r0, #24]
 800629a:	b510      	push	{r4, lr}
 800629c:	4604      	mov	r4, r0
 800629e:	bb33      	cbnz	r3, 80062ee <__sinit+0x56>
 80062a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80062a4:	6503      	str	r3, [r0, #80]	; 0x50
 80062a6:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <__sinit+0x58>)
 80062a8:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <__sinit+0x5c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6282      	str	r2, [r0, #40]	; 0x28
 80062ae:	4298      	cmp	r0, r3
 80062b0:	bf04      	itt	eq
 80062b2:	2301      	moveq	r3, #1
 80062b4:	6183      	streq	r3, [r0, #24]
 80062b6:	f000 f81f 	bl	80062f8 <__sfp>
 80062ba:	6060      	str	r0, [r4, #4]
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 f81b 	bl	80062f8 <__sfp>
 80062c2:	60a0      	str	r0, [r4, #8]
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 f817 	bl	80062f8 <__sfp>
 80062ca:	2200      	movs	r2, #0
 80062cc:	60e0      	str	r0, [r4, #12]
 80062ce:	2104      	movs	r1, #4
 80062d0:	6860      	ldr	r0, [r4, #4]
 80062d2:	f7ff ffa1 	bl	8006218 <std>
 80062d6:	2201      	movs	r2, #1
 80062d8:	2109      	movs	r1, #9
 80062da:	68a0      	ldr	r0, [r4, #8]
 80062dc:	f7ff ff9c 	bl	8006218 <std>
 80062e0:	2202      	movs	r2, #2
 80062e2:	2112      	movs	r1, #18
 80062e4:	68e0      	ldr	r0, [r4, #12]
 80062e6:	f7ff ff97 	bl	8006218 <std>
 80062ea:	2301      	movs	r3, #1
 80062ec:	61a3      	str	r3, [r4, #24]
 80062ee:	bd10      	pop	{r4, pc}
 80062f0:	080070e8 	.word	0x080070e8
 80062f4:	08006261 	.word	0x08006261

080062f8 <__sfp>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <__sfp+0x70>)
 80062fc:	681e      	ldr	r6, [r3, #0]
 80062fe:	69b3      	ldr	r3, [r6, #24]
 8006300:	4607      	mov	r7, r0
 8006302:	b913      	cbnz	r3, 800630a <__sfp+0x12>
 8006304:	4630      	mov	r0, r6
 8006306:	f7ff ffc7 	bl	8006298 <__sinit>
 800630a:	3648      	adds	r6, #72	; 0x48
 800630c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006310:	3b01      	subs	r3, #1
 8006312:	d503      	bpl.n	800631c <__sfp+0x24>
 8006314:	6833      	ldr	r3, [r6, #0]
 8006316:	b133      	cbz	r3, 8006326 <__sfp+0x2e>
 8006318:	6836      	ldr	r6, [r6, #0]
 800631a:	e7f7      	b.n	800630c <__sfp+0x14>
 800631c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006320:	b16d      	cbz	r5, 800633e <__sfp+0x46>
 8006322:	3468      	adds	r4, #104	; 0x68
 8006324:	e7f4      	b.n	8006310 <__sfp+0x18>
 8006326:	2104      	movs	r1, #4
 8006328:	4638      	mov	r0, r7
 800632a:	f7ff ff9f 	bl	800626c <__sfmoreglue>
 800632e:	6030      	str	r0, [r6, #0]
 8006330:	2800      	cmp	r0, #0
 8006332:	d1f1      	bne.n	8006318 <__sfp+0x20>
 8006334:	230c      	movs	r3, #12
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	4604      	mov	r4, r0
 800633a:	4620      	mov	r0, r4
 800633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633e:	4b0b      	ldr	r3, [pc, #44]	; (800636c <__sfp+0x74>)
 8006340:	6665      	str	r5, [r4, #100]	; 0x64
 8006342:	e9c4 5500 	strd	r5, r5, [r4]
 8006346:	60a5      	str	r5, [r4, #8]
 8006348:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800634c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006350:	2208      	movs	r2, #8
 8006352:	4629      	mov	r1, r5
 8006354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006358:	f7ff ff3d 	bl	80061d6 <memset>
 800635c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006364:	e7e9      	b.n	800633a <__sfp+0x42>
 8006366:	bf00      	nop
 8006368:	080070e8 	.word	0x080070e8
 800636c:	ffff0001 	.word	0xffff0001

08006370 <_fwalk_reent>:
 8006370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006374:	4680      	mov	r8, r0
 8006376:	4689      	mov	r9, r1
 8006378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800637c:	2600      	movs	r6, #0
 800637e:	b914      	cbnz	r4, 8006386 <_fwalk_reent+0x16>
 8006380:	4630      	mov	r0, r6
 8006382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006386:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800638a:	3f01      	subs	r7, #1
 800638c:	d501      	bpl.n	8006392 <_fwalk_reent+0x22>
 800638e:	6824      	ldr	r4, [r4, #0]
 8006390:	e7f5      	b.n	800637e <_fwalk_reent+0xe>
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d907      	bls.n	80063a8 <_fwalk_reent+0x38>
 8006398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800639c:	3301      	adds	r3, #1
 800639e:	d003      	beq.n	80063a8 <_fwalk_reent+0x38>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4640      	mov	r0, r8
 80063a4:	47c8      	blx	r9
 80063a6:	4306      	orrs	r6, r0
 80063a8:	3568      	adds	r5, #104	; 0x68
 80063aa:	e7ee      	b.n	800638a <_fwalk_reent+0x1a>

080063ac <_malloc_r>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	1ccd      	adds	r5, r1, #3
 80063b0:	f025 0503 	bic.w	r5, r5, #3
 80063b4:	3508      	adds	r5, #8
 80063b6:	2d0c      	cmp	r5, #12
 80063b8:	bf38      	it	cc
 80063ba:	250c      	movcc	r5, #12
 80063bc:	2d00      	cmp	r5, #0
 80063be:	4606      	mov	r6, r0
 80063c0:	db01      	blt.n	80063c6 <_malloc_r+0x1a>
 80063c2:	42a9      	cmp	r1, r5
 80063c4:	d903      	bls.n	80063ce <_malloc_r+0x22>
 80063c6:	230c      	movs	r3, #12
 80063c8:	6033      	str	r3, [r6, #0]
 80063ca:	2000      	movs	r0, #0
 80063cc:	bd70      	pop	{r4, r5, r6, pc}
 80063ce:	f000 fd6b 	bl	8006ea8 <__malloc_lock>
 80063d2:	4a21      	ldr	r2, [pc, #132]	; (8006458 <_malloc_r+0xac>)
 80063d4:	6814      	ldr	r4, [r2, #0]
 80063d6:	4621      	mov	r1, r4
 80063d8:	b991      	cbnz	r1, 8006400 <_malloc_r+0x54>
 80063da:	4c20      	ldr	r4, [pc, #128]	; (800645c <_malloc_r+0xb0>)
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	b91b      	cbnz	r3, 80063e8 <_malloc_r+0x3c>
 80063e0:	4630      	mov	r0, r6
 80063e2:	f000 fb05 	bl	80069f0 <_sbrk_r>
 80063e6:	6020      	str	r0, [r4, #0]
 80063e8:	4629      	mov	r1, r5
 80063ea:	4630      	mov	r0, r6
 80063ec:	f000 fb00 	bl	80069f0 <_sbrk_r>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d124      	bne.n	800643e <_malloc_r+0x92>
 80063f4:	230c      	movs	r3, #12
 80063f6:	6033      	str	r3, [r6, #0]
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 fd56 	bl	8006eaa <__malloc_unlock>
 80063fe:	e7e4      	b.n	80063ca <_malloc_r+0x1e>
 8006400:	680b      	ldr	r3, [r1, #0]
 8006402:	1b5b      	subs	r3, r3, r5
 8006404:	d418      	bmi.n	8006438 <_malloc_r+0x8c>
 8006406:	2b0b      	cmp	r3, #11
 8006408:	d90f      	bls.n	800642a <_malloc_r+0x7e>
 800640a:	600b      	str	r3, [r1, #0]
 800640c:	50cd      	str	r5, [r1, r3]
 800640e:	18cc      	adds	r4, r1, r3
 8006410:	4630      	mov	r0, r6
 8006412:	f000 fd4a 	bl	8006eaa <__malloc_unlock>
 8006416:	f104 000b 	add.w	r0, r4, #11
 800641a:	1d23      	adds	r3, r4, #4
 800641c:	f020 0007 	bic.w	r0, r0, #7
 8006420:	1ac3      	subs	r3, r0, r3
 8006422:	d0d3      	beq.n	80063cc <_malloc_r+0x20>
 8006424:	425a      	negs	r2, r3
 8006426:	50e2      	str	r2, [r4, r3]
 8006428:	e7d0      	b.n	80063cc <_malloc_r+0x20>
 800642a:	428c      	cmp	r4, r1
 800642c:	684b      	ldr	r3, [r1, #4]
 800642e:	bf16      	itet	ne
 8006430:	6063      	strne	r3, [r4, #4]
 8006432:	6013      	streq	r3, [r2, #0]
 8006434:	460c      	movne	r4, r1
 8006436:	e7eb      	b.n	8006410 <_malloc_r+0x64>
 8006438:	460c      	mov	r4, r1
 800643a:	6849      	ldr	r1, [r1, #4]
 800643c:	e7cc      	b.n	80063d8 <_malloc_r+0x2c>
 800643e:	1cc4      	adds	r4, r0, #3
 8006440:	f024 0403 	bic.w	r4, r4, #3
 8006444:	42a0      	cmp	r0, r4
 8006446:	d005      	beq.n	8006454 <_malloc_r+0xa8>
 8006448:	1a21      	subs	r1, r4, r0
 800644a:	4630      	mov	r0, r6
 800644c:	f000 fad0 	bl	80069f0 <_sbrk_r>
 8006450:	3001      	adds	r0, #1
 8006452:	d0cf      	beq.n	80063f4 <_malloc_r+0x48>
 8006454:	6025      	str	r5, [r4, #0]
 8006456:	e7db      	b.n	8006410 <_malloc_r+0x64>
 8006458:	2000458c 	.word	0x2000458c
 800645c:	20004590 	.word	0x20004590

08006460 <__sfputc_r>:
 8006460:	6893      	ldr	r3, [r2, #8]
 8006462:	3b01      	subs	r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	b410      	push	{r4}
 8006468:	6093      	str	r3, [r2, #8]
 800646a:	da08      	bge.n	800647e <__sfputc_r+0x1e>
 800646c:	6994      	ldr	r4, [r2, #24]
 800646e:	42a3      	cmp	r3, r4
 8006470:	db01      	blt.n	8006476 <__sfputc_r+0x16>
 8006472:	290a      	cmp	r1, #10
 8006474:	d103      	bne.n	800647e <__sfputc_r+0x1e>
 8006476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800647a:	f000 bb0d 	b.w	8006a98 <__swbuf_r>
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	1c58      	adds	r0, r3, #1
 8006482:	6010      	str	r0, [r2, #0]
 8006484:	7019      	strb	r1, [r3, #0]
 8006486:	4608      	mov	r0, r1
 8006488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800648c:	4770      	bx	lr

0800648e <__sfputs_r>:
 800648e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006490:	4606      	mov	r6, r0
 8006492:	460f      	mov	r7, r1
 8006494:	4614      	mov	r4, r2
 8006496:	18d5      	adds	r5, r2, r3
 8006498:	42ac      	cmp	r4, r5
 800649a:	d101      	bne.n	80064a0 <__sfputs_r+0x12>
 800649c:	2000      	movs	r0, #0
 800649e:	e007      	b.n	80064b0 <__sfputs_r+0x22>
 80064a0:	463a      	mov	r2, r7
 80064a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ffda 	bl	8006460 <__sfputc_r>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d1f3      	bne.n	8006498 <__sfputs_r+0xa>
 80064b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064b4 <_vfiprintf_r>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	460c      	mov	r4, r1
 80064ba:	b09d      	sub	sp, #116	; 0x74
 80064bc:	4617      	mov	r7, r2
 80064be:	461d      	mov	r5, r3
 80064c0:	4606      	mov	r6, r0
 80064c2:	b118      	cbz	r0, 80064cc <_vfiprintf_r+0x18>
 80064c4:	6983      	ldr	r3, [r0, #24]
 80064c6:	b90b      	cbnz	r3, 80064cc <_vfiprintf_r+0x18>
 80064c8:	f7ff fee6 	bl	8006298 <__sinit>
 80064cc:	4b7c      	ldr	r3, [pc, #496]	; (80066c0 <_vfiprintf_r+0x20c>)
 80064ce:	429c      	cmp	r4, r3
 80064d0:	d158      	bne.n	8006584 <_vfiprintf_r+0xd0>
 80064d2:	6874      	ldr	r4, [r6, #4]
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	0718      	lsls	r0, r3, #28
 80064d8:	d55e      	bpl.n	8006598 <_vfiprintf_r+0xe4>
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d05b      	beq.n	8006598 <_vfiprintf_r+0xe4>
 80064e0:	2300      	movs	r3, #0
 80064e2:	9309      	str	r3, [sp, #36]	; 0x24
 80064e4:	2320      	movs	r3, #32
 80064e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ea:	2330      	movs	r3, #48	; 0x30
 80064ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064f0:	9503      	str	r5, [sp, #12]
 80064f2:	f04f 0b01 	mov.w	fp, #1
 80064f6:	46b8      	mov	r8, r7
 80064f8:	4645      	mov	r5, r8
 80064fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064fe:	b10b      	cbz	r3, 8006504 <_vfiprintf_r+0x50>
 8006500:	2b25      	cmp	r3, #37	; 0x25
 8006502:	d154      	bne.n	80065ae <_vfiprintf_r+0xfa>
 8006504:	ebb8 0a07 	subs.w	sl, r8, r7
 8006508:	d00b      	beq.n	8006522 <_vfiprintf_r+0x6e>
 800650a:	4653      	mov	r3, sl
 800650c:	463a      	mov	r2, r7
 800650e:	4621      	mov	r1, r4
 8006510:	4630      	mov	r0, r6
 8006512:	f7ff ffbc 	bl	800648e <__sfputs_r>
 8006516:	3001      	adds	r0, #1
 8006518:	f000 80c2 	beq.w	80066a0 <_vfiprintf_r+0x1ec>
 800651c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800651e:	4453      	add	r3, sl
 8006520:	9309      	str	r3, [sp, #36]	; 0x24
 8006522:	f898 3000 	ldrb.w	r3, [r8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 80ba 	beq.w	80066a0 <_vfiprintf_r+0x1ec>
 800652c:	2300      	movs	r3, #0
 800652e:	f04f 32ff 	mov.w	r2, #4294967295
 8006532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800653e:	931a      	str	r3, [sp, #104]	; 0x68
 8006540:	46a8      	mov	r8, r5
 8006542:	2205      	movs	r2, #5
 8006544:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006548:	485e      	ldr	r0, [pc, #376]	; (80066c4 <_vfiprintf_r+0x210>)
 800654a:	f7f9 fe61 	bl	8000210 <memchr>
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	bb78      	cbnz	r0, 80065b2 <_vfiprintf_r+0xfe>
 8006552:	06d9      	lsls	r1, r3, #27
 8006554:	bf44      	itt	mi
 8006556:	2220      	movmi	r2, #32
 8006558:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800655c:	071a      	lsls	r2, r3, #28
 800655e:	bf44      	itt	mi
 8006560:	222b      	movmi	r2, #43	; 0x2b
 8006562:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006566:	782a      	ldrb	r2, [r5, #0]
 8006568:	2a2a      	cmp	r2, #42	; 0x2a
 800656a:	d02a      	beq.n	80065c2 <_vfiprintf_r+0x10e>
 800656c:	9a07      	ldr	r2, [sp, #28]
 800656e:	46a8      	mov	r8, r5
 8006570:	2000      	movs	r0, #0
 8006572:	250a      	movs	r5, #10
 8006574:	4641      	mov	r1, r8
 8006576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800657a:	3b30      	subs	r3, #48	; 0x30
 800657c:	2b09      	cmp	r3, #9
 800657e:	d969      	bls.n	8006654 <_vfiprintf_r+0x1a0>
 8006580:	b360      	cbz	r0, 80065dc <_vfiprintf_r+0x128>
 8006582:	e024      	b.n	80065ce <_vfiprintf_r+0x11a>
 8006584:	4b50      	ldr	r3, [pc, #320]	; (80066c8 <_vfiprintf_r+0x214>)
 8006586:	429c      	cmp	r4, r3
 8006588:	d101      	bne.n	800658e <_vfiprintf_r+0xda>
 800658a:	68b4      	ldr	r4, [r6, #8]
 800658c:	e7a2      	b.n	80064d4 <_vfiprintf_r+0x20>
 800658e:	4b4f      	ldr	r3, [pc, #316]	; (80066cc <_vfiprintf_r+0x218>)
 8006590:	429c      	cmp	r4, r3
 8006592:	bf08      	it	eq
 8006594:	68f4      	ldreq	r4, [r6, #12]
 8006596:	e79d      	b.n	80064d4 <_vfiprintf_r+0x20>
 8006598:	4621      	mov	r1, r4
 800659a:	4630      	mov	r0, r6
 800659c:	f000 fae0 	bl	8006b60 <__swsetup_r>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d09d      	beq.n	80064e0 <_vfiprintf_r+0x2c>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	b01d      	add	sp, #116	; 0x74
 80065aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ae:	46a8      	mov	r8, r5
 80065b0:	e7a2      	b.n	80064f8 <_vfiprintf_r+0x44>
 80065b2:	4a44      	ldr	r2, [pc, #272]	; (80066c4 <_vfiprintf_r+0x210>)
 80065b4:	1a80      	subs	r0, r0, r2
 80065b6:	fa0b f000 	lsl.w	r0, fp, r0
 80065ba:	4318      	orrs	r0, r3
 80065bc:	9004      	str	r0, [sp, #16]
 80065be:	4645      	mov	r5, r8
 80065c0:	e7be      	b.n	8006540 <_vfiprintf_r+0x8c>
 80065c2:	9a03      	ldr	r2, [sp, #12]
 80065c4:	1d11      	adds	r1, r2, #4
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	9103      	str	r1, [sp, #12]
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	db01      	blt.n	80065d2 <_vfiprintf_r+0x11e>
 80065ce:	9207      	str	r2, [sp, #28]
 80065d0:	e004      	b.n	80065dc <_vfiprintf_r+0x128>
 80065d2:	4252      	negs	r2, r2
 80065d4:	f043 0302 	orr.w	r3, r3, #2
 80065d8:	9207      	str	r2, [sp, #28]
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	f898 3000 	ldrb.w	r3, [r8]
 80065e0:	2b2e      	cmp	r3, #46	; 0x2e
 80065e2:	d10e      	bne.n	8006602 <_vfiprintf_r+0x14e>
 80065e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80065e8:	2b2a      	cmp	r3, #42	; 0x2a
 80065ea:	d138      	bne.n	800665e <_vfiprintf_r+0x1aa>
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	9203      	str	r2, [sp, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bfb8      	it	lt
 80065f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065fc:	f108 0802 	add.w	r8, r8, #2
 8006600:	9305      	str	r3, [sp, #20]
 8006602:	4d33      	ldr	r5, [pc, #204]	; (80066d0 <_vfiprintf_r+0x21c>)
 8006604:	f898 1000 	ldrb.w	r1, [r8]
 8006608:	2203      	movs	r2, #3
 800660a:	4628      	mov	r0, r5
 800660c:	f7f9 fe00 	bl	8000210 <memchr>
 8006610:	b140      	cbz	r0, 8006624 <_vfiprintf_r+0x170>
 8006612:	2340      	movs	r3, #64	; 0x40
 8006614:	1b40      	subs	r0, r0, r5
 8006616:	fa03 f000 	lsl.w	r0, r3, r0
 800661a:	9b04      	ldr	r3, [sp, #16]
 800661c:	4303      	orrs	r3, r0
 800661e:	f108 0801 	add.w	r8, r8, #1
 8006622:	9304      	str	r3, [sp, #16]
 8006624:	f898 1000 	ldrb.w	r1, [r8]
 8006628:	482a      	ldr	r0, [pc, #168]	; (80066d4 <_vfiprintf_r+0x220>)
 800662a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800662e:	2206      	movs	r2, #6
 8006630:	f108 0701 	add.w	r7, r8, #1
 8006634:	f7f9 fdec 	bl	8000210 <memchr>
 8006638:	2800      	cmp	r0, #0
 800663a:	d037      	beq.n	80066ac <_vfiprintf_r+0x1f8>
 800663c:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <_vfiprintf_r+0x224>)
 800663e:	bb1b      	cbnz	r3, 8006688 <_vfiprintf_r+0x1d4>
 8006640:	9b03      	ldr	r3, [sp, #12]
 8006642:	3307      	adds	r3, #7
 8006644:	f023 0307 	bic.w	r3, r3, #7
 8006648:	3308      	adds	r3, #8
 800664a:	9303      	str	r3, [sp, #12]
 800664c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664e:	444b      	add	r3, r9
 8006650:	9309      	str	r3, [sp, #36]	; 0x24
 8006652:	e750      	b.n	80064f6 <_vfiprintf_r+0x42>
 8006654:	fb05 3202 	mla	r2, r5, r2, r3
 8006658:	2001      	movs	r0, #1
 800665a:	4688      	mov	r8, r1
 800665c:	e78a      	b.n	8006574 <_vfiprintf_r+0xc0>
 800665e:	2300      	movs	r3, #0
 8006660:	f108 0801 	add.w	r8, r8, #1
 8006664:	9305      	str	r3, [sp, #20]
 8006666:	4619      	mov	r1, r3
 8006668:	250a      	movs	r5, #10
 800666a:	4640      	mov	r0, r8
 800666c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006670:	3a30      	subs	r2, #48	; 0x30
 8006672:	2a09      	cmp	r2, #9
 8006674:	d903      	bls.n	800667e <_vfiprintf_r+0x1ca>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0c3      	beq.n	8006602 <_vfiprintf_r+0x14e>
 800667a:	9105      	str	r1, [sp, #20]
 800667c:	e7c1      	b.n	8006602 <_vfiprintf_r+0x14e>
 800667e:	fb05 2101 	mla	r1, r5, r1, r2
 8006682:	2301      	movs	r3, #1
 8006684:	4680      	mov	r8, r0
 8006686:	e7f0      	b.n	800666a <_vfiprintf_r+0x1b6>
 8006688:	ab03      	add	r3, sp, #12
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	4622      	mov	r2, r4
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <_vfiprintf_r+0x228>)
 8006690:	a904      	add	r1, sp, #16
 8006692:	4630      	mov	r0, r6
 8006694:	f3af 8000 	nop.w
 8006698:	f1b0 3fff 	cmp.w	r0, #4294967295
 800669c:	4681      	mov	r9, r0
 800669e:	d1d5      	bne.n	800664c <_vfiprintf_r+0x198>
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	065b      	lsls	r3, r3, #25
 80066a4:	f53f af7e 	bmi.w	80065a4 <_vfiprintf_r+0xf0>
 80066a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066aa:	e77d      	b.n	80065a8 <_vfiprintf_r+0xf4>
 80066ac:	ab03      	add	r3, sp, #12
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	4622      	mov	r2, r4
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <_vfiprintf_r+0x228>)
 80066b4:	a904      	add	r1, sp, #16
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 f888 	bl	80067cc <_printf_i>
 80066bc:	e7ec      	b.n	8006698 <_vfiprintf_r+0x1e4>
 80066be:	bf00      	nop
 80066c0:	0800710c 	.word	0x0800710c
 80066c4:	0800714c 	.word	0x0800714c
 80066c8:	0800712c 	.word	0x0800712c
 80066cc:	080070ec 	.word	0x080070ec
 80066d0:	08007152 	.word	0x08007152
 80066d4:	08007156 	.word	0x08007156
 80066d8:	00000000 	.word	0x00000000
 80066dc:	0800648f 	.word	0x0800648f

080066e0 <_printf_common>:
 80066e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	4691      	mov	r9, r2
 80066e6:	461f      	mov	r7, r3
 80066e8:	688a      	ldr	r2, [r1, #8]
 80066ea:	690b      	ldr	r3, [r1, #16]
 80066ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066f0:	4293      	cmp	r3, r2
 80066f2:	bfb8      	it	lt
 80066f4:	4613      	movlt	r3, r2
 80066f6:	f8c9 3000 	str.w	r3, [r9]
 80066fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066fe:	4606      	mov	r6, r0
 8006700:	460c      	mov	r4, r1
 8006702:	b112      	cbz	r2, 800670a <_printf_common+0x2a>
 8006704:	3301      	adds	r3, #1
 8006706:	f8c9 3000 	str.w	r3, [r9]
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	0699      	lsls	r1, r3, #26
 800670e:	bf42      	ittt	mi
 8006710:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006714:	3302      	addmi	r3, #2
 8006716:	f8c9 3000 	strmi.w	r3, [r9]
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	f015 0506 	ands.w	r5, r5, #6
 8006720:	d107      	bne.n	8006732 <_printf_common+0x52>
 8006722:	f104 0a19 	add.w	sl, r4, #25
 8006726:	68e3      	ldr	r3, [r4, #12]
 8006728:	f8d9 2000 	ldr.w	r2, [r9]
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	42ab      	cmp	r3, r5
 8006730:	dc28      	bgt.n	8006784 <_printf_common+0xa4>
 8006732:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	3300      	adds	r3, #0
 800673a:	bf18      	it	ne
 800673c:	2301      	movne	r3, #1
 800673e:	0692      	lsls	r2, r2, #26
 8006740:	d42d      	bmi.n	800679e <_printf_common+0xbe>
 8006742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006746:	4639      	mov	r1, r7
 8006748:	4630      	mov	r0, r6
 800674a:	47c0      	blx	r8
 800674c:	3001      	adds	r0, #1
 800674e:	d020      	beq.n	8006792 <_printf_common+0xb2>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	68e5      	ldr	r5, [r4, #12]
 8006754:	f8d9 2000 	ldr.w	r2, [r9]
 8006758:	f003 0306 	and.w	r3, r3, #6
 800675c:	2b04      	cmp	r3, #4
 800675e:	bf08      	it	eq
 8006760:	1aad      	subeq	r5, r5, r2
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	6922      	ldr	r2, [r4, #16]
 8006766:	bf0c      	ite	eq
 8006768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800676c:	2500      	movne	r5, #0
 800676e:	4293      	cmp	r3, r2
 8006770:	bfc4      	itt	gt
 8006772:	1a9b      	subgt	r3, r3, r2
 8006774:	18ed      	addgt	r5, r5, r3
 8006776:	f04f 0900 	mov.w	r9, #0
 800677a:	341a      	adds	r4, #26
 800677c:	454d      	cmp	r5, r9
 800677e:	d11a      	bne.n	80067b6 <_printf_common+0xd6>
 8006780:	2000      	movs	r0, #0
 8006782:	e008      	b.n	8006796 <_printf_common+0xb6>
 8006784:	2301      	movs	r3, #1
 8006786:	4652      	mov	r2, sl
 8006788:	4639      	mov	r1, r7
 800678a:	4630      	mov	r0, r6
 800678c:	47c0      	blx	r8
 800678e:	3001      	adds	r0, #1
 8006790:	d103      	bne.n	800679a <_printf_common+0xba>
 8006792:	f04f 30ff 	mov.w	r0, #4294967295
 8006796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679a:	3501      	adds	r5, #1
 800679c:	e7c3      	b.n	8006726 <_printf_common+0x46>
 800679e:	18e1      	adds	r1, r4, r3
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	2030      	movs	r0, #48	; 0x30
 80067a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067a8:	4422      	add	r2, r4
 80067aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b2:	3302      	adds	r3, #2
 80067b4:	e7c5      	b.n	8006742 <_printf_common+0x62>
 80067b6:	2301      	movs	r3, #1
 80067b8:	4622      	mov	r2, r4
 80067ba:	4639      	mov	r1, r7
 80067bc:	4630      	mov	r0, r6
 80067be:	47c0      	blx	r8
 80067c0:	3001      	adds	r0, #1
 80067c2:	d0e6      	beq.n	8006792 <_printf_common+0xb2>
 80067c4:	f109 0901 	add.w	r9, r9, #1
 80067c8:	e7d8      	b.n	800677c <_printf_common+0x9c>
	...

080067cc <_printf_i>:
 80067cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067d4:	460c      	mov	r4, r1
 80067d6:	7e09      	ldrb	r1, [r1, #24]
 80067d8:	b085      	sub	sp, #20
 80067da:	296e      	cmp	r1, #110	; 0x6e
 80067dc:	4617      	mov	r7, r2
 80067de:	4606      	mov	r6, r0
 80067e0:	4698      	mov	r8, r3
 80067e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067e4:	f000 80b3 	beq.w	800694e <_printf_i+0x182>
 80067e8:	d822      	bhi.n	8006830 <_printf_i+0x64>
 80067ea:	2963      	cmp	r1, #99	; 0x63
 80067ec:	d036      	beq.n	800685c <_printf_i+0x90>
 80067ee:	d80a      	bhi.n	8006806 <_printf_i+0x3a>
 80067f0:	2900      	cmp	r1, #0
 80067f2:	f000 80b9 	beq.w	8006968 <_printf_i+0x19c>
 80067f6:	2958      	cmp	r1, #88	; 0x58
 80067f8:	f000 8083 	beq.w	8006902 <_printf_i+0x136>
 80067fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006800:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006804:	e032      	b.n	800686c <_printf_i+0xa0>
 8006806:	2964      	cmp	r1, #100	; 0x64
 8006808:	d001      	beq.n	800680e <_printf_i+0x42>
 800680a:	2969      	cmp	r1, #105	; 0x69
 800680c:	d1f6      	bne.n	80067fc <_printf_i+0x30>
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	6813      	ldr	r3, [r2, #0]
 8006812:	0605      	lsls	r5, r0, #24
 8006814:	f103 0104 	add.w	r1, r3, #4
 8006818:	d52a      	bpl.n	8006870 <_printf_i+0xa4>
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6011      	str	r1, [r2, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	da03      	bge.n	800682a <_printf_i+0x5e>
 8006822:	222d      	movs	r2, #45	; 0x2d
 8006824:	425b      	negs	r3, r3
 8006826:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800682a:	486f      	ldr	r0, [pc, #444]	; (80069e8 <_printf_i+0x21c>)
 800682c:	220a      	movs	r2, #10
 800682e:	e039      	b.n	80068a4 <_printf_i+0xd8>
 8006830:	2973      	cmp	r1, #115	; 0x73
 8006832:	f000 809d 	beq.w	8006970 <_printf_i+0x1a4>
 8006836:	d808      	bhi.n	800684a <_printf_i+0x7e>
 8006838:	296f      	cmp	r1, #111	; 0x6f
 800683a:	d020      	beq.n	800687e <_printf_i+0xb2>
 800683c:	2970      	cmp	r1, #112	; 0x70
 800683e:	d1dd      	bne.n	80067fc <_printf_i+0x30>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	f043 0320 	orr.w	r3, r3, #32
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	e003      	b.n	8006852 <_printf_i+0x86>
 800684a:	2975      	cmp	r1, #117	; 0x75
 800684c:	d017      	beq.n	800687e <_printf_i+0xb2>
 800684e:	2978      	cmp	r1, #120	; 0x78
 8006850:	d1d4      	bne.n	80067fc <_printf_i+0x30>
 8006852:	2378      	movs	r3, #120	; 0x78
 8006854:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006858:	4864      	ldr	r0, [pc, #400]	; (80069ec <_printf_i+0x220>)
 800685a:	e055      	b.n	8006908 <_printf_i+0x13c>
 800685c:	6813      	ldr	r3, [r2, #0]
 800685e:	1d19      	adds	r1, r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6011      	str	r1, [r2, #0]
 8006864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800686c:	2301      	movs	r3, #1
 800686e:	e08c      	b.n	800698a <_printf_i+0x1be>
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6011      	str	r1, [r2, #0]
 8006874:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006878:	bf18      	it	ne
 800687a:	b21b      	sxthne	r3, r3
 800687c:	e7cf      	b.n	800681e <_printf_i+0x52>
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	6825      	ldr	r5, [r4, #0]
 8006882:	1d18      	adds	r0, r3, #4
 8006884:	6010      	str	r0, [r2, #0]
 8006886:	0628      	lsls	r0, r5, #24
 8006888:	d501      	bpl.n	800688e <_printf_i+0xc2>
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	e002      	b.n	8006894 <_printf_i+0xc8>
 800688e:	0668      	lsls	r0, r5, #25
 8006890:	d5fb      	bpl.n	800688a <_printf_i+0xbe>
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	4854      	ldr	r0, [pc, #336]	; (80069e8 <_printf_i+0x21c>)
 8006896:	296f      	cmp	r1, #111	; 0x6f
 8006898:	bf14      	ite	ne
 800689a:	220a      	movne	r2, #10
 800689c:	2208      	moveq	r2, #8
 800689e:	2100      	movs	r1, #0
 80068a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068a4:	6865      	ldr	r5, [r4, #4]
 80068a6:	60a5      	str	r5, [r4, #8]
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	f2c0 8095 	blt.w	80069d8 <_printf_i+0x20c>
 80068ae:	6821      	ldr	r1, [r4, #0]
 80068b0:	f021 0104 	bic.w	r1, r1, #4
 80068b4:	6021      	str	r1, [r4, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d13d      	bne.n	8006936 <_printf_i+0x16a>
 80068ba:	2d00      	cmp	r5, #0
 80068bc:	f040 808e 	bne.w	80069dc <_printf_i+0x210>
 80068c0:	4665      	mov	r5, ip
 80068c2:	2a08      	cmp	r2, #8
 80068c4:	d10b      	bne.n	80068de <_printf_i+0x112>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	07db      	lsls	r3, r3, #31
 80068ca:	d508      	bpl.n	80068de <_printf_i+0x112>
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	6862      	ldr	r2, [r4, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	bfde      	ittt	le
 80068d4:	2330      	movle	r3, #48	; 0x30
 80068d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068de:	ebac 0305 	sub.w	r3, ip, r5
 80068e2:	6123      	str	r3, [r4, #16]
 80068e4:	f8cd 8000 	str.w	r8, [sp]
 80068e8:	463b      	mov	r3, r7
 80068ea:	aa03      	add	r2, sp, #12
 80068ec:	4621      	mov	r1, r4
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7ff fef6 	bl	80066e0 <_printf_common>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d14d      	bne.n	8006994 <_printf_i+0x1c8>
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	b005      	add	sp, #20
 80068fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006902:	4839      	ldr	r0, [pc, #228]	; (80069e8 <_printf_i+0x21c>)
 8006904:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006908:	6813      	ldr	r3, [r2, #0]
 800690a:	6821      	ldr	r1, [r4, #0]
 800690c:	1d1d      	adds	r5, r3, #4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6015      	str	r5, [r2, #0]
 8006912:	060a      	lsls	r2, r1, #24
 8006914:	d50b      	bpl.n	800692e <_printf_i+0x162>
 8006916:	07ca      	lsls	r2, r1, #31
 8006918:	bf44      	itt	mi
 800691a:	f041 0120 	orrmi.w	r1, r1, #32
 800691e:	6021      	strmi	r1, [r4, #0]
 8006920:	b91b      	cbnz	r3, 800692a <_printf_i+0x15e>
 8006922:	6822      	ldr	r2, [r4, #0]
 8006924:	f022 0220 	bic.w	r2, r2, #32
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	2210      	movs	r2, #16
 800692c:	e7b7      	b.n	800689e <_printf_i+0xd2>
 800692e:	064d      	lsls	r5, r1, #25
 8006930:	bf48      	it	mi
 8006932:	b29b      	uxthmi	r3, r3
 8006934:	e7ef      	b.n	8006916 <_printf_i+0x14a>
 8006936:	4665      	mov	r5, ip
 8006938:	fbb3 f1f2 	udiv	r1, r3, r2
 800693c:	fb02 3311 	mls	r3, r2, r1, r3
 8006940:	5cc3      	ldrb	r3, [r0, r3]
 8006942:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006946:	460b      	mov	r3, r1
 8006948:	2900      	cmp	r1, #0
 800694a:	d1f5      	bne.n	8006938 <_printf_i+0x16c>
 800694c:	e7b9      	b.n	80068c2 <_printf_i+0xf6>
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	6825      	ldr	r5, [r4, #0]
 8006952:	6961      	ldr	r1, [r4, #20]
 8006954:	1d18      	adds	r0, r3, #4
 8006956:	6010      	str	r0, [r2, #0]
 8006958:	0628      	lsls	r0, r5, #24
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	d501      	bpl.n	8006962 <_printf_i+0x196>
 800695e:	6019      	str	r1, [r3, #0]
 8006960:	e002      	b.n	8006968 <_printf_i+0x19c>
 8006962:	066a      	lsls	r2, r5, #25
 8006964:	d5fb      	bpl.n	800695e <_printf_i+0x192>
 8006966:	8019      	strh	r1, [r3, #0]
 8006968:	2300      	movs	r3, #0
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	4665      	mov	r5, ip
 800696e:	e7b9      	b.n	80068e4 <_printf_i+0x118>
 8006970:	6813      	ldr	r3, [r2, #0]
 8006972:	1d19      	adds	r1, r3, #4
 8006974:	6011      	str	r1, [r2, #0]
 8006976:	681d      	ldr	r5, [r3, #0]
 8006978:	6862      	ldr	r2, [r4, #4]
 800697a:	2100      	movs	r1, #0
 800697c:	4628      	mov	r0, r5
 800697e:	f7f9 fc47 	bl	8000210 <memchr>
 8006982:	b108      	cbz	r0, 8006988 <_printf_i+0x1bc>
 8006984:	1b40      	subs	r0, r0, r5
 8006986:	6060      	str	r0, [r4, #4]
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	2300      	movs	r3, #0
 800698e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006992:	e7a7      	b.n	80068e4 <_printf_i+0x118>
 8006994:	6923      	ldr	r3, [r4, #16]
 8006996:	462a      	mov	r2, r5
 8006998:	4639      	mov	r1, r7
 800699a:	4630      	mov	r0, r6
 800699c:	47c0      	blx	r8
 800699e:	3001      	adds	r0, #1
 80069a0:	d0aa      	beq.n	80068f8 <_printf_i+0x12c>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	079b      	lsls	r3, r3, #30
 80069a6:	d413      	bmi.n	80069d0 <_printf_i+0x204>
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	4298      	cmp	r0, r3
 80069ae:	bfb8      	it	lt
 80069b0:	4618      	movlt	r0, r3
 80069b2:	e7a3      	b.n	80068fc <_printf_i+0x130>
 80069b4:	2301      	movs	r3, #1
 80069b6:	464a      	mov	r2, r9
 80069b8:	4639      	mov	r1, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	47c0      	blx	r8
 80069be:	3001      	adds	r0, #1
 80069c0:	d09a      	beq.n	80068f8 <_printf_i+0x12c>
 80069c2:	3501      	adds	r5, #1
 80069c4:	68e3      	ldr	r3, [r4, #12]
 80069c6:	9a03      	ldr	r2, [sp, #12]
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	42ab      	cmp	r3, r5
 80069cc:	dcf2      	bgt.n	80069b4 <_printf_i+0x1e8>
 80069ce:	e7eb      	b.n	80069a8 <_printf_i+0x1dc>
 80069d0:	2500      	movs	r5, #0
 80069d2:	f104 0919 	add.w	r9, r4, #25
 80069d6:	e7f5      	b.n	80069c4 <_printf_i+0x1f8>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1ac      	bne.n	8006936 <_printf_i+0x16a>
 80069dc:	7803      	ldrb	r3, [r0, #0]
 80069de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069e6:	e76c      	b.n	80068c2 <_printf_i+0xf6>
 80069e8:	0800715d 	.word	0x0800715d
 80069ec:	0800716e 	.word	0x0800716e

080069f0 <_sbrk_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4c06      	ldr	r4, [pc, #24]	; (8006a0c <_sbrk_r+0x1c>)
 80069f4:	2300      	movs	r3, #0
 80069f6:	4605      	mov	r5, r0
 80069f8:	4608      	mov	r0, r1
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	f7fa f9c6 	bl	8000d8c <_sbrk>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_sbrk_r+0x1a>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_sbrk_r+0x1a>
 8006a08:	602b      	str	r3, [r5, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	20004670 	.word	0x20004670

08006a10 <__sread>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	460c      	mov	r4, r1
 8006a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a18:	f000 fa96 	bl	8006f48 <_read_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	bfab      	itete	ge
 8006a20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a22:	89a3      	ldrhlt	r3, [r4, #12]
 8006a24:	181b      	addge	r3, r3, r0
 8006a26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a2a:	bfac      	ite	ge
 8006a2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a2e:	81a3      	strhlt	r3, [r4, #12]
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <__swrite>:
 8006a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	461f      	mov	r7, r3
 8006a38:	898b      	ldrh	r3, [r1, #12]
 8006a3a:	05db      	lsls	r3, r3, #23
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	4616      	mov	r6, r2
 8006a42:	d505      	bpl.n	8006a50 <__swrite+0x1e>
 8006a44:	2302      	movs	r3, #2
 8006a46:	2200      	movs	r2, #0
 8006a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4c:	f000 f9b6 	bl	8006dbc <_lseek_r>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	463b      	mov	r3, r7
 8006a60:	4628      	mov	r0, r5
 8006a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	f000 b869 	b.w	8006b3c <_write_r>

08006a6a <__sseek>:
 8006a6a:	b510      	push	{r4, lr}
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a72:	f000 f9a3 	bl	8006dbc <_lseek_r>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	bf15      	itete	ne
 8006a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a86:	81a3      	strheq	r3, [r4, #12]
 8006a88:	bf18      	it	ne
 8006a8a:	81a3      	strhne	r3, [r4, #12]
 8006a8c:	bd10      	pop	{r4, pc}

08006a8e <__sclose>:
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 b8d3 	b.w	8006c3c <_close_r>
	...

08006a98 <__swbuf_r>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	460e      	mov	r6, r1
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	b118      	cbz	r0, 8006aaa <__swbuf_r+0x12>
 8006aa2:	6983      	ldr	r3, [r0, #24]
 8006aa4:	b90b      	cbnz	r3, 8006aaa <__swbuf_r+0x12>
 8006aa6:	f7ff fbf7 	bl	8006298 <__sinit>
 8006aaa:	4b21      	ldr	r3, [pc, #132]	; (8006b30 <__swbuf_r+0x98>)
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d12a      	bne.n	8006b06 <__swbuf_r+0x6e>
 8006ab0:	686c      	ldr	r4, [r5, #4]
 8006ab2:	69a3      	ldr	r3, [r4, #24]
 8006ab4:	60a3      	str	r3, [r4, #8]
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	071a      	lsls	r2, r3, #28
 8006aba:	d52e      	bpl.n	8006b1a <__swbuf_r+0x82>
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	b363      	cbz	r3, 8006b1a <__swbuf_r+0x82>
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	6820      	ldr	r0, [r4, #0]
 8006ac4:	1ac0      	subs	r0, r0, r3
 8006ac6:	6963      	ldr	r3, [r4, #20]
 8006ac8:	b2f6      	uxtb	r6, r6
 8006aca:	4283      	cmp	r3, r0
 8006acc:	4637      	mov	r7, r6
 8006ace:	dc04      	bgt.n	8006ada <__swbuf_r+0x42>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f948 	bl	8006d68 <_fflush_r>
 8006ad8:	bb28      	cbnz	r0, 8006b26 <__swbuf_r+0x8e>
 8006ada:	68a3      	ldr	r3, [r4, #8]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	60a3      	str	r3, [r4, #8]
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	6022      	str	r2, [r4, #0]
 8006ae6:	701e      	strb	r6, [r3, #0]
 8006ae8:	6963      	ldr	r3, [r4, #20]
 8006aea:	3001      	adds	r0, #1
 8006aec:	4283      	cmp	r3, r0
 8006aee:	d004      	beq.n	8006afa <__swbuf_r+0x62>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	07db      	lsls	r3, r3, #31
 8006af4:	d519      	bpl.n	8006b2a <__swbuf_r+0x92>
 8006af6:	2e0a      	cmp	r6, #10
 8006af8:	d117      	bne.n	8006b2a <__swbuf_r+0x92>
 8006afa:	4621      	mov	r1, r4
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 f933 	bl	8006d68 <_fflush_r>
 8006b02:	b190      	cbz	r0, 8006b2a <__swbuf_r+0x92>
 8006b04:	e00f      	b.n	8006b26 <__swbuf_r+0x8e>
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <__swbuf_r+0x9c>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	d101      	bne.n	8006b10 <__swbuf_r+0x78>
 8006b0c:	68ac      	ldr	r4, [r5, #8]
 8006b0e:	e7d0      	b.n	8006ab2 <__swbuf_r+0x1a>
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <__swbuf_r+0xa0>)
 8006b12:	429c      	cmp	r4, r3
 8006b14:	bf08      	it	eq
 8006b16:	68ec      	ldreq	r4, [r5, #12]
 8006b18:	e7cb      	b.n	8006ab2 <__swbuf_r+0x1a>
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	f000 f81f 	bl	8006b60 <__swsetup_r>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d0cc      	beq.n	8006ac0 <__swbuf_r+0x28>
 8006b26:	f04f 37ff 	mov.w	r7, #4294967295
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	0800710c 	.word	0x0800710c
 8006b34:	0800712c 	.word	0x0800712c
 8006b38:	080070ec 	.word	0x080070ec

08006b3c <_write_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4c07      	ldr	r4, [pc, #28]	; (8006b5c <_write_r+0x20>)
 8006b40:	4605      	mov	r5, r0
 8006b42:	4608      	mov	r0, r1
 8006b44:	4611      	mov	r1, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	6022      	str	r2, [r4, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f7f9 fd64 	bl	8000618 <_write>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_write_r+0x1e>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_write_r+0x1e>
 8006b58:	602b      	str	r3, [r5, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20004670 	.word	0x20004670

08006b60 <__swsetup_r>:
 8006b60:	4b32      	ldr	r3, [pc, #200]	; (8006c2c <__swsetup_r+0xcc>)
 8006b62:	b570      	push	{r4, r5, r6, lr}
 8006b64:	681d      	ldr	r5, [r3, #0]
 8006b66:	4606      	mov	r6, r0
 8006b68:	460c      	mov	r4, r1
 8006b6a:	b125      	cbz	r5, 8006b76 <__swsetup_r+0x16>
 8006b6c:	69ab      	ldr	r3, [r5, #24]
 8006b6e:	b913      	cbnz	r3, 8006b76 <__swsetup_r+0x16>
 8006b70:	4628      	mov	r0, r5
 8006b72:	f7ff fb91 	bl	8006298 <__sinit>
 8006b76:	4b2e      	ldr	r3, [pc, #184]	; (8006c30 <__swsetup_r+0xd0>)
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	d10f      	bne.n	8006b9c <__swsetup_r+0x3c>
 8006b7c:	686c      	ldr	r4, [r5, #4]
 8006b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	0715      	lsls	r5, r2, #28
 8006b86:	d42c      	bmi.n	8006be2 <__swsetup_r+0x82>
 8006b88:	06d0      	lsls	r0, r2, #27
 8006b8a:	d411      	bmi.n	8006bb0 <__swsetup_r+0x50>
 8006b8c:	2209      	movs	r2, #9
 8006b8e:	6032      	str	r2, [r6, #0]
 8006b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9a:	e03e      	b.n	8006c1a <__swsetup_r+0xba>
 8006b9c:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <__swsetup_r+0xd4>)
 8006b9e:	429c      	cmp	r4, r3
 8006ba0:	d101      	bne.n	8006ba6 <__swsetup_r+0x46>
 8006ba2:	68ac      	ldr	r4, [r5, #8]
 8006ba4:	e7eb      	b.n	8006b7e <__swsetup_r+0x1e>
 8006ba6:	4b24      	ldr	r3, [pc, #144]	; (8006c38 <__swsetup_r+0xd8>)
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	bf08      	it	eq
 8006bac:	68ec      	ldreq	r4, [r5, #12]
 8006bae:	e7e6      	b.n	8006b7e <__swsetup_r+0x1e>
 8006bb0:	0751      	lsls	r1, r2, #29
 8006bb2:	d512      	bpl.n	8006bda <__swsetup_r+0x7a>
 8006bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bb6:	b141      	cbz	r1, 8006bca <__swsetup_r+0x6a>
 8006bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bbc:	4299      	cmp	r1, r3
 8006bbe:	d002      	beq.n	8006bc6 <__swsetup_r+0x66>
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f973 	bl	8006eac <_free_r>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f043 0308 	orr.w	r3, r3, #8
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	b94b      	cbnz	r3, 8006bfa <__swsetup_r+0x9a>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf0:	d003      	beq.n	8006bfa <__swsetup_r+0x9a>
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f000 f917 	bl	8006e28 <__smakebuf_r>
 8006bfa:	89a2      	ldrh	r2, [r4, #12]
 8006bfc:	f012 0301 	ands.w	r3, r2, #1
 8006c00:	d00c      	beq.n	8006c1c <__swsetup_r+0xbc>
 8006c02:	2300      	movs	r3, #0
 8006c04:	60a3      	str	r3, [r4, #8]
 8006c06:	6963      	ldr	r3, [r4, #20]
 8006c08:	425b      	negs	r3, r3
 8006c0a:	61a3      	str	r3, [r4, #24]
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	b953      	cbnz	r3, 8006c26 <__swsetup_r+0xc6>
 8006c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006c18:	d1ba      	bne.n	8006b90 <__swsetup_r+0x30>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	0792      	lsls	r2, r2, #30
 8006c1e:	bf58      	it	pl
 8006c20:	6963      	ldrpl	r3, [r4, #20]
 8006c22:	60a3      	str	r3, [r4, #8]
 8006c24:	e7f2      	b.n	8006c0c <__swsetup_r+0xac>
 8006c26:	2000      	movs	r0, #0
 8006c28:	e7f7      	b.n	8006c1a <__swsetup_r+0xba>
 8006c2a:	bf00      	nop
 8006c2c:	20000018 	.word	0x20000018
 8006c30:	0800710c 	.word	0x0800710c
 8006c34:	0800712c 	.word	0x0800712c
 8006c38:	080070ec 	.word	0x080070ec

08006c3c <_close_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4c06      	ldr	r4, [pc, #24]	; (8006c58 <_close_r+0x1c>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4605      	mov	r5, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	f7fa f86b 	bl	8000d22 <_close>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_close_r+0x1a>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_close_r+0x1a>
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20004670 	.word	0x20004670

08006c5c <__sflush_r>:
 8006c5c:	898a      	ldrh	r2, [r1, #12]
 8006c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c62:	4605      	mov	r5, r0
 8006c64:	0710      	lsls	r0, r2, #28
 8006c66:	460c      	mov	r4, r1
 8006c68:	d458      	bmi.n	8006d1c <__sflush_r+0xc0>
 8006c6a:	684b      	ldr	r3, [r1, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	dc05      	bgt.n	8006c7c <__sflush_r+0x20>
 8006c70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dc02      	bgt.n	8006c7c <__sflush_r+0x20>
 8006c76:	2000      	movs	r0, #0
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d0f9      	beq.n	8006c76 <__sflush_r+0x1a>
 8006c82:	2300      	movs	r3, #0
 8006c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c88:	682f      	ldr	r7, [r5, #0]
 8006c8a:	6a21      	ldr	r1, [r4, #32]
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	d032      	beq.n	8006cf6 <__sflush_r+0x9a>
 8006c90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	075a      	lsls	r2, r3, #29
 8006c96:	d505      	bpl.n	8006ca4 <__sflush_r+0x48>
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	1ac0      	subs	r0, r0, r3
 8006c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c9e:	b10b      	cbz	r3, 8006ca4 <__sflush_r+0x48>
 8006ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ca2:	1ac0      	subs	r0, r0, r3
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006caa:	6a21      	ldr	r1, [r4, #32]
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b0      	blx	r6
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	d106      	bne.n	8006cc4 <__sflush_r+0x68>
 8006cb6:	6829      	ldr	r1, [r5, #0]
 8006cb8:	291d      	cmp	r1, #29
 8006cba:	d848      	bhi.n	8006d4e <__sflush_r+0xf2>
 8006cbc:	4a29      	ldr	r2, [pc, #164]	; (8006d64 <__sflush_r+0x108>)
 8006cbe:	40ca      	lsrs	r2, r1
 8006cc0:	07d6      	lsls	r6, r2, #31
 8006cc2:	d544      	bpl.n	8006d4e <__sflush_r+0xf2>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	6062      	str	r2, [r4, #4]
 8006cc8:	04d9      	lsls	r1, r3, #19
 8006cca:	6922      	ldr	r2, [r4, #16]
 8006ccc:	6022      	str	r2, [r4, #0]
 8006cce:	d504      	bpl.n	8006cda <__sflush_r+0x7e>
 8006cd0:	1c42      	adds	r2, r0, #1
 8006cd2:	d101      	bne.n	8006cd8 <__sflush_r+0x7c>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	b903      	cbnz	r3, 8006cda <__sflush_r+0x7e>
 8006cd8:	6560      	str	r0, [r4, #84]	; 0x54
 8006cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cdc:	602f      	str	r7, [r5, #0]
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	d0c9      	beq.n	8006c76 <__sflush_r+0x1a>
 8006ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	d002      	beq.n	8006cf0 <__sflush_r+0x94>
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 f8de 	bl	8006eac <_free_r>
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	6360      	str	r0, [r4, #52]	; 0x34
 8006cf4:	e7c0      	b.n	8006c78 <__sflush_r+0x1c>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b0      	blx	r6
 8006cfc:	1c41      	adds	r1, r0, #1
 8006cfe:	d1c8      	bne.n	8006c92 <__sflush_r+0x36>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0c5      	beq.n	8006c92 <__sflush_r+0x36>
 8006d06:	2b1d      	cmp	r3, #29
 8006d08:	d001      	beq.n	8006d0e <__sflush_r+0xb2>
 8006d0a:	2b16      	cmp	r3, #22
 8006d0c:	d101      	bne.n	8006d12 <__sflush_r+0xb6>
 8006d0e:	602f      	str	r7, [r5, #0]
 8006d10:	e7b1      	b.n	8006c76 <__sflush_r+0x1a>
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	e7ad      	b.n	8006c78 <__sflush_r+0x1c>
 8006d1c:	690f      	ldr	r7, [r1, #16]
 8006d1e:	2f00      	cmp	r7, #0
 8006d20:	d0a9      	beq.n	8006c76 <__sflush_r+0x1a>
 8006d22:	0793      	lsls	r3, r2, #30
 8006d24:	680e      	ldr	r6, [r1, #0]
 8006d26:	bf08      	it	eq
 8006d28:	694b      	ldreq	r3, [r1, #20]
 8006d2a:	600f      	str	r7, [r1, #0]
 8006d2c:	bf18      	it	ne
 8006d2e:	2300      	movne	r3, #0
 8006d30:	eba6 0807 	sub.w	r8, r6, r7
 8006d34:	608b      	str	r3, [r1, #8]
 8006d36:	f1b8 0f00 	cmp.w	r8, #0
 8006d3a:	dd9c      	ble.n	8006c76 <__sflush_r+0x1a>
 8006d3c:	4643      	mov	r3, r8
 8006d3e:	463a      	mov	r2, r7
 8006d40:	6a21      	ldr	r1, [r4, #32]
 8006d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b0      	blx	r6
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	dc06      	bgt.n	8006d5a <__sflush_r+0xfe>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d52:	81a3      	strh	r3, [r4, #12]
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	e78e      	b.n	8006c78 <__sflush_r+0x1c>
 8006d5a:	4407      	add	r7, r0
 8006d5c:	eba8 0800 	sub.w	r8, r8, r0
 8006d60:	e7e9      	b.n	8006d36 <__sflush_r+0xda>
 8006d62:	bf00      	nop
 8006d64:	20400001 	.word	0x20400001

08006d68 <_fflush_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	690b      	ldr	r3, [r1, #16]
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	b1db      	cbz	r3, 8006daa <_fflush_r+0x42>
 8006d72:	b118      	cbz	r0, 8006d7c <_fflush_r+0x14>
 8006d74:	6983      	ldr	r3, [r0, #24]
 8006d76:	b90b      	cbnz	r3, 8006d7c <_fflush_r+0x14>
 8006d78:	f7ff fa8e 	bl	8006298 <__sinit>
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <_fflush_r+0x48>)
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	d109      	bne.n	8006d96 <_fflush_r+0x2e>
 8006d82:	686c      	ldr	r4, [r5, #4]
 8006d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d88:	b17b      	cbz	r3, 8006daa <_fflush_r+0x42>
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d92:	f7ff bf63 	b.w	8006c5c <__sflush_r>
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <_fflush_r+0x4c>)
 8006d98:	429c      	cmp	r4, r3
 8006d9a:	d101      	bne.n	8006da0 <_fflush_r+0x38>
 8006d9c:	68ac      	ldr	r4, [r5, #8]
 8006d9e:	e7f1      	b.n	8006d84 <_fflush_r+0x1c>
 8006da0:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <_fflush_r+0x50>)
 8006da2:	429c      	cmp	r4, r3
 8006da4:	bf08      	it	eq
 8006da6:	68ec      	ldreq	r4, [r5, #12]
 8006da8:	e7ec      	b.n	8006d84 <_fflush_r+0x1c>
 8006daa:	2000      	movs	r0, #0
 8006dac:	bd38      	pop	{r3, r4, r5, pc}
 8006dae:	bf00      	nop
 8006db0:	0800710c 	.word	0x0800710c
 8006db4:	0800712c 	.word	0x0800712c
 8006db8:	080070ec 	.word	0x080070ec

08006dbc <_lseek_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4c07      	ldr	r4, [pc, #28]	; (8006ddc <_lseek_r+0x20>)
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	4608      	mov	r0, r1
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	6022      	str	r2, [r4, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f7f9 ffd0 	bl	8000d70 <_lseek>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_lseek_r+0x1e>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_lseek_r+0x1e>
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	20004670 	.word	0x20004670

08006de0 <__swhatbuf_r>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	460e      	mov	r6, r1
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	b096      	sub	sp, #88	; 0x58
 8006dec:	4614      	mov	r4, r2
 8006dee:	461d      	mov	r5, r3
 8006df0:	da07      	bge.n	8006e02 <__swhatbuf_r+0x22>
 8006df2:	2300      	movs	r3, #0
 8006df4:	602b      	str	r3, [r5, #0]
 8006df6:	89b3      	ldrh	r3, [r6, #12]
 8006df8:	061a      	lsls	r2, r3, #24
 8006dfa:	d410      	bmi.n	8006e1e <__swhatbuf_r+0x3e>
 8006dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e00:	e00e      	b.n	8006e20 <__swhatbuf_r+0x40>
 8006e02:	466a      	mov	r2, sp
 8006e04:	f000 f8b2 	bl	8006f6c <_fstat_r>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	dbf2      	blt.n	8006df2 <__swhatbuf_r+0x12>
 8006e0c:	9a01      	ldr	r2, [sp, #4]
 8006e0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e16:	425a      	negs	r2, r3
 8006e18:	415a      	adcs	r2, r3
 8006e1a:	602a      	str	r2, [r5, #0]
 8006e1c:	e7ee      	b.n	8006dfc <__swhatbuf_r+0x1c>
 8006e1e:	2340      	movs	r3, #64	; 0x40
 8006e20:	2000      	movs	r0, #0
 8006e22:	6023      	str	r3, [r4, #0]
 8006e24:	b016      	add	sp, #88	; 0x58
 8006e26:	bd70      	pop	{r4, r5, r6, pc}

08006e28 <__smakebuf_r>:
 8006e28:	898b      	ldrh	r3, [r1, #12]
 8006e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e2c:	079d      	lsls	r5, r3, #30
 8006e2e:	4606      	mov	r6, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	d507      	bpl.n	8006e44 <__smakebuf_r+0x1c>
 8006e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	6163      	str	r3, [r4, #20]
 8006e40:	b002      	add	sp, #8
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	ab01      	add	r3, sp, #4
 8006e46:	466a      	mov	r2, sp
 8006e48:	f7ff ffca 	bl	8006de0 <__swhatbuf_r>
 8006e4c:	9900      	ldr	r1, [sp, #0]
 8006e4e:	4605      	mov	r5, r0
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7ff faab 	bl	80063ac <_malloc_r>
 8006e56:	b948      	cbnz	r0, 8006e6c <__smakebuf_r+0x44>
 8006e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5c:	059a      	lsls	r2, r3, #22
 8006e5e:	d4ef      	bmi.n	8006e40 <__smakebuf_r+0x18>
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	f043 0302 	orr.w	r3, r3, #2
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	e7e3      	b.n	8006e34 <__smakebuf_r+0xc>
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <__smakebuf_r+0x7c>)
 8006e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	6020      	str	r0, [r4, #0]
 8006e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e78:	81a3      	strh	r3, [r4, #12]
 8006e7a:	9b00      	ldr	r3, [sp, #0]
 8006e7c:	6163      	str	r3, [r4, #20]
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	6120      	str	r0, [r4, #16]
 8006e82:	b15b      	cbz	r3, 8006e9c <__smakebuf_r+0x74>
 8006e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 f881 	bl	8006f90 <_isatty_r>
 8006e8e:	b128      	cbz	r0, 8006e9c <__smakebuf_r+0x74>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	431d      	orrs	r5, r3
 8006ea0:	81a5      	strh	r5, [r4, #12]
 8006ea2:	e7cd      	b.n	8006e40 <__smakebuf_r+0x18>
 8006ea4:	08006261 	.word	0x08006261

08006ea8 <__malloc_lock>:
 8006ea8:	4770      	bx	lr

08006eaa <__malloc_unlock>:
 8006eaa:	4770      	bx	lr

08006eac <_free_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4605      	mov	r5, r0
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	d045      	beq.n	8006f40 <_free_r+0x94>
 8006eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb8:	1f0c      	subs	r4, r1, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bfb8      	it	lt
 8006ebe:	18e4      	addlt	r4, r4, r3
 8006ec0:	f7ff fff2 	bl	8006ea8 <__malloc_lock>
 8006ec4:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <_free_r+0x98>)
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	4610      	mov	r0, r2
 8006eca:	b933      	cbnz	r3, 8006eda <_free_r+0x2e>
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	6014      	str	r4, [r2, #0]
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed6:	f7ff bfe8 	b.w	8006eaa <__malloc_unlock>
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	d90c      	bls.n	8006ef8 <_free_r+0x4c>
 8006ede:	6821      	ldr	r1, [r4, #0]
 8006ee0:	1862      	adds	r2, r4, r1
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	bf04      	itt	eq
 8006ee6:	681a      	ldreq	r2, [r3, #0]
 8006ee8:	685b      	ldreq	r3, [r3, #4]
 8006eea:	6063      	str	r3, [r4, #4]
 8006eec:	bf04      	itt	eq
 8006eee:	1852      	addeq	r2, r2, r1
 8006ef0:	6022      	streq	r2, [r4, #0]
 8006ef2:	6004      	str	r4, [r0, #0]
 8006ef4:	e7ec      	b.n	8006ed0 <_free_r+0x24>
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	b10a      	cbz	r2, 8006f00 <_free_r+0x54>
 8006efc:	42a2      	cmp	r2, r4
 8006efe:	d9fa      	bls.n	8006ef6 <_free_r+0x4a>
 8006f00:	6819      	ldr	r1, [r3, #0]
 8006f02:	1858      	adds	r0, r3, r1
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d10b      	bne.n	8006f20 <_free_r+0x74>
 8006f08:	6820      	ldr	r0, [r4, #0]
 8006f0a:	4401      	add	r1, r0
 8006f0c:	1858      	adds	r0, r3, r1
 8006f0e:	4282      	cmp	r2, r0
 8006f10:	6019      	str	r1, [r3, #0]
 8006f12:	d1dd      	bne.n	8006ed0 <_free_r+0x24>
 8006f14:	6810      	ldr	r0, [r2, #0]
 8006f16:	6852      	ldr	r2, [r2, #4]
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	4401      	add	r1, r0
 8006f1c:	6019      	str	r1, [r3, #0]
 8006f1e:	e7d7      	b.n	8006ed0 <_free_r+0x24>
 8006f20:	d902      	bls.n	8006f28 <_free_r+0x7c>
 8006f22:	230c      	movs	r3, #12
 8006f24:	602b      	str	r3, [r5, #0]
 8006f26:	e7d3      	b.n	8006ed0 <_free_r+0x24>
 8006f28:	6820      	ldr	r0, [r4, #0]
 8006f2a:	1821      	adds	r1, r4, r0
 8006f2c:	428a      	cmp	r2, r1
 8006f2e:	bf04      	itt	eq
 8006f30:	6811      	ldreq	r1, [r2, #0]
 8006f32:	6852      	ldreq	r2, [r2, #4]
 8006f34:	6062      	str	r2, [r4, #4]
 8006f36:	bf04      	itt	eq
 8006f38:	1809      	addeq	r1, r1, r0
 8006f3a:	6021      	streq	r1, [r4, #0]
 8006f3c:	605c      	str	r4, [r3, #4]
 8006f3e:	e7c7      	b.n	8006ed0 <_free_r+0x24>
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	bf00      	nop
 8006f44:	2000458c 	.word	0x2000458c

08006f48 <_read_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4c07      	ldr	r4, [pc, #28]	; (8006f68 <_read_r+0x20>)
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	4608      	mov	r0, r1
 8006f50:	4611      	mov	r1, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	6022      	str	r2, [r4, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f7f9 fec6 	bl	8000ce8 <_read>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_read_r+0x1e>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_read_r+0x1e>
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20004670 	.word	0x20004670

08006f6c <_fstat_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4c07      	ldr	r4, [pc, #28]	; (8006f8c <_fstat_r+0x20>)
 8006f70:	2300      	movs	r3, #0
 8006f72:	4605      	mov	r5, r0
 8006f74:	4608      	mov	r0, r1
 8006f76:	4611      	mov	r1, r2
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	f7f9 fede 	bl	8000d3a <_fstat>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	d102      	bne.n	8006f88 <_fstat_r+0x1c>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	b103      	cbz	r3, 8006f88 <_fstat_r+0x1c>
 8006f86:	602b      	str	r3, [r5, #0]
 8006f88:	bd38      	pop	{r3, r4, r5, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20004670 	.word	0x20004670

08006f90 <_isatty_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4c06      	ldr	r4, [pc, #24]	; (8006fac <_isatty_r+0x1c>)
 8006f94:	2300      	movs	r3, #0
 8006f96:	4605      	mov	r5, r0
 8006f98:	4608      	mov	r0, r1
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	f7f9 fedd 	bl	8000d5a <_isatty>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_isatty_r+0x1a>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_isatty_r+0x1a>
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	20004670 	.word	0x20004670

08006fb0 <_init>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr

08006fbc <_fini>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr
