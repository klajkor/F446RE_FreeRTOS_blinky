
F446RE_FreeRTOS_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c8  080076c8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080076c8  080076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076d0  080076d0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080076d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a10  2000007c  08007754  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a8c  08007754  00024a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e3e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003308  00000000  00000000  00039eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  0003d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  0003e630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004b17  00000000  00000000  0003f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010272  00000000  00000000  00044407  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da8dd  00000000  00000000  00054679  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012ef56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  0012efd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007480 	.word	0x08007480

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08007480 	.word	0x08007480

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	230a      	movs	r3, #10
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <_write+0x24>)
 80005c6:	f001 ff20 	bl	800240a <HAL_UART_Transmit>
	return len;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200049b8 	.word	0x200049b8

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fbf1 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f865 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f8ff 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 f8d3 	bl	8000794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ee:	f002 fb73 	bl	8002cd8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <main+0x90>)
 80005f4:	2101      	movs	r1, #1
 80005f6:	2001      	movs	r0, #1
 80005f8:	f002 fdd0 	bl	800319c <osSemaphoreNew>
 80005fc:	4602      	mov	r2, r0
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <main+0x94>)
 8000600:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of periodicTimer */
  periodicTimerHandle = osTimerNew(PTCallback, osTimerPeriodic, NULL, &periodicTimer_attributes);
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <main+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <main+0x9c>)
 800060a:	f002 fcb9 	bl	8002f80 <osTimerNew>
 800060e:	4602      	mov	r2, r0
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <main+0xa0>)
 8000612:	601a      	str	r2, [r3, #0]

  /* creation of onceTimer */
  onceTimerHandle = osTimerNew(OTCallback, osTimerOnce, NULL, &onceTimer_attributes);
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <main+0xa4>)
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	4819      	ldr	r0, [pc, #100]	; (8000680 <main+0xa8>)
 800061c:	f002 fcb0 	bl	8002f80 <osTimerNew>
 8000620:	4602      	mov	r2, r0
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <main+0xac>)
 8000624:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000626:	4a18      	ldr	r2, [pc, #96]	; (8000688 <main+0xb0>)
 8000628:	2100      	movs	r1, #0
 800062a:	4818      	ldr	r0, [pc, #96]	; (800068c <main+0xb4>)
 800062c:	f002 fbbe 	bl	8002dac <osThreadNew>
 8000630:	4602      	mov	r2, r0
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <main+0xb8>)
 8000634:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <main+0xbc>)
 8000638:	2100      	movs	r1, #0
 800063a:	4817      	ldr	r0, [pc, #92]	; (8000698 <main+0xc0>)
 800063c:	f002 fbb6 	bl	8002dac <osThreadNew>
 8000640:	4602      	mov	r2, r0
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <main+0xc4>)
 8000644:	601a      	str	r2, [r3, #0]

  /* creation of readButton03 */
  readButton03Handle = osThreadNew(StartReadButton03, NULL, &readButton03_attributes);
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <main+0xc8>)
 8000648:	2100      	movs	r1, #0
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <main+0xcc>)
 800064c:	f002 fbae 	bl	8002dac <osThreadNew>
 8000650:	4602      	mov	r2, r0
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <main+0xd0>)
 8000654:	601a      	str	r2, [r3, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  char *str1 = "osKernelStart()\r\n";
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <main+0xd4>)
 8000658:	607b      	str	r3, [r7, #4]
  printf(str1);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f006 f82c 	bl	80066b8 <iprintf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000660:	f002 fb6e 	bl	8002d40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x8c>
 8000666:	bf00      	nop
 8000668:	08007608 	.word	0x08007608
 800066c:	200049b4 	.word	0x200049b4
 8000670:	080075e8 	.word	0x080075e8
 8000674:	080009f1 	.word	0x080009f1
 8000678:	200049fc 	.word	0x200049fc
 800067c:	080075f8 	.word	0x080075f8
 8000680:	08000a05 	.word	0x08000a05
 8000684:	200049b0 	.word	0x200049b0
 8000688:	0800757c 	.word	0x0800757c
 800068c:	080008c9 	.word	0x080008c9
 8000690:	200049f8 	.word	0x200049f8
 8000694:	080075a0 	.word	0x080075a0
 8000698:	080008f9 	.word	0x080008f9
 800069c:	20004a00 	.word	0x20004a00
 80006a0:	080075c4 	.word	0x080075c4
 80006a4:	08000951 	.word	0x08000951
 80006a8:	200049ac 	.word	0x200049ac
 80006ac:	080074e4 	.word	0x080074e4

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2234      	movs	r2, #52	; 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fff1 	bl	80066a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemClock_Config+0xdc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a2b      	ldr	r2, [pc, #172]	; (800078c <SystemClock_Config+0xdc>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemClock_Config+0xdc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <SystemClock_Config+0xe0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a25      	ldr	r2, [pc, #148]	; (8000790 <SystemClock_Config+0xe0>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemClock_Config+0xe0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000724:	23b4      	movs	r3, #180	; 0xb4
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f981 	bl	8001a40 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000744:	f000 f984 	bl	8000a50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000748:	f000 fe3e 	bl	80013c8 <HAL_PWREx_EnableOverDrive>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000752:	f000 f97d 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2105      	movs	r1, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fe77 	bl	8001468 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000780:	f000 f966 	bl	8000a50 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f001 fdd0 	bl	8002370 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f93b 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200049b8 	.word	0x200049b8
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_GPIO_Init+0xd4>)
 8000874:	f000 fd74 	bl	8001360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_GPIO_Init+0xd8>)
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <MX_GPIO_Init+0xdc>)
 800088e:	f000 fbbd 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000892:	2320      	movs	r3, #32
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xd4>)
 80008aa:	f000 fbaf 	bl	800100c <HAL_GPIO_Init>

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000
 80008c0:	10210000 	.word	0x10210000
 80008c4:	40020800 	.word	0x40020800

080008c8 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	//osTimerStart(periodicTimerHandle, 5000U);
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80008d0:	2120      	movs	r1, #32
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <StartBlink01+0x24>)
 80008d4:	f000 fd5d 	bl	8001392 <HAL_GPIO_TogglePin>
		osDelay(Led_Delay * Delay_Multiplier);
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <StartBlink01+0x28>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <StartBlink01+0x2c>)
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	fb02 f303 	mul.w	r3, r2, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fb07 	bl	8002ef8 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80008ea:	e7f1      	b.n	80008d0 <StartBlink01+0x8>
 80008ec:	40020000 	.word	0x40020000
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  if (Delay_Multiplier == -1)
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <StartBlink02+0x4c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d118      	bne.n	800093c <StartBlink02+0x44>
	  {
		  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <StartBlink02+0x50>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f04f 31ff 	mov.w	r1, #4294967295
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fce0 	bl	80032d8 <osSemaphoreAcquire>
		  osDelay(5000);
 8000918:	f241 3088 	movw	r0, #5000	; 0x1388
 800091c:	f002 faec 	bl	8002ef8 <osDelay>
		  Delay_Multiplier = 4;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <StartBlink02+0x4c>)
 8000922:	2204      	movs	r2, #4
 8000924:	601a      	str	r2, [r3, #0]
		  char *str2 = ">>> Multiplier set to 4\r\n";
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <StartBlink02+0x54>)
 8000928:	60fb      	str	r3, [r7, #12]
		  printf(str2);
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f005 fec4 	bl	80066b8 <iprintf>
		  osSemaphoreRelease(myBinarySem01Handle);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <StartBlink02+0x50>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fd35 	bl	80033a4 <osSemaphoreRelease>
 800093a:	e7e1      	b.n	8000900 <StartBlink02+0x8>
	  }
	  else
	  {
		  osDelay(0);
 800093c:	2000      	movs	r0, #0
 800093e:	f002 fadb 	bl	8002ef8 <osDelay>
	  if (Delay_Multiplier == -1)
 8000942:	e7dd      	b.n	8000900 <StartBlink02+0x8>
 8000944:	20000004 	.word	0x20000004
 8000948:	200049b4 	.word	0x200049b4
 800094c:	080074f8 	.word	0x080074f8

08000950 <StartReadButton03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadButton03 */
void StartReadButton03(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadButton03 */
	/* Infinite loop */
	osSemaphoreRelease(myBinarySem01Handle);
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <StartReadButton03+0x88>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fd21 	bl	80033a4 <osSemaphoreRelease>
	for(;;)
	{
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	481d      	ldr	r0, [pc, #116]	; (80009dc <StartReadButton03+0x8c>)
 8000968:	f000 fce2 	bl	8001330 <HAL_GPIO_ReadPin>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d008      	beq.n	8000984 <StartReadButton03+0x34>
		{
			osSemaphoreRelease(myBinarySem01Handle);
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <StartReadButton03+0x88>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fd14 	bl	80033a4 <osSemaphoreRelease>
			osDelay(0);
 800097c:	2000      	movs	r0, #0
 800097e:	f002 fabb 	bl	8002ef8 <osDelay>
 8000982:	e025      	b.n	80009d0 <StartReadButton03+0x80>
		}
		else
		{
			// Button pushed
			if (osSemaphoreAcquire(myBinarySem01Handle, 10U) == osOK)
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <StartReadButton03+0x88>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	210a      	movs	r1, #10
 800098a:	4618      	mov	r0, r3
 800098c:	f002 fca4 	bl	80032d8 <osSemaphoreAcquire>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11c      	bne.n	80009d0 <StartReadButton03+0x80>
			{
				osTimerStop(onceTimerHandle);
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <StartReadButton03+0x90>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fbb4 	bl	8003108 <osTimerStop>
				osTimerStart(onceTimerHandle, 2000U);
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <StartReadButton03+0x90>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fb6d 	bl	8003088 <osTimerStart>
				char *str3 = "One Shot Timer started\r\n";
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <StartReadButton03+0x94>)
 80009b0:	60fb      	str	r3, [r7, #12]
				printf(str3);
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f005 fe80 	bl	80066b8 <iprintf>
				if (Delay_Multiplier != 1)
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <StartReadButton03+0x98>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d007      	beq.n	80009d0 <StartReadButton03+0x80>
				{
					Delay_Multiplier = 1;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <StartReadButton03+0x98>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	601a      	str	r2, [r3, #0]
					char *str3 = "> Multiplier set to 1\r\n";
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <StartReadButton03+0x9c>)
 80009c8:	60bb      	str	r3, [r7, #8]
					printf(str3);
 80009ca:	68b8      	ldr	r0, [r7, #8]
 80009cc:	f005 fe74 	bl	80066b8 <iprintf>
				}
			}

		}
		osDelay(10);
 80009d0:	200a      	movs	r0, #10
 80009d2:	f002 fa91 	bl	8002ef8 <osDelay>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80009d6:	e7c4      	b.n	8000962 <StartReadButton03+0x12>
 80009d8:	200049b4 	.word	0x200049b4
 80009dc:	40020800 	.word	0x40020800
 80009e0:	200049b0 	.word	0x200049b0
 80009e4:	08007514 	.word	0x08007514
 80009e8:	20000004 	.word	0x20000004
 80009ec:	08007530 	.word	0x08007530

080009f0 <PTCallback>:
  /* USER CODE END StartReadButton03 */
}

/* PTCallback function */
void PTCallback(void *argument)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
	//HAL_UART_Transmit(&huart2, "Sending from PERIODIC TIMER\r\n", 29, 10);
  /* USER CODE END PTCallback */
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <OTCallback>:

/* OTCallback function */
void OTCallback(void *argument)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OTCallback */
	Delay_Multiplier = 4;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <OTCallback+0x20>)
 8000a0e:	2204      	movs	r2, #4
 8000a10:	601a      	str	r2, [r3, #0]
	char *str3 = ">>>> Multiplier set to 4\r\n";
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <OTCallback+0x24>)
 8000a14:	60fb      	str	r3, [r7, #12]
	printf(str3);
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f005 fe4e 	bl	80066b8 <iprintf>
	/* USER CODE END OTCallback */
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000004 	.word	0x20000004
 8000a28:	08007548 	.word	0x08007548

08000a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3e:	f000 f9e3 	bl	8000e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40001000 	.word	0x40001000

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <Error_Handler+0x6>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_MspInit+0x54>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_MspInit+0x54>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x54>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_MspInit+0x54>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_MspInit+0x54>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_MspInit+0x54>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210f      	movs	r1, #15
 8000a9a:	f06f 0001 	mvn.w	r0, #1
 8000a9e:	f000 fa8b 	bl	8000fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12b      	bne.n	8000b2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_UART_MspInit+0x8c>)
 8000b26:	f000 fa71 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2036      	movs	r0, #54	; 0x36
 8000b56:	f000 fa2f 	bl	8000fb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b5a:	2036      	movs	r0, #54	; 0x36
 8000b5c:	f000 fa48 	bl	8000ff0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b7c:	f107 0210 	add.w	r2, r7, #16
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fd88 	bl	800169c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b8c:	f000 fd5e 	bl	800164c <HAL_RCC_GetPCLK1Freq>
 8000b90:	4603      	mov	r3, r0
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_InitTick+0xa8>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	0c9b      	lsrs	r3, r3, #18
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_InitTick+0xac>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_InitTick+0xb0>)
 8000ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_InitTick+0xac>)
 8000bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_InitTick+0xac>)
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_InitTick+0xac>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_InitTick+0xac>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <HAL_InitTick+0xac>)
 8000bc6:	f001 f995 	bl	8001ef4 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_InitTick+0xac>)
 8000bd2:	f001 f9c4 	bl	8001f5e <HAL_TIM_Base_Start_IT>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	20004a04 	.word	0x20004a04
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM6_DAC_IRQHandler+0x10>)
 8000c26:	f001 f9be 	bl	8001fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20004a04 	.word	0x20004a04

08000c34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
	}

return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return -1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c96:	605a      	str	r2, [r3, #4]
	return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_isatty>:

int _isatty(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return 1;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f005 fc98 	bl	800663c <__errno>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	230c      	movs	r3, #12
 8000d10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20020000 	.word	0x20020000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000098 	.word	0x20000098
 8000d40:	20004a90 	.word	0x20004a90

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <SystemInit+0x28>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <SystemInit+0x28>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SystemInit+0x28>)
 8000d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d76:	e003      	b.n	8000d80 <LoopCopyDataInit>

08000d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d7e:	3104      	adds	r1, #4

08000d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d88:	d3f6      	bcc.n	8000d78 <CopyDataInit>
  ldr  r2, =_sbss
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d8c:	e002      	b.n	8000d94 <LoopFillZerobss>

08000d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d90:	f842 3b04 	str.w	r3, [r2], #4

08000d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d98:	d3f9      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d9a:	f7ff ffd3 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f005 fc53 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fc19 	bl	80005d8 <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dac:	080076d8 	.word	0x080076d8
  ldr  r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000db4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000db8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000dbc:	20004a8c 	.word	0x20004a8c

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f8d8 	bl	8000fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fea4 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fe2e 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000010 	.word	0x20000010
 8000e2c:	20004a44 	.word	0x20004a44

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20004a44 	.word	0x20004a44

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff4c 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fca:	f7ff ff61 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f7ff ffb1 	bl	8000f3c <NVIC_EncodePriority>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff80 	bl	8000ee8 <__NVIC_SetPriority>
}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff54 	bl	8000eac <__NVIC_EnableIRQ>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	e165      	b.n	80012f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 8154 	bne.w	80012ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d00b      	beq.n	8001066 <HAL_GPIO_Init+0x5a>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105a:	2b11      	cmp	r3, #17
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b12      	cmp	r3, #18
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0xfc>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b12      	cmp	r3, #18
 8001106:	d123      	bne.n	8001150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80ae 	beq.w	80012ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <HAL_GPIO_Init+0x2fc>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a5b      	ldr	r2, [pc, #364]	; (8001308 <HAL_GPIO_Init+0x2fc>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b59      	ldr	r3, [pc, #356]	; (8001308 <HAL_GPIO_Init+0x2fc>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ae:	4a57      	ldr	r2, [pc, #348]	; (800130c <HAL_GPIO_Init+0x300>)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4e      	ldr	r2, [pc, #312]	; (8001310 <HAL_GPIO_Init+0x304>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x21a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4d      	ldr	r2, [pc, #308]	; (8001314 <HAL_GPIO_Init+0x308>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x216>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4c      	ldr	r2, [pc, #304]	; (8001318 <HAL_GPIO_Init+0x30c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x212>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4b      	ldr	r2, [pc, #300]	; (800131c <HAL_GPIO_Init+0x310>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x20e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4a      	ldr	r2, [pc, #296]	; (8001320 <HAL_GPIO_Init+0x314>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x20a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a49      	ldr	r2, [pc, #292]	; (8001324 <HAL_GPIO_Init+0x318>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x206>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a48      	ldr	r2, [pc, #288]	; (8001328 <HAL_GPIO_Init+0x31c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x202>
 800120a:	2306      	movs	r3, #6
 800120c:	e00c      	b.n	8001228 <HAL_GPIO_Init+0x21c>
 800120e:	2307      	movs	r3, #7
 8001210:	e00a      	b.n	8001228 <HAL_GPIO_Init+0x21c>
 8001212:	2305      	movs	r3, #5
 8001214:	e008      	b.n	8001228 <HAL_GPIO_Init+0x21c>
 8001216:	2304      	movs	r3, #4
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x21c>
 800121a:	2303      	movs	r3, #3
 800121c:	e004      	b.n	8001228 <HAL_GPIO_Init+0x21c>
 800121e:	2302      	movs	r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x21c>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x21c>
 8001226:	2300      	movs	r3, #0
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	f002 0203 	and.w	r2, r2, #3
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4093      	lsls	r3, r2
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001238:	4934      	ldr	r1, [pc, #208]	; (800130c <HAL_GPIO_Init+0x300>)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <HAL_GPIO_Init+0x320>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126a:	4a30      	ldr	r2, [pc, #192]	; (800132c <HAL_GPIO_Init+0x320>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001270:	4b2e      	ldr	r3, [pc, #184]	; (800132c <HAL_GPIO_Init+0x320>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001294:	4a25      	ldr	r2, [pc, #148]	; (800132c <HAL_GPIO_Init+0x320>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_GPIO_Init+0x320>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_GPIO_Init+0x320>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_GPIO_Init+0x320>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a10      	ldr	r2, [pc, #64]	; (800132c <HAL_GPIO_Init+0x320>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	f67f ae96 	bls.w	8001028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012fc:	bf00      	nop
 80012fe:	3724      	adds	r7, #36	; 0x24
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40023800 	.word	0x40023800
 800130c:	40013800 	.word	0x40013800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	40021000 	.word	0x40021000
 8001324:	40021400 	.word	0x40021400
 8001328:	40021800 	.word	0x40021800
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e001      	b.n	8001352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001370:	787b      	ldrb	r3, [r7, #1]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800137c:	e003      	b.n	8001386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	041a      	lsls	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	619a      	str	r2, [r3, #24]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	401a      	ands	r2, r3
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d104      	bne.n	80013b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	041a      	lsls	r2, r3, #16
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_PWREx_EnableOverDrive+0x90>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <HAL_PWREx_EnableOverDrive+0x90>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_PWREx_EnableOverDrive+0x90>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_PWREx_EnableOverDrive+0x94>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f4:	f7ff fd1c 	bl	8000e30 <HAL_GetTick>
 80013f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013fa:	e009      	b.n	8001410 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013fc:	f7ff fd18 	bl	8000e30 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800140a:	d901      	bls.n	8001410 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e01f      	b.n	8001450 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_PWREx_EnableOverDrive+0x98>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141c:	d1ee      	bne.n	80013fc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001424:	f7ff fd04 	bl	8000e30 <HAL_GetTick>
 8001428:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800142a:	e009      	b.n	8001440 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800142c:	f7ff fd00 	bl	8000e30 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800143a:	d901      	bls.n	8001440 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e007      	b.n	8001450 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <HAL_PWREx_EnableOverDrive+0x98>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800144c:	d1ee      	bne.n	800142c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	420e0040 	.word	0x420e0040
 8001460:	40007000 	.word	0x40007000
 8001464:	420e0044 	.word	0x420e0044

08001468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0cc      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d90c      	bls.n	80014a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b65      	ldr	r3, [pc, #404]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0b8      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014bc:	4b59      	ldr	r3, [pc, #356]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a58      	ldr	r2, [pc, #352]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a52      	ldr	r2, [pc, #328]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e0:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	494d      	ldr	r1, [pc, #308]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d044      	beq.n	8001588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d119      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e07f      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d003      	beq.n	8001526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001522:	2b03      	cmp	r3, #3
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001526:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e06f      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e067      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f023 0203 	bic.w	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4934      	ldr	r1, [pc, #208]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001558:	f7ff fc6a 	bl	8000e30 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	e00a      	b.n	8001576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f7ff fc66 	bl	8000e30 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e04f      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 020c 	and.w	r2, r3, #12
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	429a      	cmp	r2, r3
 8001586:	d1eb      	bne.n	8001560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d20c      	bcs.n	80015b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e032      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4916      	ldr	r1, [pc, #88]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	490e      	ldr	r1, [pc, #56]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ee:	f000 f887 	bl	8001700 <HAL_RCC_GetSysClockFreq>
 80015f2:	4601      	mov	r1, r0
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	fa21 f303 	lsr.w	r3, r1, r3
 8001606:	4a09      	ldr	r2, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x1c8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fa96 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00
 8001624:	40023800 	.word	0x40023800
 8001628:	08007618 	.word	0x08007618
 800162c:	20000008 	.word	0x20000008
 8001630:	2000000c 	.word	0x2000000c

08001634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_RCC_GetHCLKFreq+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008

0800164c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001650:	f7ff fff0 	bl	8001634 <HAL_RCC_GetHCLKFreq>
 8001654:	4601      	mov	r1, r0
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	0a9b      	lsrs	r3, r3, #10
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001668:	4618      	mov	r0, r3
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	08007628 	.word	0x08007628

08001674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001678:	f7ff ffdc 	bl	8001634 <HAL_RCC_GetHCLKFreq>
 800167c:	4601      	mov	r1, r0
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	0b5b      	lsrs	r3, r3, #13
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	08007628 	.word	0x08007628

0800169c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	220f      	movs	r2, #15
 80016aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_RCC_GetClockConfig+0x60>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 020f 	and.w	r2, r3, #15
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	601a      	str	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40023c00 	.word	0x40023c00

08001700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171a:	4bc6      	ldr	r3, [pc, #792]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b0c      	cmp	r3, #12
 8001724:	f200 817e 	bhi.w	8001a24 <HAL_RCC_GetSysClockFreq+0x324>
 8001728:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <HAL_RCC_GetSysClockFreq+0x30>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	08001765 	.word	0x08001765
 8001734:	08001a25 	.word	0x08001a25
 8001738:	08001a25 	.word	0x08001a25
 800173c:	08001a25 	.word	0x08001a25
 8001740:	0800176b 	.word	0x0800176b
 8001744:	08001a25 	.word	0x08001a25
 8001748:	08001a25 	.word	0x08001a25
 800174c:	08001a25 	.word	0x08001a25
 8001750:	08001771 	.word	0x08001771
 8001754:	08001a25 	.word	0x08001a25
 8001758:	08001a25 	.word	0x08001a25
 800175c:	08001a25 	.word	0x08001a25
 8001760:	080018cd 	.word	0x080018cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001764:	4bb4      	ldr	r3, [pc, #720]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x338>)
 8001766:	613b      	str	r3, [r7, #16]
       break;
 8001768:	e15f      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176a:	4bb4      	ldr	r3, [pc, #720]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x33c>)
 800176c:	613b      	str	r3, [r7, #16]
      break;
 800176e:	e15c      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001770:	4bb0      	ldr	r3, [pc, #704]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001778:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177a:	4bae      	ldr	r3, [pc, #696]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d04a      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001786:	4bab      	ldr	r3, [pc, #684]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	099b      	lsrs	r3, r3, #6
 800178c:	f04f 0400 	mov.w	r4, #0
 8001790:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	ea03 0501 	and.w	r5, r3, r1
 800179c:	ea04 0602 	and.w	r6, r4, r2
 80017a0:	4629      	mov	r1, r5
 80017a2:	4632      	mov	r2, r6
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	f04f 0400 	mov.w	r4, #0
 80017ac:	0154      	lsls	r4, r2, #5
 80017ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017b2:	014b      	lsls	r3, r1, #5
 80017b4:	4619      	mov	r1, r3
 80017b6:	4622      	mov	r2, r4
 80017b8:	1b49      	subs	r1, r1, r5
 80017ba:	eb62 0206 	sbc.w	r2, r2, r6
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	f04f 0400 	mov.w	r4, #0
 80017c6:	0194      	lsls	r4, r2, #6
 80017c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017cc:	018b      	lsls	r3, r1, #6
 80017ce:	1a5b      	subs	r3, r3, r1
 80017d0:	eb64 0402 	sbc.w	r4, r4, r2
 80017d4:	f04f 0100 	mov.w	r1, #0
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	00e2      	lsls	r2, r4, #3
 80017de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017e2:	00d9      	lsls	r1, r3, #3
 80017e4:	460b      	mov	r3, r1
 80017e6:	4614      	mov	r4, r2
 80017e8:	195b      	adds	r3, r3, r5
 80017ea:	eb44 0406 	adc.w	r4, r4, r6
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	0262      	lsls	r2, r4, #9
 80017f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017fc:	0259      	lsls	r1, r3, #9
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	4618      	mov	r0, r3
 8001804:	4621      	mov	r1, r4
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f04f 0400 	mov.w	r4, #0
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	f7fe fd4e 	bl	80002b0 <__aeabi_uldivmod>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e049      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181c:	4b85      	ldr	r3, [pc, #532]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	099b      	lsrs	r3, r3, #6
 8001822:	f04f 0400 	mov.w	r4, #0
 8001826:	f240 11ff 	movw	r1, #511	; 0x1ff
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	ea03 0501 	and.w	r5, r3, r1
 8001832:	ea04 0602 	and.w	r6, r4, r2
 8001836:	4629      	mov	r1, r5
 8001838:	4632      	mov	r2, r6
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	f04f 0400 	mov.w	r4, #0
 8001842:	0154      	lsls	r4, r2, #5
 8001844:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001848:	014b      	lsls	r3, r1, #5
 800184a:	4619      	mov	r1, r3
 800184c:	4622      	mov	r2, r4
 800184e:	1b49      	subs	r1, r1, r5
 8001850:	eb62 0206 	sbc.w	r2, r2, r6
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	f04f 0400 	mov.w	r4, #0
 800185c:	0194      	lsls	r4, r2, #6
 800185e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001862:	018b      	lsls	r3, r1, #6
 8001864:	1a5b      	subs	r3, r3, r1
 8001866:	eb64 0402 	sbc.w	r4, r4, r2
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	00e2      	lsls	r2, r4, #3
 8001874:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001878:	00d9      	lsls	r1, r3, #3
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	195b      	adds	r3, r3, r5
 8001880:	eb44 0406 	adc.w	r4, r4, r6
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	02a2      	lsls	r2, r4, #10
 800188e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001892:	0299      	lsls	r1, r3, #10
 8001894:	460b      	mov	r3, r1
 8001896:	4614      	mov	r4, r2
 8001898:	4618      	mov	r0, r3
 800189a:	4621      	mov	r1, r4
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4623      	mov	r3, r4
 80018a6:	f7fe fd03 	bl	80002b0 <__aeabi_uldivmod>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018b0:	4b60      	ldr	r3, [pc, #384]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	3301      	adds	r3, #1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	613b      	str	r3, [r7, #16]
      break;
 80018ca:	e0ae      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018cc:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d04a      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b54      	ldr	r3, [pc, #336]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	f04f 0400 	mov.w	r4, #0
 80018ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	ea03 0501 	and.w	r5, r3, r1
 80018f8:	ea04 0602 	and.w	r6, r4, r2
 80018fc:	4629      	mov	r1, r5
 80018fe:	4632      	mov	r2, r6
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	f04f 0400 	mov.w	r4, #0
 8001908:	0154      	lsls	r4, r2, #5
 800190a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800190e:	014b      	lsls	r3, r1, #5
 8001910:	4619      	mov	r1, r3
 8001912:	4622      	mov	r2, r4
 8001914:	1b49      	subs	r1, r1, r5
 8001916:	eb62 0206 	sbc.w	r2, r2, r6
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	f04f 0400 	mov.w	r4, #0
 8001922:	0194      	lsls	r4, r2, #6
 8001924:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001928:	018b      	lsls	r3, r1, #6
 800192a:	1a5b      	subs	r3, r3, r1
 800192c:	eb64 0402 	sbc.w	r4, r4, r2
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	00e2      	lsls	r2, r4, #3
 800193a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800193e:	00d9      	lsls	r1, r3, #3
 8001940:	460b      	mov	r3, r1
 8001942:	4614      	mov	r4, r2
 8001944:	195b      	adds	r3, r3, r5
 8001946:	eb44 0406 	adc.w	r4, r4, r6
 800194a:	f04f 0100 	mov.w	r1, #0
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	0262      	lsls	r2, r4, #9
 8001954:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001958:	0259      	lsls	r1, r3, #9
 800195a:	460b      	mov	r3, r1
 800195c:	4614      	mov	r4, r2
 800195e:	4618      	mov	r0, r3
 8001960:	4621      	mov	r1, r4
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f04f 0400 	mov.w	r4, #0
 8001968:	461a      	mov	r2, r3
 800196a:	4623      	mov	r3, r4
 800196c:	f7fe fca0 	bl	80002b0 <__aeabi_uldivmod>
 8001970:	4603      	mov	r3, r0
 8001972:	460c      	mov	r4, r1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e049      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001978:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	f04f 0400 	mov.w	r4, #0
 8001982:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	ea03 0501 	and.w	r5, r3, r1
 800198e:	ea04 0602 	and.w	r6, r4, r2
 8001992:	4629      	mov	r1, r5
 8001994:	4632      	mov	r2, r6
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	f04f 0400 	mov.w	r4, #0
 800199e:	0154      	lsls	r4, r2, #5
 80019a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019a4:	014b      	lsls	r3, r1, #5
 80019a6:	4619      	mov	r1, r3
 80019a8:	4622      	mov	r2, r4
 80019aa:	1b49      	subs	r1, r1, r5
 80019ac:	eb62 0206 	sbc.w	r2, r2, r6
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	f04f 0400 	mov.w	r4, #0
 80019b8:	0194      	lsls	r4, r2, #6
 80019ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019be:	018b      	lsls	r3, r1, #6
 80019c0:	1a5b      	subs	r3, r3, r1
 80019c2:	eb64 0402 	sbc.w	r4, r4, r2
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	00e2      	lsls	r2, r4, #3
 80019d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019d4:	00d9      	lsls	r1, r3, #3
 80019d6:	460b      	mov	r3, r1
 80019d8:	4614      	mov	r4, r2
 80019da:	195b      	adds	r3, r3, r5
 80019dc:	eb44 0406 	adc.w	r4, r4, r6
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	02a2      	lsls	r2, r4, #10
 80019ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019ee:	0299      	lsls	r1, r3, #10
 80019f0:	460b      	mov	r3, r1
 80019f2:	4614      	mov	r4, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	4621      	mov	r1, r4
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f04f 0400 	mov.w	r4, #0
 80019fe:	461a      	mov	r2, r3
 8001a00:	4623      	mov	r3, r4
 8001a02:	f7fe fc55 	bl	80002b0 <__aeabi_uldivmod>
 8001a06:	4603      	mov	r3, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0f1b      	lsrs	r3, r3, #28
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	613b      	str	r3, [r7, #16]
      break;
 8001a22:	e002      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RCC_GetSysClockFreq+0x338>)
 8001a26:	613b      	str	r3, [r7, #16]
      break;
 8001a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2a:	693b      	ldr	r3, [r7, #16]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	00f42400 	.word	0x00f42400
 8001a3c:	007a1200 	.word	0x007a1200

08001a40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8083 	beq.w	8001b60 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a5a:	4b95      	ldr	r3, [pc, #596]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d019      	beq.n	8001a9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a66:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d106      	bne.n	8001a80 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a72:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7e:	d00c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a80:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d112      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8c:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a98:	d10b      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9a:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d05b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x11e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d157      	bne.n	8001b5e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e216      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x8a>
 8001abc:	4b7c      	ldr	r3, [pc, #496]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a7b      	ldr	r2, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e01d      	b.n	8001b06 <HAL_RCC_OscConfig+0xc6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad2:	d10c      	bne.n	8001aee <HAL_RCC_OscConfig+0xae>
 8001ad4:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a75      	ldr	r2, [pc, #468]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0xc6>
 8001aee:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6f      	ldr	r2, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d013      	beq.n	8001b36 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f98f 	bl	8000e30 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b16:	f7ff f98b 	bl	8000e30 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b64      	cmp	r3, #100	; 0x64
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1db      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b28:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0xd6>
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff f97b 	bl	8000e30 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3e:	f7ff f977 	bl	8000e30 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e1c7      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b50:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_OscConfig+0xfe>
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d06f      	beq.n	8001c4c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d017      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d105      	bne.n	8001b90 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b84:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d11c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9c:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d116      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba8:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x180>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e18f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4938      	ldr	r1, [pc, #224]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd4:	e03a      	b.n	8001c4c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d020      	beq.n	8001c20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bde:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f924 	bl	8000e30 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff f920 	bl	8000e30 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e170      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4925      	ldr	r1, [pc, #148]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
 8001c1e:	e015      	b.n	8001c4c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f903 	bl	8000e30 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f8ff 	bl	8000e30 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e14f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d037      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d016      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff f8e3 	bl	8000e30 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7ff f8df 	bl	8000e30 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e12f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x22e>
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f8cc 	bl	8000e30 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f8c8 	bl	8000e30 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e118      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	42470000 	.word	0x42470000
 8001cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b8a      	ldr	r3, [pc, #552]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e9      	bne.n	8001c9c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8097 	beq.w	8001e04 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b83      	ldr	r3, [pc, #524]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10f      	bne.n	8001d06 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b7f      	ldr	r3, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a7e      	ldr	r2, [pc, #504]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b7c      	ldr	r3, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b79      	ldr	r3, [pc, #484]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a75      	ldr	r2, [pc, #468]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff f887 	bl	8000e30 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7ff f883 	bl	8000e30 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0d3      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b6c      	ldr	r3, [pc, #432]	; (8001eec <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x31a>
 8001d4c:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6713      	str	r3, [r2, #112]	; 0x70
 8001d58:	e01c      	b.n	8001d94 <HAL_RCC_OscConfig+0x354>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x33c>
 8001d62:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d72:	4a5d      	ldr	r2, [pc, #372]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0x354>
 8001d7c:	4b5a      	ldr	r3, [pc, #360]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a59      	ldr	r2, [pc, #356]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	4a56      	ldr	r2, [pc, #344]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001d8e:	f023 0304 	bic.w	r3, r3, #4
 8001d92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d015      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f848 	bl	8000e30 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7ff f844 	bl	8000e30 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e092      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dba:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0ee      	beq.n	8001da4 <HAL_RCC_OscConfig+0x364>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc8:	f7ff f832 	bl	8000e30 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f82e 	bl	8000e30 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e07c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de6:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ee      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d068      	beq.n	8001ede <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d060      	beq.n	8001eda <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d145      	bne.n	8001eac <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff f803 	bl	8000e30 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe ffff 	bl	8000e30 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e04f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69da      	ldr	r2, [r3, #28]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	019b      	lsls	r3, r3, #6
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	3b01      	subs	r3, #1
 8001e66:	041b      	lsls	r3, r3, #16
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	061b      	lsls	r3, r3, #24
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	071b      	lsls	r3, r3, #28
 8001e78:	491b      	ldr	r1, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe ffd4 	bl	8000e30 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7fe ffd0 	bl	8000e30 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e020      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x44c>
 8001eaa:	e018      	b.n	8001ede <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_RCC_OscConfig+0x4b0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7fe ffbd 	bl	8000e30 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe ffb9 	bl	8000e30 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e009      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x4a8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x47a>
 8001ed8:	e001      	b.n	8001ede <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	42470060 	.word	0x42470060

08001ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e01d      	b.n	8001f42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f815 	bl	8001f4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f000 f968 	bl	8002208 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d007      	beq.n	8001f98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d122      	bne.n	8002002 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d11b      	bne.n	8002002 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f06f 0202 	mvn.w	r2, #2
 8001fd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f8ee 	bl	80021ca <HAL_TIM_IC_CaptureCallback>
 8001fee:	e005      	b.n	8001ffc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8e0 	bl	80021b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8f1 	bl	80021de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d122      	bne.n	8002056 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b04      	cmp	r3, #4
 800201c:	d11b      	bne.n	8002056 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f06f 0204 	mvn.w	r2, #4
 8002026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f8c4 	bl	80021ca <HAL_TIM_IC_CaptureCallback>
 8002042:	e005      	b.n	8002050 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8b6 	bl	80021b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c7 	bl	80021de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b08      	cmp	r3, #8
 8002062:	d122      	bne.n	80020aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11b      	bne.n	80020aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f06f 0208 	mvn.w	r2, #8
 800207a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2204      	movs	r2, #4
 8002080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f89a 	bl	80021ca <HAL_TIM_IC_CaptureCallback>
 8002096:	e005      	b.n	80020a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f88c 	bl	80021b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f89d 	bl	80021de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d122      	bne.n	80020fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d11b      	bne.n	80020fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f06f 0210 	mvn.w	r2, #16
 80020ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2208      	movs	r2, #8
 80020d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f870 	bl	80021ca <HAL_TIM_IC_CaptureCallback>
 80020ea:	e005      	b.n	80020f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f862 	bl	80021b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f873 	bl	80021de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10e      	bne.n	800212a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f06f 0201 	mvn.w	r2, #1
 8002122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7fe fc81 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d10e      	bne.n	8002156 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	d107      	bne.n	8002156 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800214e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f903 	bl	800235c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d10e      	bne.n	8002182 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d107      	bne.n	8002182 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800217a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f838 	bl	80021f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b20      	cmp	r3, #32
 800218e:	d10e      	bne.n	80021ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d107      	bne.n	80021ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f06f 0220 	mvn.w	r2, #32
 80021a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f8cd 	bl	8002348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a40      	ldr	r2, [pc, #256]	; (800231c <TIM_Base_SetConfig+0x114>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002226:	d00f      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <TIM_Base_SetConfig+0x118>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00b      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3c      	ldr	r2, [pc, #240]	; (8002324 <TIM_Base_SetConfig+0x11c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <TIM_Base_SetConfig+0x120>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3a      	ldr	r2, [pc, #232]	; (800232c <TIM_Base_SetConfig+0x124>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2f      	ldr	r2, [pc, #188]	; (800231c <TIM_Base_SetConfig+0x114>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d027      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <TIM_Base_SetConfig+0x118>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d023      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a2b      	ldr	r2, [pc, #172]	; (8002324 <TIM_Base_SetConfig+0x11c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2a      	ldr	r2, [pc, #168]	; (8002328 <TIM_Base_SetConfig+0x120>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a29      	ldr	r2, [pc, #164]	; (800232c <TIM_Base_SetConfig+0x124>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d017      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a28      	ldr	r2, [pc, #160]	; (8002330 <TIM_Base_SetConfig+0x128>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a27      	ldr	r2, [pc, #156]	; (8002334 <TIM_Base_SetConfig+0x12c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00f      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <TIM_Base_SetConfig+0x130>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <TIM_Base_SetConfig+0x134>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <TIM_Base_SetConfig+0x138>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d003      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a23      	ldr	r2, [pc, #140]	; (8002344 <TIM_Base_SetConfig+0x13c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <TIM_Base_SetConfig+0x114>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <TIM_Base_SetConfig+0xf8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <TIM_Base_SetConfig+0x124>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d103      	bne.n	8002308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	615a      	str	r2, [r3, #20]
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800
 8002328:	40000c00 	.word	0x40000c00
 800232c:	40010400 	.word	0x40010400
 8002330:	40014000 	.word	0x40014000
 8002334:	40014400 	.word	0x40014400
 8002338:	40014800 	.word	0x40014800
 800233c:	40001800 	.word	0x40001800
 8002340:	40001c00 	.word	0x40001c00
 8002344:	40002000 	.word	0x40002000

08002348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e03f      	b.n	8002402 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fb8a 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2224      	movs	r2, #36	; 0x24
 80023a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f90b 	bl	80025d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b088      	sub	sp, #32
 800240e:	af02      	add	r7, sp, #8
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	f040 8083 	bne.w	8002532 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_UART_Transmit+0x2e>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e07b      	b.n	8002534 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_UART_Transmit+0x40>
 8002446:	2302      	movs	r3, #2
 8002448:	e074      	b.n	8002534 <HAL_UART_Transmit+0x12a>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2221      	movs	r2, #33	; 0x21
 800245c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002460:	f7fe fce6 	bl	8000e30 <HAL_GetTick>
 8002464:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800247a:	e042      	b.n	8002502 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	d122      	bne.n	80024da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2200      	movs	r2, #0
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f84c 	bl	800253c <UART_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e042      	b.n	8002534 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3302      	adds	r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	e017      	b.n	8002502 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3301      	adds	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	e013      	b.n	8002502 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2200      	movs	r2, #0
 80024e2:	2180      	movs	r1, #128	; 0x80
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f829 	bl	800253c <UART_WaitOnFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e01f      	b.n	8002534 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	60ba      	str	r2, [r7, #8]
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1b7      	bne.n	800247c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2200      	movs	r2, #0
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f810 	bl	800253c <UART_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e006      	b.n	8002534 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
  }
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800254c:	e02c      	b.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d028      	beq.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x30>
 800255c:	f7fe fc68 	bl	8000e30 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	429a      	cmp	r2, r3
 800256a:	d21d      	bcs.n	80025a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800257a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e00f      	b.n	80025c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d0c3      	beq.n	800254e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002612:	f023 030c 	bic.w	r3, r3, #12
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	430b      	orrs	r3, r1
 800261e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263e:	f040 818b 	bne.w	8002958 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4ac1      	ldr	r2, [pc, #772]	; (800294c <UART_SetConfig+0x37c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d005      	beq.n	8002658 <UART_SetConfig+0x88>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4abf      	ldr	r2, [pc, #764]	; (8002950 <UART_SetConfig+0x380>)
 8002652:	4293      	cmp	r3, r2
 8002654:	f040 80bd 	bne.w	80027d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002658:	f7ff f80c 	bl	8001674 <HAL_RCC_GetPCLK2Freq>
 800265c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	461d      	mov	r5, r3
 8002662:	f04f 0600 	mov.w	r6, #0
 8002666:	46a8      	mov	r8, r5
 8002668:	46b1      	mov	r9, r6
 800266a:	eb18 0308 	adds.w	r3, r8, r8
 800266e:	eb49 0409 	adc.w	r4, r9, r9
 8002672:	4698      	mov	r8, r3
 8002674:	46a1      	mov	r9, r4
 8002676:	eb18 0805 	adds.w	r8, r8, r5
 800267a:	eb49 0906 	adc.w	r9, r9, r6
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800268a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800268e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002692:	4688      	mov	r8, r1
 8002694:	4691      	mov	r9, r2
 8002696:	eb18 0005 	adds.w	r0, r8, r5
 800269a:	eb49 0106 	adc.w	r1, r9, r6
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	461d      	mov	r5, r3
 80026a4:	f04f 0600 	mov.w	r6, #0
 80026a8:	196b      	adds	r3, r5, r5
 80026aa:	eb46 0406 	adc.w	r4, r6, r6
 80026ae:	461a      	mov	r2, r3
 80026b0:	4623      	mov	r3, r4
 80026b2:	f7fd fdfd 	bl	80002b0 <__aeabi_uldivmod>
 80026b6:	4603      	mov	r3, r0
 80026b8:	460c      	mov	r4, r1
 80026ba:	461a      	mov	r2, r3
 80026bc:	4ba5      	ldr	r3, [pc, #660]	; (8002954 <UART_SetConfig+0x384>)
 80026be:	fba3 2302 	umull	r2, r3, r3, r2
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	461d      	mov	r5, r3
 80026cc:	f04f 0600 	mov.w	r6, #0
 80026d0:	46a9      	mov	r9, r5
 80026d2:	46b2      	mov	sl, r6
 80026d4:	eb19 0309 	adds.w	r3, r9, r9
 80026d8:	eb4a 040a 	adc.w	r4, sl, sl
 80026dc:	4699      	mov	r9, r3
 80026de:	46a2      	mov	sl, r4
 80026e0:	eb19 0905 	adds.w	r9, r9, r5
 80026e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026fc:	4689      	mov	r9, r1
 80026fe:	4692      	mov	sl, r2
 8002700:	eb19 0005 	adds.w	r0, r9, r5
 8002704:	eb4a 0106 	adc.w	r1, sl, r6
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	461d      	mov	r5, r3
 800270e:	f04f 0600 	mov.w	r6, #0
 8002712:	196b      	adds	r3, r5, r5
 8002714:	eb46 0406 	adc.w	r4, r6, r6
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	f7fd fdc8 	bl	80002b0 <__aeabi_uldivmod>
 8002720:	4603      	mov	r3, r0
 8002722:	460c      	mov	r4, r1
 8002724:	461a      	mov	r2, r3
 8002726:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <UART_SetConfig+0x384>)
 8002728:	fba3 1302 	umull	r1, r3, r3, r2
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	2164      	movs	r1, #100	; 0x64
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	3332      	adds	r3, #50	; 0x32
 800273a:	4a86      	ldr	r2, [pc, #536]	; (8002954 <UART_SetConfig+0x384>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002748:	4498      	add	r8, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	461d      	mov	r5, r3
 800274e:	f04f 0600 	mov.w	r6, #0
 8002752:	46a9      	mov	r9, r5
 8002754:	46b2      	mov	sl, r6
 8002756:	eb19 0309 	adds.w	r3, r9, r9
 800275a:	eb4a 040a 	adc.w	r4, sl, sl
 800275e:	4699      	mov	r9, r3
 8002760:	46a2      	mov	sl, r4
 8002762:	eb19 0905 	adds.w	r9, r9, r5
 8002766:	eb4a 0a06 	adc.w	sl, sl, r6
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002776:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800277a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800277e:	4689      	mov	r9, r1
 8002780:	4692      	mov	sl, r2
 8002782:	eb19 0005 	adds.w	r0, r9, r5
 8002786:	eb4a 0106 	adc.w	r1, sl, r6
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	461d      	mov	r5, r3
 8002790:	f04f 0600 	mov.w	r6, #0
 8002794:	196b      	adds	r3, r5, r5
 8002796:	eb46 0406 	adc.w	r4, r6, r6
 800279a:	461a      	mov	r2, r3
 800279c:	4623      	mov	r3, r4
 800279e:	f7fd fd87 	bl	80002b0 <__aeabi_uldivmod>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <UART_SetConfig+0x384>)
 80027aa:	fba3 1302 	umull	r1, r3, r3, r2
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2164      	movs	r1, #100	; 0x64
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	3332      	adds	r3, #50	; 0x32
 80027bc:	4a65      	ldr	r2, [pc, #404]	; (8002954 <UART_SetConfig+0x384>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	f003 0207 	and.w	r2, r3, #7
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4442      	add	r2, r8
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	e26f      	b.n	8002cb2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027d2:	f7fe ff3b 	bl	800164c <HAL_RCC_GetPCLK1Freq>
 80027d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	461d      	mov	r5, r3
 80027dc:	f04f 0600 	mov.w	r6, #0
 80027e0:	46a8      	mov	r8, r5
 80027e2:	46b1      	mov	r9, r6
 80027e4:	eb18 0308 	adds.w	r3, r8, r8
 80027e8:	eb49 0409 	adc.w	r4, r9, r9
 80027ec:	4698      	mov	r8, r3
 80027ee:	46a1      	mov	r9, r4
 80027f0:	eb18 0805 	adds.w	r8, r8, r5
 80027f4:	eb49 0906 	adc.w	r9, r9, r6
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002804:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002808:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800280c:	4688      	mov	r8, r1
 800280e:	4691      	mov	r9, r2
 8002810:	eb18 0005 	adds.w	r0, r8, r5
 8002814:	eb49 0106 	adc.w	r1, r9, r6
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	461d      	mov	r5, r3
 800281e:	f04f 0600 	mov.w	r6, #0
 8002822:	196b      	adds	r3, r5, r5
 8002824:	eb46 0406 	adc.w	r4, r6, r6
 8002828:	461a      	mov	r2, r3
 800282a:	4623      	mov	r3, r4
 800282c:	f7fd fd40 	bl	80002b0 <__aeabi_uldivmod>
 8002830:	4603      	mov	r3, r0
 8002832:	460c      	mov	r4, r1
 8002834:	461a      	mov	r2, r3
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <UART_SetConfig+0x384>)
 8002838:	fba3 2302 	umull	r2, r3, r3, r2
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	461d      	mov	r5, r3
 8002846:	f04f 0600 	mov.w	r6, #0
 800284a:	46a9      	mov	r9, r5
 800284c:	46b2      	mov	sl, r6
 800284e:	eb19 0309 	adds.w	r3, r9, r9
 8002852:	eb4a 040a 	adc.w	r4, sl, sl
 8002856:	4699      	mov	r9, r3
 8002858:	46a2      	mov	sl, r4
 800285a:	eb19 0905 	adds.w	r9, r9, r5
 800285e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800286e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002872:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002876:	4689      	mov	r9, r1
 8002878:	4692      	mov	sl, r2
 800287a:	eb19 0005 	adds.w	r0, r9, r5
 800287e:	eb4a 0106 	adc.w	r1, sl, r6
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	461d      	mov	r5, r3
 8002888:	f04f 0600 	mov.w	r6, #0
 800288c:	196b      	adds	r3, r5, r5
 800288e:	eb46 0406 	adc.w	r4, r6, r6
 8002892:	461a      	mov	r2, r3
 8002894:	4623      	mov	r3, r4
 8002896:	f7fd fd0b 	bl	80002b0 <__aeabi_uldivmod>
 800289a:	4603      	mov	r3, r0
 800289c:	460c      	mov	r4, r1
 800289e:	461a      	mov	r2, r3
 80028a0:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <UART_SetConfig+0x384>)
 80028a2:	fba3 1302 	umull	r1, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2164      	movs	r1, #100	; 0x64
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <UART_SetConfig+0x384>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028c2:	4498      	add	r8, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	461d      	mov	r5, r3
 80028c8:	f04f 0600 	mov.w	r6, #0
 80028cc:	46a9      	mov	r9, r5
 80028ce:	46b2      	mov	sl, r6
 80028d0:	eb19 0309 	adds.w	r3, r9, r9
 80028d4:	eb4a 040a 	adc.w	r4, sl, sl
 80028d8:	4699      	mov	r9, r3
 80028da:	46a2      	mov	sl, r4
 80028dc:	eb19 0905 	adds.w	r9, r9, r5
 80028e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028f8:	4689      	mov	r9, r1
 80028fa:	4692      	mov	sl, r2
 80028fc:	eb19 0005 	adds.w	r0, r9, r5
 8002900:	eb4a 0106 	adc.w	r1, sl, r6
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	461d      	mov	r5, r3
 800290a:	f04f 0600 	mov.w	r6, #0
 800290e:	196b      	adds	r3, r5, r5
 8002910:	eb46 0406 	adc.w	r4, r6, r6
 8002914:	461a      	mov	r2, r3
 8002916:	4623      	mov	r3, r4
 8002918:	f7fd fcca 	bl	80002b0 <__aeabi_uldivmod>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	461a      	mov	r2, r3
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <UART_SetConfig+0x384>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	; 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a07      	ldr	r2, [pc, #28]	; (8002954 <UART_SetConfig+0x384>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 0207 	and.w	r2, r3, #7
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4442      	add	r2, r8
 8002948:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800294a:	e1b2      	b.n	8002cb2 <UART_SetConfig+0x6e2>
 800294c:	40011000 	.word	0x40011000
 8002950:	40011400 	.word	0x40011400
 8002954:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4ad7      	ldr	r2, [pc, #860]	; (8002cbc <UART_SetConfig+0x6ec>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d005      	beq.n	800296e <UART_SetConfig+0x39e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4ad6      	ldr	r2, [pc, #856]	; (8002cc0 <UART_SetConfig+0x6f0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	f040 80d1 	bne.w	8002b10 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800296e:	f7fe fe81 	bl	8001674 <HAL_RCC_GetPCLK2Freq>
 8002972:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	469a      	mov	sl, r3
 8002978:	f04f 0b00 	mov.w	fp, #0
 800297c:	46d0      	mov	r8, sl
 800297e:	46d9      	mov	r9, fp
 8002980:	eb18 0308 	adds.w	r3, r8, r8
 8002984:	eb49 0409 	adc.w	r4, r9, r9
 8002988:	4698      	mov	r8, r3
 800298a:	46a1      	mov	r9, r4
 800298c:	eb18 080a 	adds.w	r8, r8, sl
 8002990:	eb49 090b 	adc.w	r9, r9, fp
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029a8:	4688      	mov	r8, r1
 80029aa:	4691      	mov	r9, r2
 80029ac:	eb1a 0508 	adds.w	r5, sl, r8
 80029b0:	eb4b 0609 	adc.w	r6, fp, r9
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	0094      	lsls	r4, r2, #2
 80029c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029cc:	008b      	lsls	r3, r1, #2
 80029ce:	461a      	mov	r2, r3
 80029d0:	4623      	mov	r3, r4
 80029d2:	4628      	mov	r0, r5
 80029d4:	4631      	mov	r1, r6
 80029d6:	f7fd fc6b 	bl	80002b0 <__aeabi_uldivmod>
 80029da:	4603      	mov	r3, r0
 80029dc:	460c      	mov	r4, r1
 80029de:	461a      	mov	r2, r3
 80029e0:	4bb8      	ldr	r3, [pc, #736]	; (8002cc4 <UART_SetConfig+0x6f4>)
 80029e2:	fba3 2302 	umull	r2, r3, r3, r2
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	469b      	mov	fp, r3
 80029f0:	f04f 0c00 	mov.w	ip, #0
 80029f4:	46d9      	mov	r9, fp
 80029f6:	46e2      	mov	sl, ip
 80029f8:	eb19 0309 	adds.w	r3, r9, r9
 80029fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002a00:	4699      	mov	r9, r3
 8002a02:	46a2      	mov	sl, r4
 8002a04:	eb19 090b 	adds.w	r9, r9, fp
 8002a08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a20:	4689      	mov	r9, r1
 8002a22:	4692      	mov	sl, r2
 8002a24:	eb1b 0509 	adds.w	r5, fp, r9
 8002a28:	eb4c 060a 	adc.w	r6, ip, sl
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4619      	mov	r1, r3
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	f04f 0400 	mov.w	r4, #0
 8002a3e:	0094      	lsls	r4, r2, #2
 8002a40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a44:	008b      	lsls	r3, r1, #2
 8002a46:	461a      	mov	r2, r3
 8002a48:	4623      	mov	r3, r4
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	4631      	mov	r1, r6
 8002a4e:	f7fd fc2f 	bl	80002b0 <__aeabi_uldivmod>
 8002a52:	4603      	mov	r3, r0
 8002a54:	460c      	mov	r4, r1
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b9a      	ldr	r3, [pc, #616]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2164      	movs	r1, #100	; 0x64
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	3332      	adds	r3, #50	; 0x32
 8002a6c:	4a95      	ldr	r2, [pc, #596]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a78:	4498      	add	r8, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	469b      	mov	fp, r3
 8002a7e:	f04f 0c00 	mov.w	ip, #0
 8002a82:	46d9      	mov	r9, fp
 8002a84:	46e2      	mov	sl, ip
 8002a86:	eb19 0309 	adds.w	r3, r9, r9
 8002a8a:	eb4a 040a 	adc.w	r4, sl, sl
 8002a8e:	4699      	mov	r9, r3
 8002a90:	46a2      	mov	sl, r4
 8002a92:	eb19 090b 	adds.w	r9, r9, fp
 8002a96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002aae:	4689      	mov	r9, r1
 8002ab0:	4692      	mov	sl, r2
 8002ab2:	eb1b 0509 	adds.w	r5, fp, r9
 8002ab6:	eb4c 060a 	adc.w	r6, ip, sl
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	f04f 0400 	mov.w	r4, #0
 8002acc:	0094      	lsls	r4, r2, #2
 8002ace:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ad2:	008b      	lsls	r3, r1, #2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	4628      	mov	r0, r5
 8002ada:	4631      	mov	r1, r6
 8002adc:	f7fd fbe8 	bl	80002b0 <__aeabi_uldivmod>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b77      	ldr	r3, [pc, #476]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	2164      	movs	r1, #100	; 0x64
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	3332      	adds	r3, #50	; 0x32
 8002afa:	4a72      	ldr	r2, [pc, #456]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4442      	add	r2, r8
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	e0d0      	b.n	8002cb2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b10:	f7fe fd9c 	bl	800164c <HAL_RCC_GetPCLK1Freq>
 8002b14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	469a      	mov	sl, r3
 8002b1a:	f04f 0b00 	mov.w	fp, #0
 8002b1e:	46d0      	mov	r8, sl
 8002b20:	46d9      	mov	r9, fp
 8002b22:	eb18 0308 	adds.w	r3, r8, r8
 8002b26:	eb49 0409 	adc.w	r4, r9, r9
 8002b2a:	4698      	mov	r8, r3
 8002b2c:	46a1      	mov	r9, r4
 8002b2e:	eb18 080a 	adds.w	r8, r8, sl
 8002b32:	eb49 090b 	adc.w	r9, r9, fp
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	4691      	mov	r9, r2
 8002b4e:	eb1a 0508 	adds.w	r5, sl, r8
 8002b52:	eb4b 0609 	adc.w	r6, fp, r9
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	f04f 0400 	mov.w	r4, #0
 8002b68:	0094      	lsls	r4, r2, #2
 8002b6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b6e:	008b      	lsls	r3, r1, #2
 8002b70:	461a      	mov	r2, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	4628      	mov	r0, r5
 8002b76:	4631      	mov	r1, r6
 8002b78:	f7fd fb9a 	bl	80002b0 <__aeabi_uldivmod>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002b84:	fba3 2302 	umull	r2, r3, r3, r2
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	469b      	mov	fp, r3
 8002b92:	f04f 0c00 	mov.w	ip, #0
 8002b96:	46d9      	mov	r9, fp
 8002b98:	46e2      	mov	sl, ip
 8002b9a:	eb19 0309 	adds.w	r3, r9, r9
 8002b9e:	eb4a 040a 	adc.w	r4, sl, sl
 8002ba2:	4699      	mov	r9, r3
 8002ba4:	46a2      	mov	sl, r4
 8002ba6:	eb19 090b 	adds.w	r9, r9, fp
 8002baa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bc2:	4689      	mov	r9, r1
 8002bc4:	4692      	mov	sl, r2
 8002bc6:	eb1b 0509 	adds.w	r5, fp, r9
 8002bca:	eb4c 060a 	adc.w	r6, ip, sl
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	f04f 0400 	mov.w	r4, #0
 8002be0:	0094      	lsls	r4, r2, #2
 8002be2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002be6:	008b      	lsls	r3, r1, #2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	4631      	mov	r1, r6
 8002bf0:	f7fd fb5e 	bl	80002b0 <__aeabi_uldivmod>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	2164      	movs	r1, #100	; 0x64
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	3332      	adds	r3, #50	; 0x32
 8002c0e:	4a2d      	ldr	r2, [pc, #180]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1a:	4498      	add	r8, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	469b      	mov	fp, r3
 8002c20:	f04f 0c00 	mov.w	ip, #0
 8002c24:	46d9      	mov	r9, fp
 8002c26:	46e2      	mov	sl, ip
 8002c28:	eb19 0309 	adds.w	r3, r9, r9
 8002c2c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c30:	4699      	mov	r9, r3
 8002c32:	46a2      	mov	sl, r4
 8002c34:	eb19 090b 	adds.w	r9, r9, fp
 8002c38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c50:	4689      	mov	r9, r1
 8002c52:	4692      	mov	sl, r2
 8002c54:	eb1b 0509 	adds.w	r5, fp, r9
 8002c58:	eb4c 060a 	adc.w	r6, ip, sl
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	f04f 0400 	mov.w	r4, #0
 8002c6e:	0094      	lsls	r4, r2, #2
 8002c70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c74:	008b      	lsls	r3, r1, #2
 8002c76:	461a      	mov	r2, r3
 8002c78:	4623      	mov	r3, r4
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	f7fd fb17 	bl	80002b0 <__aeabi_uldivmod>
 8002c82:	4603      	mov	r3, r0
 8002c84:	460c      	mov	r4, r1
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	2164      	movs	r1, #100	; 0x64
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	3332      	adds	r3, #50	; 0x32
 8002c9c:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <UART_SetConfig+0x6f4>)
 8002c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4442      	add	r2, r8
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	e7ff      	b.n	8002cb2 <UART_SetConfig+0x6e2>
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cbc:	40011000 	.word	0x40011000
 8002cc0:	40011400 	.word	0x40011400
 8002cc4:	51eb851f 	.word	0x51eb851f

08002cc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cde:	f3ef 8305 	mrs	r3, IPSR
 8002ce2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cea:	f3ef 8310 	mrs	r3, PRIMASK
 8002cee:	607b      	str	r3, [r7, #4]
  return(result);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d105      	bne.n	8002d02 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8002cfa:	603b      	str	r3, [r7, #0]
  return(result);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <osKernelInitialize+0x3a>
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <osKernelInitialize+0x64>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d103      	bne.n	8002d12 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d0a:	f06f 0305 	mvn.w	r3, #5
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e00c      	b.n	8002d2c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <osKernelInitialize+0x64>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <osKernelInitialize+0x64>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e002      	b.n	8002d2c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	2000009c 	.word	0x2000009c

08002d40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d46:	f3ef 8305 	mrs	r3, IPSR
 8002d4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d52:	f3ef 8310 	mrs	r3, PRIMASK
 8002d56:	607b      	str	r3, [r7, #4]
  return(result);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d62:	603b      	str	r3, [r7, #0]
  return(result);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <osKernelStart+0x3a>
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <osKernelStart+0x68>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d103      	bne.n	8002d7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002d72:	f06f 0305 	mvn.w	r3, #5
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e010      	b.n	8002d9c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <osKernelStart+0x68>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d109      	bne.n	8002d96 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d82:	f7ff ffa1 	bl	8002cc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <osKernelStart+0x68>)
 8002d88:	2202      	movs	r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002d8c:	f001 fe0a 	bl	80049a4 <vTaskStartScheduler>
      stat = osOK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e002      	b.n	8002d9c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000009c 	.word	0x2000009c

08002dac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b090      	sub	sp, #64	; 0x40
 8002db0:	af04      	add	r7, sp, #16
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dbc:	f3ef 8305 	mrs	r3, IPSR
 8002dc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dc2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 808f 	bne.w	8002ee8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dca:	f3ef 8310 	mrs	r3, PRIMASK
 8002dce:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dda:	617b      	str	r3, [r7, #20]
  return(result);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <osThreadNew+0x3e>
 8002de2:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <osThreadNew+0x148>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d07e      	beq.n	8002ee8 <osThreadNew+0x13c>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d07b      	beq.n	8002ee8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002df4:	2318      	movs	r3, #24
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002e00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d045      	beq.n	8002e94 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <osThreadNew+0x6a>
        name = attr->name;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <osThreadNew+0x90>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b38      	cmp	r3, #56	; 0x38
 8002e2e:	d805      	bhi.n	8002e3c <osThreadNew+0x90>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <osThreadNew+0x94>
        return (NULL);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e054      	b.n	8002eea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <osThreadNew+0xca>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b5b      	cmp	r3, #91	; 0x5b
 8002e5e:	d90a      	bls.n	8002e76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <osThreadNew+0xca>
        mem = 1;
 8002e70:	2301      	movs	r3, #1
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	e010      	b.n	8002e98 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <osThreadNew+0xec>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <osThreadNew+0xec>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <osThreadNew+0xec>
          mem = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
 8002e92:	e001      	b.n	8002e98 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d110      	bne.n	8002ec0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ea6:	9202      	str	r2, [sp, #8]
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f001 fba3 	bl	8004600 <xTaskCreateStatic>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	e013      	b.n	8002ee8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d110      	bne.n	8002ee8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f001 fbeb 	bl	80046b4 <xTaskCreate>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d001      	beq.n	8002ee8 <osThreadNew+0x13c>
          hTask = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ee8:	693b      	ldr	r3, [r7, #16]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3730      	adds	r7, #48	; 0x30
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	2000009c 	.word	0x2000009c

08002ef8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f00:	f3ef 8305 	mrs	r3, IPSR
 8002f04:	613b      	str	r3, [r7, #16]
  return(result);
 8002f06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10f      	bne.n	8002f2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f10:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f18:	f3ef 8311 	mrs	r3, BASEPRI
 8002f1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <osDelay+0x3c>
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <osDelay+0x58>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d103      	bne.n	8002f34 <osDelay+0x3c>
    stat = osErrorISR;
 8002f2c:	f06f 0305 	mvn.w	r3, #5
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e007      	b.n	8002f44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f001 fcfc 	bl	800493c <vTaskDelay>
    }
  }

  return (stat);
 8002f44:	697b      	ldr	r3, [r7, #20]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2000009c 	.word	0x2000009c

08002f54 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f002 ff37 	bl	8005dd0 <pvTimerGetTimerID>
 8002f62:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	6852      	ldr	r2, [r2, #4]
 8002f72:	4610      	mov	r0, r2
 8002f74:	4798      	blx	r3
  }
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	; 0x38
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f94:	f3ef 8305 	mrs	r3, IPSR
 8002f98:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d16a      	bne.n	8003076 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa4:	617b      	str	r3, [r7, #20]
  return(result);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fac:	f3ef 8311 	mrs	r3, BASEPRI
 8002fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <osTimerNew+0x40>
 8002fb8:	4b31      	ldr	r3, [pc, #196]	; (8003080 <osTimerNew+0x100>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d05a      	beq.n	8003076 <osTimerNew+0xf6>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d057      	beq.n	8003076 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002fc6:	2008      	movs	r0, #8
 8002fc8:	f003 f962 	bl	8006290 <pvPortMalloc>
 8002fcc:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d050      	beq.n	8003076 <osTimerNew+0xf6>
      callb->func = func;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <osTimerNew+0x6c>
        reload = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	e001      	b.n	8002ff0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	623b      	str	r3, [r7, #32]
      name = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01c      	beq.n	800303a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <osTimerNew+0x8e>
          name = attr->name;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <osTimerNew+0xa4>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b2b      	cmp	r3, #43	; 0x2b
 800301c:	d902      	bls.n	8003024 <osTimerNew+0xa4>
          mem = 1;
 800301e:	2301      	movs	r3, #1
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	e00c      	b.n	800303e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d108      	bne.n	800303e <osTimerNew+0xbe>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d104      	bne.n	800303e <osTimerNew+0xbe>
            mem = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	e001      	b.n	800303e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10c      	bne.n	800305e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <osTimerNew+0x104>)
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003052:	2101      	movs	r1, #1
 8003054:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003056:	f002 fb1e 	bl	8005696 <xTimerCreateStatic>
 800305a:	62b8      	str	r0, [r7, #40]	; 0x28
 800305c:	e00b      	b.n	8003076 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d108      	bne.n	8003076 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <osTimerNew+0x104>)
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	2101      	movs	r1, #1
 800306e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003070:	f002 faf0 	bl	8005654 <xTimerCreate>
 8003074:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003078:	4618      	mov	r0, r3
 800307a:	3730      	adds	r7, #48	; 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	2000009c 	.word	0x2000009c
 8003084:	08002f55 	.word	0x08002f55

08003088 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af02      	add	r7, sp, #8
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003096:	f3ef 8305 	mrs	r3, IPSR
 800309a:	617b      	str	r3, [r7, #20]
  return(result);
 800309c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a2:	f3ef 8310 	mrs	r3, PRIMASK
 80030a6:	613b      	str	r3, [r7, #16]
  return(result);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030ae:	f3ef 8311 	mrs	r3, BASEPRI
 80030b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <osTimerStart+0x42>
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <osTimerStart+0x7c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d103      	bne.n	80030ca <osTimerStart+0x42>
    stat = osErrorISR;
 80030c2:	f06f 0305 	mvn.w	r3, #5
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e017      	b.n	80030fa <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <osTimerStart+0x50>
    stat = osErrorParameter;
 80030d0:	f06f 0303 	mvn.w	r3, #3
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e010      	b.n	80030fa <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80030d8:	2300      	movs	r3, #0
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	2104      	movs	r1, #4
 80030e2:	69b8      	ldr	r0, [r7, #24]
 80030e4:	f002 fb4e 	bl	8005784 <xTimerGenericCommand>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <osTimerStart+0x6c>
      stat = osOK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	e002      	b.n	80030fa <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80030f4:	f06f 0302 	mvn.w	r3, #2
 80030f8:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80030fa:	69fb      	ldr	r3, [r7, #28]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000009c 	.word	0x2000009c

08003108 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af02      	add	r7, sp, #8
 800310e:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003114:	f3ef 8305 	mrs	r3, IPSR
 8003118:	617b      	str	r3, [r7, #20]
  return(result);
 800311a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10f      	bne.n	8003140 <osTimerStop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003120:	f3ef 8310 	mrs	r3, PRIMASK
 8003124:	613b      	str	r3, [r7, #16]
  return(result);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <osTimerStop+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800312c:	f3ef 8311 	mrs	r3, BASEPRI
 8003130:	60fb      	str	r3, [r7, #12]
  return(result);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <osTimerStop+0x40>
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <osTimerStop+0x90>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d103      	bne.n	8003148 <osTimerStop+0x40>
    stat = osErrorISR;
 8003140:	f06f 0305 	mvn.w	r3, #5
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e021      	b.n	800318c <osTimerStop+0x84>
  }
  else if (hTimer == NULL) {
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <osTimerStop+0x4e>
    stat = osErrorParameter;
 800314e:	f06f 0303 	mvn.w	r3, #3
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	e01a      	b.n	800318c <osTimerStop+0x84>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8003156:	69b8      	ldr	r0, [r7, #24]
 8003158:	f002 fe12 	bl	8005d80 <xTimerIsTimerActive>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <osTimerStop+0x62>
      stat = osErrorResource;
 8003162:	f06f 0302 	mvn.w	r3, #2
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	e010      	b.n	800318c <osTimerStop+0x84>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800316a:	2300      	movs	r3, #0
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	2200      	movs	r2, #0
 8003172:	2103      	movs	r1, #3
 8003174:	69b8      	ldr	r0, [r7, #24]
 8003176:	f002 fb05 	bl	8005784 <xTimerGenericCommand>
 800317a:	4603      	mov	r3, r0
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <osTimerStop+0x7e>
        stat = osOK;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	e002      	b.n	800318c <osTimerStop+0x84>
      } else {
        stat = osError;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800318c:	69fb      	ldr	r3, [r7, #28]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000009c 	.word	0x2000009c

0800319c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ac:	f3ef 8305 	mrs	r3, IPSR
 80031b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80031b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 8087 	bne.w	80032c8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ba:	f3ef 8310 	mrs	r3, PRIMASK
 80031be:	617b      	str	r3, [r7, #20]
  return(result);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031c6:	f3ef 8311 	mrs	r3, BASEPRI
 80031ca:	613b      	str	r3, [r7, #16]
  return(result);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <osSemaphoreNew+0x3e>
 80031d2:	4b40      	ldr	r3, [pc, #256]	; (80032d4 <osSemaphoreNew+0x138>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d076      	beq.n	80032c8 <osSemaphoreNew+0x12c>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d073      	beq.n	80032c8 <osSemaphoreNew+0x12c>
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d86f      	bhi.n	80032c8 <osSemaphoreNew+0x12c>
    mem = -1;
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d006      	beq.n	800320a <osSemaphoreNew+0x6e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b4f      	cmp	r3, #79	; 0x4f
 8003202:	d902      	bls.n	800320a <osSemaphoreNew+0x6e>
        mem = 1;
 8003204:	2301      	movs	r3, #1
 8003206:	623b      	str	r3, [r7, #32]
 8003208:	e00c      	b.n	8003224 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <osSemaphoreNew+0x88>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <osSemaphoreNew+0x88>
          mem = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
 800321e:	e001      	b.n	8003224 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d04d      	beq.n	80032c8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d129      	bne.n	8003286 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d10b      	bne.n	8003250 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	2303      	movs	r3, #3
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	2001      	movs	r0, #1
 8003248:	f000 fa54 	bl	80036f4 <xQueueGenericCreateStatic>
 800324c:	6278      	str	r0, [r7, #36]	; 0x24
 800324e:	e005      	b.n	800325c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003250:	2203      	movs	r2, #3
 8003252:	2100      	movs	r1, #0
 8003254:	2001      	movs	r0, #1
 8003256:	f000 fac0 	bl	80037da <xQueueGenericCreate>
 800325a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d022      	beq.n	80032a8 <osSemaphoreNew+0x10c>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01f      	beq.n	80032a8 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003268:	2300      	movs	r3, #0
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003270:	f000 fb7c 	bl	800396c <xQueueGenericSend>
 8003274:	4603      	mov	r3, r0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d016      	beq.n	80032a8 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800327a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800327c:	f000 ffef 	bl	800425e <vQueueDelete>
            hSemaphore = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
 8003284:	e010      	b.n	80032a8 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d108      	bne.n	800329e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	461a      	mov	r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fb02 	bl	800389e <xQueueCreateCountingSemaphoreStatic>
 800329a:	6278      	str	r0, [r7, #36]	; 0x24
 800329c:	e004      	b.n	80032a8 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fb31 	bl	8003908 <xQueueCreateCountingSemaphore>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <osSemaphoreNew+0x120>
          name = attr->name;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e001      	b.n	80032c0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80032c0:	69f9      	ldr	r1, [r7, #28]
 80032c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032c4:	f001 f916 	bl	80044f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3728      	adds	r7, #40	; 0x28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000009c 	.word	0x2000009c

080032d8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80032f0:	f06f 0303 	mvn.w	r3, #3
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	e04b      	b.n	8003390 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032f8:	f3ef 8305 	mrs	r3, IPSR
 80032fc:	617b      	str	r3, [r7, #20]
  return(result);
 80032fe:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10f      	bne.n	8003324 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003304:	f3ef 8310 	mrs	r3, PRIMASK
 8003308:	613b      	str	r3, [r7, #16]
  return(result);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003310:	f3ef 8311 	mrs	r3, BASEPRI
 8003314:	60fb      	str	r3, [r7, #12]
  return(result);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d026      	beq.n	800336a <osSemaphoreAcquire+0x92>
 800331c:	4b1f      	ldr	r3, [pc, #124]	; (800339c <osSemaphoreAcquire+0xc4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d122      	bne.n	800336a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800332a:	f06f 0303 	mvn.w	r3, #3
 800332e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003330:	e02d      	b.n	800338e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	461a      	mov	r2, r3
 800333c:	2100      	movs	r1, #0
 800333e:	69b8      	ldr	r0, [r7, #24]
 8003340:	f000 ff10 	bl	8004164 <xQueueReceiveFromISR>
 8003344:	4603      	mov	r3, r0
 8003346:	2b01      	cmp	r3, #1
 8003348:	d003      	beq.n	8003352 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800334a:	f06f 0302 	mvn.w	r3, #2
 800334e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003350:	e01d      	b.n	800338e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01a      	beq.n	800338e <osSemaphoreAcquire+0xb6>
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <osSemaphoreAcquire+0xc8>)
 800335a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003368:	e011      	b.n	800338e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	69b8      	ldr	r0, [r7, #24]
 800336e:	f000 fdf1 	bl	8003f54 <xQueueSemaphoreTake>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d00b      	beq.n	8003390 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800337e:	f06f 0301 	mvn.w	r3, #1
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	e004      	b.n	8003390 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003386:	f06f 0302 	mvn.w	r3, #2
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e000      	b.n	8003390 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800338e:	bf00      	nop
      }
    }
  }

  return (stat);
 8003390:	69fb      	ldr	r3, [r7, #28]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	2000009c 	.word	0x2000009c
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80033ba:	f06f 0303 	mvn.w	r3, #3
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	e03e      	b.n	8003440 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c2:	f3ef 8305 	mrs	r3, IPSR
 80033c6:	617b      	str	r3, [r7, #20]
  return(result);
 80033c8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ce:	f3ef 8310 	mrs	r3, PRIMASK
 80033d2:	613b      	str	r3, [r7, #16]
  return(result);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d105      	bne.n	80033e6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033da:	f3ef 8311 	mrs	r3, BASEPRI
 80033de:	60fb      	str	r3, [r7, #12]
  return(result);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01e      	beq.n	8003424 <osSemaphoreRelease+0x80>
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <osSemaphoreRelease+0xa8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d11a      	bne.n	8003424 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80033f2:	f107 0308 	add.w	r3, r7, #8
 80033f6:	4619      	mov	r1, r3
 80033f8:	69b8      	ldr	r0, [r7, #24]
 80033fa:	f000 fc45 	bl	8003c88 <xQueueGiveFromISR>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b01      	cmp	r3, #1
 8003402:	d003      	beq.n	800340c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003404:	f06f 0302 	mvn.w	r3, #2
 8003408:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800340a:	e018      	b.n	800343e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <osSemaphoreRelease+0x9a>
 8003412:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <osSemaphoreRelease+0xac>)
 8003414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003422:	e00c      	b.n	800343e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003424:	2300      	movs	r3, #0
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	69b8      	ldr	r0, [r7, #24]
 800342c:	f000 fa9e 	bl	800396c <xQueueGenericSend>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d004      	beq.n	8003440 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003436:	f06f 0302 	mvn.w	r3, #2
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e000      	b.n	8003440 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800343e:	bf00      	nop
    }
  }

  return (stat);
 8003440:	69fb      	ldr	r3, [r7, #28]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000009c 	.word	0x2000009c
 8003450:	e000ed04 	.word	0xe000ed04

08003454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <vApplicationGetIdleTaskMemory+0x2c>)
 8003464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4a06      	ldr	r2, [pc, #24]	; (8003484 <vApplicationGetIdleTaskMemory+0x30>)
 800346a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	601a      	str	r2, [r3, #0]
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	200000a0 	.word	0x200000a0
 8003484:	200000fc 	.word	0x200000fc

08003488 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003498:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4a06      	ldr	r2, [pc, #24]	; (80034b8 <vApplicationGetTimerTaskMemory+0x30>)
 800349e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a6:	601a      	str	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	200002fc 	.word	0x200002fc
 80034b8:	20000358 	.word	0x20000358

080034bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f103 0208 	add.w	r2, r3, #8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f103 0208 	add.w	r2, r3, #8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f103 0208 	add.w	r2, r3, #8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003516:	b480      	push	{r7}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	601a      	str	r2, [r3, #0]
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d103      	bne.n	800357e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e00c      	b.n	8003598 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3308      	adds	r3, #8
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e002      	b.n	800358c <vListInsert+0x2e>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	429a      	cmp	r2, r3
 8003596:	d2f6      	bcs.n	8003586 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6892      	ldr	r2, [r2, #8]
 80035e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6852      	ldr	r2, [r2, #4]
 80035f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d103      	bne.n	8003604 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d109      	bne.n	800364c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	e7fe      	b.n	800364a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800364c:	f002 fd06 	bl	800605c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	68f9      	ldr	r1, [r7, #12]
 800365a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	3b01      	subs	r3, #1
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	441a      	add	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d114      	bne.n	80036cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d01a      	beq.n	80036e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3310      	adds	r3, #16
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 fbf8 	bl	8004ea4 <xTaskRemoveFromEventList>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d012      	beq.n	80036e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <xQueueGenericReset+0xcc>)
 80036bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	e009      	b.n	80036e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3310      	adds	r3, #16
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fef3 	bl	80034bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3324      	adds	r3, #36	; 0x24
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff feee 	bl	80034bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036e0:	f002 fcea 	bl	80060b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036e4:	2301      	movs	r3, #1
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08e      	sub	sp, #56	; 0x38
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d109      	bne.n	800371c <xQueueGenericCreateStatic+0x28>
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
 800371a:	e7fe      	b.n	800371a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <xQueueGenericCreateStatic+0x42>
 8003722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
 8003734:	e7fe      	b.n	8003734 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <xQueueGenericCreateStatic+0x4e>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <xQueueGenericCreateStatic+0x52>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <xQueueGenericCreateStatic+0x54>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <xQueueGenericCreateStatic+0x6c>
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	623b      	str	r3, [r7, #32]
 800375e:	e7fe      	b.n	800375e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <xQueueGenericCreateStatic+0x78>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <xQueueGenericCreateStatic+0x7c>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <xQueueGenericCreateStatic+0x7e>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <xQueueGenericCreateStatic+0x96>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e7fe      	b.n	8003788 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800378a:	2350      	movs	r3, #80	; 0x50
 800378c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b50      	cmp	r3, #80	; 0x50
 8003792:	d009      	beq.n	80037a8 <xQueueGenericCreateStatic+0xb4>
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	e7fe      	b.n	80037a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f844 	bl	8003858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3730      	adds	r7, #48	; 0x30
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af02      	add	r7, sp, #8
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	4613      	mov	r3, r2
 80037e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <xQueueGenericCreate+0x28>
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e7fe      	b.n	8003800 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	e004      	b.n	8003818 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	3350      	adds	r3, #80	; 0x50
 800381c:	4618      	mov	r0, r3
 800381e:	f002 fd37 	bl	8006290 <pvPortMalloc>
 8003822:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d011      	beq.n	800384e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3350      	adds	r3, #80	; 0x50
 8003832:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800383c:	79fa      	ldrb	r2, [r7, #7]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f805 	bl	8003858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800384e:	69bb      	ldr	r3, [r7, #24]
	}
 8003850:	4618      	mov	r0, r3
 8003852:	3720      	adds	r7, #32
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e002      	b.n	800387a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003886:	2101      	movs	r1, #1
 8003888:	69b8      	ldr	r0, [r7, #24]
 800388a:	f7ff fecb 	bl	8003624 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b08a      	sub	sp, #40	; 0x28
 80038a2:	af02      	add	r7, sp, #8
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <xQueueCreateCountingSemaphoreStatic+0x26>
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e7fe      	b.n	80038c2 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d909      	bls.n	80038e0 <xQueueCreateCountingSemaphoreStatic+0x42>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e7fe      	b.n	80038de <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038e0:	2302      	movs	r3, #2
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2100      	movs	r1, #0
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff ff02 	bl	80036f4 <xQueueGenericCreateStatic>
 80038f0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80038fe:	69fb      	ldr	r3, [r7, #28]
	}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <xQueueCreateCountingSemaphore+0x24>
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	e7fe      	b.n	800392a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d909      	bls.n	8003948 <xQueueCreateCountingSemaphore+0x40>
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e7fe      	b.n	8003946 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003948:	2202      	movs	r2, #2
 800394a:	2100      	movs	r1, #0
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff44 	bl	80037da <xQueueGenericCreate>
 8003952:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003960:	697b      	ldr	r3, [r7, #20]
	}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	; 0x38
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800397a:	2300      	movs	r3, #0
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <xQueueGenericSend+0x30>
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
 800399a:	e7fe      	b.n	800399a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <xQueueGenericSend+0x3e>
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <xQueueGenericSend+0x42>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <xQueueGenericSend+0x44>
 80039ae:	2300      	movs	r3, #0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <xQueueGenericSend+0x5c>
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
 80039c6:	e7fe      	b.n	80039c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d103      	bne.n	80039d6 <xQueueGenericSend+0x6a>
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <xQueueGenericSend+0x6e>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <xQueueGenericSend+0x70>
 80039da:	2300      	movs	r3, #0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <xQueueGenericSend+0x88>
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	e7fe      	b.n	80039f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039f4:	f001 fc0c 	bl	8005210 <xTaskGetSchedulerState>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <xQueueGenericSend+0x98>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <xQueueGenericSend+0x9c>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <xQueueGenericSend+0x9e>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <xQueueGenericSend+0xb6>
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	e7fe      	b.n	8003a20 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a22:	f002 fb1b 	bl	800605c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <xQueueGenericSend+0xcc>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d129      	bne.n	8003a8c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a3e:	f000 fc48 	bl	80042d2 <prvCopyDataToQueue>
 8003a42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d010      	beq.n	8003a6e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	3324      	adds	r3, #36	; 0x24
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 fa27 	bl	8004ea4 <xTaskRemoveFromEventList>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a5c:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <xQueueGenericSend+0x1f0>)
 8003a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	e00a      	b.n	8003a84 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a74:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <xQueueGenericSend+0x1f0>)
 8003a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a84:	f002 fb18 	bl	80060b8 <vPortExitCritical>
				return pdPASS;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e063      	b.n	8003b54 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a92:	f002 fb11 	bl	80060b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e05c      	b.n	8003b54 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fa5f 	bl	8004f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aae:	f002 fb03 	bl	80060b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ab2:	f000 ffdb 	bl	8004a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ab6:	f002 fad1 	bl	800605c <vPortEnterCritical>
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ac0:	b25b      	sxtb	r3, r3
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d103      	bne.n	8003ad0 <xQueueGenericSend+0x164>
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ad6:	b25b      	sxtb	r3, r3
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d103      	bne.n	8003ae6 <xQueueGenericSend+0x17a>
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae6:	f002 fae7 	bl	80060b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aea:	1d3a      	adds	r2, r7, #4
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fa4e 	bl	8004f94 <xTaskCheckForTimeOut>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d124      	bne.n	8003b48 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b00:	f000 fcdf 	bl	80044c2 <prvIsQueueFull>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d018      	beq.n	8003b3c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	3310      	adds	r3, #16
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 f978 	bl	8004e08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b1a:	f000 fc6a 	bl	80043f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b1e:	f000 ffb3 	bl	8004a88 <xTaskResumeAll>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f47f af7c 	bne.w	8003a22 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003b2a:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <xQueueGenericSend+0x1f0>)
 8003b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	e772      	b.n	8003a22 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3e:	f000 fc58 	bl	80043f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b42:	f000 ffa1 	bl	8004a88 <xTaskResumeAll>
 8003b46:	e76c      	b.n	8003a22 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b4a:	f000 fc52 	bl	80043f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b4e:	f000 ff9b 	bl	8004a88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3738      	adds	r7, #56	; 0x38
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08e      	sub	sp, #56	; 0x38
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d109      	bne.n	8003b8c <xQueueGenericSendFromISR+0x2c>
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	e7fe      	b.n	8003b8a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <xQueueGenericSendFromISR+0x3a>
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <xQueueGenericSendFromISR+0x3e>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <xQueueGenericSendFromISR+0x40>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <xQueueGenericSendFromISR+0x58>
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	623b      	str	r3, [r7, #32]
 8003bb6:	e7fe      	b.n	8003bb6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d103      	bne.n	8003bc6 <xQueueGenericSendFromISR+0x66>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <xQueueGenericSendFromISR+0x6a>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <xQueueGenericSendFromISR+0x6c>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <xQueueGenericSendFromISR+0x84>
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e7fe      	b.n	8003be2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003be4:	f002 fb16 	bl	8006214 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003be8:	f3ef 8211 	mrs	r2, BASEPRI
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	61ba      	str	r2, [r7, #24]
 8003bfe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c00:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d302      	bcc.n	8003c16 <xQueueGenericSendFromISR+0xb6>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d12c      	bne.n	8003c70 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c26:	f000 fb54 	bl	80042d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c2a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d112      	bne.n	8003c5a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d016      	beq.n	8003c6a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	3324      	adds	r3, #36	; 0x24
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 f92f 	bl	8004ea4 <xTaskRemoveFromEventList>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e007      	b.n	8003c6a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	3301      	adds	r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	b25a      	sxtb	r2, r3
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c6e:	e001      	b.n	8003c74 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3738      	adds	r7, #56	; 0x38
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	; 0x38
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	e7fe      	b.n	8003cae <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d009      	beq.n	8003ccc <xQueueGiveFromISR+0x44>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e7fe      	b.n	8003cca <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d103      	bne.n	8003cdc <xQueueGiveFromISR+0x54>
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <xQueueGiveFromISR+0x58>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <xQueueGiveFromISR+0x5a>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <xQueueGiveFromISR+0x72>
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cfa:	f002 fa8b 	bl	8006214 <vPortValidateInterruptPriority>
	__asm volatile
 8003cfe:	f3ef 8211 	mrs	r2, BASEPRI
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	617a      	str	r2, [r7, #20]
 8003d14:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003d16:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d22b      	bcs.n	8003d82 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d112      	bne.n	8003d6c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	3324      	adds	r3, #36	; 0x24
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f8a6 	bl	8004ea4 <xTaskRemoveFromEventList>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00e      	beq.n	8003d7c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	e007      	b.n	8003d7c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d70:	3301      	adds	r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	b25a      	sxtb	r2, r3
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d80:	e001      	b.n	8003d86 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3738      	adds	r7, #56	; 0x38
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	; 0x30
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <xQueueReceive+0x2e>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <xQueueReceive+0x3c>
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <xQueueReceive+0x40>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <xQueueReceive+0x42>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <xQueueReceive+0x5a>
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	e7fe      	b.n	8003df4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003df6:	f001 fa0b 	bl	8005210 <xTaskGetSchedulerState>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <xQueueReceive+0x6a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <xQueueReceive+0x6e>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xQueueReceive+0x70>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <xQueueReceive+0x88>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	e7fe      	b.n	8003e22 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e24:	f002 f91a 	bl	800605c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01f      	beq.n	8003e74 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e38:	f000 fab5 	bl	80043a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	1e5a      	subs	r2, r3, #1
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00f      	beq.n	8003e6c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	3310      	adds	r3, #16
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 f827 	bl	8004ea4 <xTaskRemoveFromEventList>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e5c:	4b3c      	ldr	r3, [pc, #240]	; (8003f50 <xQueueReceive+0x1b4>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e6c:	f002 f924 	bl	80060b8 <vPortExitCritical>
				return pdPASS;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e069      	b.n	8003f48 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e7a:	f002 f91d 	bl	80060b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e062      	b.n	8003f48 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e88:	f107 0310 	add.w	r3, r7, #16
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f86b 	bl	8004f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e96:	f002 f90f 	bl	80060b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e9a:	f000 fde7 	bl	8004a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e9e:	f002 f8dd 	bl	800605c <vPortEnterCritical>
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ea8:	b25b      	sxtb	r3, r3
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d103      	bne.n	8003eb8 <xQueueReceive+0x11c>
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <xQueueReceive+0x132>
 8003ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ece:	f002 f8f3 	bl	80060b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed2:	1d3a      	adds	r2, r7, #4
 8003ed4:	f107 0310 	add.w	r3, r7, #16
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f85a 	bl	8004f94 <xTaskCheckForTimeOut>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d123      	bne.n	8003f2e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee8:	f000 fad5 	bl	8004496 <prvIsQueueEmpty>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d017      	beq.n	8003f22 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	3324      	adds	r3, #36	; 0x24
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 ff84 	bl	8004e08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f02:	f000 fa76 	bl	80043f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f06:	f000 fdbf 	bl	8004a88 <xTaskResumeAll>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d189      	bne.n	8003e24 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <xQueueReceive+0x1b4>)
 8003f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	e780      	b.n	8003e24 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f24:	f000 fa65 	bl	80043f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f28:	f000 fdae 	bl	8004a88 <xTaskResumeAll>
 8003f2c:	e77a      	b.n	8003e24 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f30:	f000 fa5f 	bl	80043f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f34:	f000 fda8 	bl	8004a88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3a:	f000 faac 	bl	8004496 <prvIsQueueEmpty>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f43f af6f 	beq.w	8003e24 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	; 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	; 0x38
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <xQueueSemaphoreTake+0x30>
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	e7fe      	b.n	8003f82 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <xQueueSemaphoreTake+0x4c>
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e7fe      	b.n	8003f9e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fa0:	f001 f936 	bl	8005210 <xTaskGetSchedulerState>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <xQueueSemaphoreTake+0x5c>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <xQueueSemaphoreTake+0x60>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <xQueueSemaphoreTake+0x62>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <xQueueSemaphoreTake+0x7a>
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	e7fe      	b.n	8003fcc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fce:	f002 f845 	bl	800605c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d024      	beq.n	8004028 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003fee:	f001 fa81 	bl	80054f4 <pvTaskIncrementMutexHeldCount>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00f      	beq.n	8004020 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	3310      	adds	r3, #16
 8004004:	4618      	mov	r0, r3
 8004006:	f000 ff4d 	bl	8004ea4 <xTaskRemoveFromEventList>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004010:	4b53      	ldr	r3, [pc, #332]	; (8004160 <xQueueSemaphoreTake+0x20c>)
 8004012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004020:	f002 f84a 	bl	80060b8 <vPortExitCritical>
				return pdPASS;
 8004024:	2301      	movs	r3, #1
 8004026:	e096      	b.n	8004156 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d110      	bne.n	8004050 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <xQueueSemaphoreTake+0xf4>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e7fe      	b.n	8004046 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004048:	f002 f836 	bl	80060b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800404c:	2300      	movs	r3, #0
 800404e:	e082      	b.n	8004156 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004056:	f107 030c 	add.w	r3, r7, #12
 800405a:	4618      	mov	r0, r3
 800405c:	f000 ff84 	bl	8004f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004060:	2301      	movs	r3, #1
 8004062:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004064:	f002 f828 	bl	80060b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004068:	f000 fd00 	bl	8004a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800406c:	f001 fff6 	bl	800605c <vPortEnterCritical>
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004076:	b25b      	sxtb	r3, r3
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d103      	bne.n	8004086 <xQueueSemaphoreTake+0x132>
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800408c:	b25b      	sxtb	r3, r3
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d103      	bne.n	800409c <xQueueSemaphoreTake+0x148>
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800409c:	f002 f80c 	bl	80060b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040a0:	463a      	mov	r2, r7
 80040a2:	f107 030c 	add.w	r3, r7, #12
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ff73 	bl	8004f94 <xTaskCheckForTimeOut>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d132      	bne.n	800411a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040b6:	f000 f9ee 	bl	8004496 <prvIsQueueEmpty>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d026      	beq.n	800410e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80040c8:	f001 ffc8 	bl	800605c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 f8bb 	bl	800524c <xTaskPriorityInherit>
 80040d6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80040d8:	f001 ffee 	bl	80060b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040de:	3324      	adds	r3, #36	; 0x24
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fe8f 	bl	8004e08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040ec:	f000 f981 	bl	80043f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040f0:	f000 fcca 	bl	8004a88 <xTaskResumeAll>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f47f af69 	bne.w	8003fce <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80040fc:	4b18      	ldr	r3, [pc, #96]	; (8004160 <xQueueSemaphoreTake+0x20c>)
 80040fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	e75f      	b.n	8003fce <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800410e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004110:	f000 f96f 	bl	80043f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004114:	f000 fcb8 	bl	8004a88 <xTaskResumeAll>
 8004118:	e759      	b.n	8003fce <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800411a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800411c:	f000 f969 	bl	80043f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004120:	f000 fcb2 	bl	8004a88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004126:	f000 f9b6 	bl	8004496 <prvIsQueueEmpty>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	f43f af4e 	beq.w	8003fce <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004138:	f001 ff90 	bl	800605c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800413c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800413e:	f000 f8b0 	bl	80042a2 <prvGetDisinheritPriorityAfterTimeout>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414a:	4618      	mov	r0, r3
 800414c:	f001 f952 	bl	80053f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004150:	f001 ffb2 	bl	80060b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004156:	4618      	mov	r0, r3
 8004158:	3738      	adds	r7, #56	; 0x38
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	e000ed04 	.word	0xe000ed04

08004164 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08e      	sub	sp, #56	; 0x38
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <xQueueReceiveFromISR+0x2a>
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	e7fe      	b.n	800418c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d103      	bne.n	800419c <xQueueReceiveFromISR+0x38>
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <xQueueReceiveFromISR+0x3c>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <xQueueReceiveFromISR+0x3e>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <xQueueReceiveFromISR+0x56>
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e7fe      	b.n	80041b8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041ba:	f002 f82b 	bl	8006214 <vPortValidateInterruptPriority>
	__asm volatile
 80041be:	f3ef 8211 	mrs	r2, BASEPRI
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61ba      	str	r2, [r7, #24]
 80041d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80041d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02f      	beq.n	8004246 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041f4:	f000 f8d7 	bl	80043a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004200:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d112      	bne.n	8004230 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	3310      	adds	r3, #16
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fe44 	bl	8004ea4 <xTaskRemoveFromEventList>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00e      	beq.n	8004240 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e007      	b.n	8004240 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004234:	3301      	adds	r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	b25a      	sxtb	r2, r3
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004240:	2301      	movs	r3, #1
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
 8004244:	e001      	b.n	800424a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004246:	2300      	movs	r3, #0
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004256:	4618      	mov	r0, r3
 8004258:	3738      	adds	r7, #56	; 0x38
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <vQueueDelete+0x26>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	e7fe      	b.n	8004282 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f95d 	bl	8004544 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f002 f8bd 	bl	8006414 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80042a2:	b480      	push	{r7}
 80042a4:	b085      	sub	sp, #20
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e001      	b.n	80042c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80042c4:	68fb      	ldr	r3, [r7, #12]
	}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10d      	bne.n	800430c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d14d      	bne.n	8004394 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f80d 	bl	800531c <xTaskPriorityDisinherit>
 8004302:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
 800430a:	e043      	b.n	8004394 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d119      	bne.n	8004346 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6858      	ldr	r0, [r3, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	461a      	mov	r2, r3
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	f002 f9b7 	bl	8006690 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	441a      	add	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d32b      	bcc.n	8004394 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	e026      	b.n	8004394 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68d8      	ldr	r0, [r3, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	461a      	mov	r2, r3
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	f002 f99d 	bl	8006690 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	425b      	negs	r3, r3
 8004360:	441a      	add	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d207      	bcs.n	8004382 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	425b      	negs	r3, r3
 800437c:	441a      	add	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d105      	bne.n	8004394 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3b01      	subs	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800439c:	697b      	ldr	r3, [r7, #20]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d018      	beq.n	80043ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d303      	bcc.n	80043da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68d9      	ldr	r1, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	461a      	mov	r2, r3
 80043e4:	6838      	ldr	r0, [r7, #0]
 80043e6:	f002 f953 	bl	8006690 <memcpy>
	}
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043fa:	f001 fe2f 	bl	800605c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004404:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004406:	e011      	b.n	800442c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	d012      	beq.n	8004436 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fd45 	bl	8004ea4 <xTaskRemoveFromEventList>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004420:	f000 fe18 	bl	8005054 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	3b01      	subs	r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800442c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	dce9      	bgt.n	8004408 <prvUnlockQueue+0x16>
 8004434:	e000      	b.n	8004438 <prvUnlockQueue+0x46>
					break;
 8004436:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	22ff      	movs	r2, #255	; 0xff
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004440:	f001 fe3a 	bl	80060b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004444:	f001 fe0a 	bl	800605c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800444e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004450:	e011      	b.n	8004476 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d012      	beq.n	8004480 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3310      	adds	r3, #16
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fd20 	bl	8004ea4 <xTaskRemoveFromEventList>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800446a:	f000 fdf3 	bl	8005054 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800446e:	7bbb      	ldrb	r3, [r7, #14]
 8004470:	3b01      	subs	r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800447a:	2b00      	cmp	r3, #0
 800447c:	dce9      	bgt.n	8004452 <prvUnlockQueue+0x60>
 800447e:	e000      	b.n	8004482 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004480:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	22ff      	movs	r2, #255	; 0xff
 8004486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800448a:	f001 fe15 	bl	80060b8 <vPortExitCritical>
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800449e:	f001 fddd 	bl	800605c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044aa:	2301      	movs	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	e001      	b.n	80044b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044b4:	f001 fe00 	bl	80060b8 <vPortExitCritical>

	return xReturn;
 80044b8:	68fb      	ldr	r3, [r7, #12]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044ca:	f001 fdc7 	bl	800605c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d102      	bne.n	80044e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044da:	2301      	movs	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e001      	b.n	80044e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044e4:	f001 fde8 	bl	80060b8 <vPortExitCritical>

	return xReturn;
 80044e8:	68fb      	ldr	r3, [r7, #12]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e014      	b.n	800452e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004504:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <vQueueAddToRegistry+0x4c>)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004510:	490b      	ldr	r1, [pc, #44]	; (8004540 <vQueueAddToRegistry+0x4c>)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800451a:	4a09      	ldr	r2, [pc, #36]	; (8004540 <vQueueAddToRegistry+0x4c>)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004526:	e005      	b.n	8004534 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3301      	adds	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b07      	cmp	r3, #7
 8004532:	d9e7      	bls.n	8004504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	20004a48 	.word	0x20004a48

08004544 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e016      	b.n	8004580 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <vQueueUnregisterQueue+0x50>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d10b      	bne.n	800457a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004562:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <vQueueUnregisterQueue+0x50>)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2100      	movs	r1, #0
 8004568:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800456c:	4a09      	ldr	r2, [pc, #36]	; (8004594 <vQueueUnregisterQueue+0x50>)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	2200      	movs	r2, #0
 8004576:	605a      	str	r2, [r3, #4]
				break;
 8004578:	e005      	b.n	8004586 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b07      	cmp	r3, #7
 8004584:	d9e5      	bls.n	8004552 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20004a48 	.word	0x20004a48

08004598 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80045a8:	f001 fd58 	bl	800605c <vPortEnterCritical>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045b2:	b25b      	sxtb	r3, r3
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d103      	bne.n	80045c2 <vQueueWaitForMessageRestricted+0x2a>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d103      	bne.n	80045d8 <vQueueWaitForMessageRestricted+0x40>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d8:	f001 fd6e 	bl	80060b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3324      	adds	r3, #36	; 0x24
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fc2f 	bl	8004e50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f7ff fefd 	bl	80043f2 <prvUnlockQueue>
	}
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08e      	sub	sp, #56	; 0x38
 8004604:	af04      	add	r7, sp, #16
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <xTaskCreateStatic+0x28>
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	e7fe      	b.n	8004626 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <xTaskCreateStatic+0x42>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	e7fe      	b.n	8004640 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004642:	235c      	movs	r3, #92	; 0x5c
 8004644:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b5c      	cmp	r3, #92	; 0x5c
 800464a:	d009      	beq.n	8004660 <xTaskCreateStatic+0x60>
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e7fe      	b.n	800465e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004660:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01e      	beq.n	80046a6 <xTaskCreateStatic+0xa6>
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01b      	beq.n	80046a6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004676:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004680:	2300      	movs	r3, #0
 8004682:	9303      	str	r3, [sp, #12]
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	9302      	str	r3, [sp, #8]
 8004688:	f107 0314 	add.w	r3, r7, #20
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f850 	bl	800473e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800469e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046a0:	f000 f8dc 	bl	800485c <prvAddNewTaskToReadyList>
 80046a4:	e001      	b.n	80046aa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046aa:	697b      	ldr	r3, [r7, #20]
	}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	; 0x30
 80046b8:	af04      	add	r7, sp, #16
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 fde1 	bl	8006290 <pvPortMalloc>
 80046ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046d6:	205c      	movs	r0, #92	; 0x5c
 80046d8:	f001 fdda 	bl	8006290 <pvPortMalloc>
 80046dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ea:	e005      	b.n	80046f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046ec:	6978      	ldr	r0, [r7, #20]
 80046ee:	f001 fe91 	bl	8006414 <vPortFree>
 80046f2:	e001      	b.n	80046f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d017      	beq.n	800472e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	2300      	movs	r3, #0
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	9302      	str	r3, [sp, #8]
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f80e 	bl	800473e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004722:	69f8      	ldr	r0, [r7, #28]
 8004724:	f000 f89a 	bl	800485c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004728:	2301      	movs	r3, #1
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	e002      	b.n	8004734 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004734:	69bb      	ldr	r3, [r7, #24]
	}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b088      	sub	sp, #32
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	461a      	mov	r2, r3
 8004756:	21a5      	movs	r1, #165	; 0xa5
 8004758:	f001 ffa5 	bl	80066a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004766:	3b01      	subs	r3, #1
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f023 0307 	bic.w	r3, r3, #7
 8004774:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <prvInitialiseNewTask+0x56>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e7fe      	b.n	8004792 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01f      	beq.n	80047da <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e012      	b.n	80047c6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	7819      	ldrb	r1, [r3, #0]
 80047a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	3334      	adds	r3, #52	; 0x34
 80047b0:	460a      	mov	r2, r1
 80047b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d006      	beq.n	80047ce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	3301      	adds	r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	2b0f      	cmp	r3, #15
 80047ca:	d9e9      	bls.n	80047a0 <prvInitialiseNewTask+0x62>
 80047cc:	e000      	b.n	80047d0 <prvInitialiseNewTask+0x92>
			{
				break;
 80047ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d8:	e003      	b.n	80047e2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	2b37      	cmp	r3, #55	; 0x37
 80047e6:	d901      	bls.n	80047ec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047e8:	2337      	movs	r3, #55	; 0x37
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	2200      	movs	r2, #0
 80047fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	3304      	adds	r3, #4
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fe7a 	bl	80034fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	3318      	adds	r3, #24
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fe75 	bl	80034fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004816:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004826:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	2200      	movs	r2, #0
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	68f9      	ldr	r1, [r7, #12]
 800483a:	69b8      	ldr	r0, [r7, #24]
 800483c:	f001 fae8 	bl	8005e10 <pxPortInitialiseStack>
 8004840:	4602      	mov	r2, r0
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004852:	bf00      	nop
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004864:	f001 fbfa 	bl	800605c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004868:	4b2d      	ldr	r3, [pc, #180]	; (8004920 <prvAddNewTaskToReadyList+0xc4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <prvAddNewTaskToReadyList+0xc4>)
 8004870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004872:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800487a:	4a2a      	ldr	r2, [pc, #168]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <prvAddNewTaskToReadyList+0xc4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d110      	bne.n	80048aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004888:	f000 fc08 	bl	800509c <prvInitialiseTaskLists>
 800488c:	e00d      	b.n	80048aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800488e:	4b26      	ldr	r3, [pc, #152]	; (8004928 <prvAddNewTaskToReadyList+0xcc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d802      	bhi.n	80048aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048a4:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <prvAddNewTaskToReadyList+0xd0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	4a1e      	ldr	r2, [pc, #120]	; (800492c <prvAddNewTaskToReadyList+0xd0>)
 80048b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048b4:	4b1d      	ldr	r3, [pc, #116]	; (800492c <prvAddNewTaskToReadyList+0xd0>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <prvAddNewTaskToReadyList+0xd4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d903      	bls.n	80048d0 <prvAddNewTaskToReadyList+0x74>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4a18      	ldr	r2, [pc, #96]	; (8004930 <prvAddNewTaskToReadyList+0xd4>)
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <prvAddNewTaskToReadyList+0xd8>)
 80048de:	441a      	add	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f7fe fe15 	bl	8003516 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048ec:	f001 fbe4 	bl	80060b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048f0:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <prvAddNewTaskToReadyList+0xcc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <prvAddNewTaskToReadyList+0xc8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d207      	bcs.n	8004916 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <prvAddNewTaskToReadyList+0xdc>)
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000c2c 	.word	0x20000c2c
 8004924:	20000758 	.word	0x20000758
 8004928:	20000c38 	.word	0x20000c38
 800492c:	20000c48 	.word	0x20000c48
 8004930:	20000c34 	.word	0x20000c34
 8004934:	2000075c 	.word	0x2000075c
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <vTaskDelay+0x60>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <vTaskDelay+0x2e>
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	e7fe      	b.n	8004968 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800496a:	f000 f87f 	bl	8004a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800496e:	2100      	movs	r1, #0
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fdd3 	bl	800551c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004976:	f000 f887 	bl	8004a88 <xTaskResumeAll>
 800497a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004982:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <vTaskDelay+0x64>)
 8004984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000c54 	.word	0x20000c54
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049b2:	463a      	mov	r2, r7
 80049b4:	1d39      	adds	r1, r7, #4
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd4a 	bl	8003454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	9202      	str	r2, [sp, #8]
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	2300      	movs	r3, #0
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	2300      	movs	r3, #0
 80049d0:	460a      	mov	r2, r1
 80049d2:	4920      	ldr	r1, [pc, #128]	; (8004a54 <vTaskStartScheduler+0xb0>)
 80049d4:	4820      	ldr	r0, [pc, #128]	; (8004a58 <vTaskStartScheduler+0xb4>)
 80049d6:	f7ff fe13 	bl	8004600 <xTaskCreateStatic>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <vTaskStartScheduler+0xb8>)
 80049de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049e0:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <vTaskStartScheduler+0xb8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e001      	b.n	80049f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d102      	bne.n	80049fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049f8:	f000 fde4 	bl	80055c4 <xTimerCreateTimerTask>
 80049fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d115      	bne.n	8004a30 <vTaskStartScheduler+0x8c>
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a16:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <vTaskStartScheduler+0xbc>)
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <vTaskStartScheduler+0xc0>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a24:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <vTaskStartScheduler+0xc4>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a2a:	f001 fa79 	bl	8005f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a2e:	e00d      	b.n	8004a4c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d109      	bne.n	8004a4c <vTaskStartScheduler+0xa8>
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	e7fe      	b.n	8004a4a <vTaskStartScheduler+0xa6>
}
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	08007564 	.word	0x08007564
 8004a58:	0800506d 	.word	0x0800506d
 8004a5c:	20000c50 	.word	0x20000c50
 8004a60:	20000c4c 	.word	0x20000c4c
 8004a64:	20000c38 	.word	0x20000c38
 8004a68:	20000c30 	.word	0x20000c30

08004a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a70:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <vTaskSuspendAll+0x18>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	4a03      	ldr	r2, [pc, #12]	; (8004a84 <vTaskSuspendAll+0x18>)
 8004a78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a7a:	bf00      	nop
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	20000c54 	.word	0x20000c54

08004a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a96:	4b41      	ldr	r3, [pc, #260]	; (8004b9c <xTaskResumeAll+0x114>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <xTaskResumeAll+0x2a>
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	e7fe      	b.n	8004ab0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ab2:	f001 fad3 	bl	800605c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <xTaskResumeAll+0x114>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	4a37      	ldr	r2, [pc, #220]	; (8004b9c <xTaskResumeAll+0x114>)
 8004abe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <xTaskResumeAll+0x114>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d162      	bne.n	8004b8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <xTaskResumeAll+0x118>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d05e      	beq.n	8004b8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ad0:	e02f      	b.n	8004b32 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad2:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <xTaskResumeAll+0x11c>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3318      	adds	r3, #24
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fd76 	bl	80035d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe fd71 	bl	80035d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <xTaskResumeAll+0x120>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d903      	bls.n	8004b02 <xTaskResumeAll+0x7a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	4a2a      	ldr	r2, [pc, #168]	; (8004ba8 <xTaskResumeAll+0x120>)
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4a27      	ldr	r2, [pc, #156]	; (8004bac <xTaskResumeAll+0x124>)
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3304      	adds	r3, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f7fe fcfc 	bl	8003516 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b22:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <xTaskResumeAll+0x128>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d302      	bcc.n	8004b32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004b2c:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <xTaskResumeAll+0x12c>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <xTaskResumeAll+0x11c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1cb      	bne.n	8004ad2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b40:	f000 fb46 	bl	80051d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b44:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <xTaskResumeAll+0x130>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d010      	beq.n	8004b72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b50:	f000 f846 	bl	8004be0 <xTaskIncrementTick>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <xTaskResumeAll+0x12c>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f1      	bne.n	8004b50 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004b6c:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <xTaskResumeAll+0x130>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <xTaskResumeAll+0x12c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <xTaskResumeAll+0x134>)
 8004b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b8e:	f001 fa93 	bl	80060b8 <vPortExitCritical>

	return xAlreadyYielded;
 8004b92:	68bb      	ldr	r3, [r7, #8]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000c54 	.word	0x20000c54
 8004ba0:	20000c2c 	.word	0x20000c2c
 8004ba4:	20000bec 	.word	0x20000bec
 8004ba8:	20000c34 	.word	0x20000c34
 8004bac:	2000075c 	.word	0x2000075c
 8004bb0:	20000758 	.word	0x20000758
 8004bb4:	20000c40 	.word	0x20000c40
 8004bb8:	20000c3c 	.word	0x20000c3c
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <xTaskGetTickCount+0x1c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004bcc:	687b      	ldr	r3, [r7, #4]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000c30 	.word	0x20000c30

08004be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bea:	4b4e      	ldr	r3, [pc, #312]	; (8004d24 <xTaskIncrementTick+0x144>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f040 8088 	bne.w	8004d04 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bf4:	4b4c      	ldr	r3, [pc, #304]	; (8004d28 <xTaskIncrementTick+0x148>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bfc:	4a4a      	ldr	r2, [pc, #296]	; (8004d28 <xTaskIncrementTick+0x148>)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d11f      	bne.n	8004c48 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c08:	4b48      	ldr	r3, [pc, #288]	; (8004d2c <xTaskIncrementTick+0x14c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <xTaskIncrementTick+0x46>
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	e7fe      	b.n	8004c24 <xTaskIncrementTick+0x44>
 8004c26:	4b41      	ldr	r3, [pc, #260]	; (8004d2c <xTaskIncrementTick+0x14c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	4b40      	ldr	r3, [pc, #256]	; (8004d30 <xTaskIncrementTick+0x150>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a3e      	ldr	r2, [pc, #248]	; (8004d2c <xTaskIncrementTick+0x14c>)
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4a3e      	ldr	r2, [pc, #248]	; (8004d30 <xTaskIncrementTick+0x150>)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4b3e      	ldr	r3, [pc, #248]	; (8004d34 <xTaskIncrementTick+0x154>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <xTaskIncrementTick+0x154>)
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	f000 fac4 	bl	80051d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <xTaskIncrementTick+0x158>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d349      	bcc.n	8004ce6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c52:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <xTaskIncrementTick+0x14c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5c:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <xTaskIncrementTick+0x158>)
 8004c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c62:	601a      	str	r2, [r3, #0]
					break;
 8004c64:	e03f      	b.n	8004ce6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c66:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <xTaskIncrementTick+0x14c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d203      	bcs.n	8004c86 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c7e:	4a2e      	ldr	r2, [pc, #184]	; (8004d38 <xTaskIncrementTick+0x158>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c84:	e02f      	b.n	8004ce6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe fca0 	bl	80035d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	3318      	adds	r3, #24
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fc97 	bl	80035d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <xTaskIncrementTick+0x15c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d903      	bls.n	8004cb6 <xTaskIncrementTick+0xd6>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <xTaskIncrementTick+0x15c>)
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <xTaskIncrementTick+0x160>)
 8004cc4:	441a      	add	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7fe fc22 	bl	8003516 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <xTaskIncrementTick+0x164>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d3b8      	bcc.n	8004c52 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ce4:	e7b5      	b.n	8004c52 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ce6:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <xTaskIncrementTick+0x164>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	4914      	ldr	r1, [pc, #80]	; (8004d40 <xTaskIncrementTick+0x160>)
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d907      	bls.n	8004d0e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e004      	b.n	8004d0e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004d04:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <xTaskIncrementTick+0x168>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <xTaskIncrementTick+0x168>)
 8004d0c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <xTaskIncrementTick+0x16c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004d16:	2301      	movs	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004d1a:	697b      	ldr	r3, [r7, #20]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000c54 	.word	0x20000c54
 8004d28:	20000c30 	.word	0x20000c30
 8004d2c:	20000be4 	.word	0x20000be4
 8004d30:	20000be8 	.word	0x20000be8
 8004d34:	20000c44 	.word	0x20000c44
 8004d38:	20000c4c 	.word	0x20000c4c
 8004d3c:	20000c34 	.word	0x20000c34
 8004d40:	2000075c 	.word	0x2000075c
 8004d44:	20000758 	.word	0x20000758
 8004d48:	20000c3c 	.word	0x20000c3c
 8004d4c:	20000c40 	.word	0x20000c40

08004d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d56:	4b27      	ldr	r3, [pc, #156]	; (8004df4 <vTaskSwitchContext+0xa4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <vTaskSwitchContext+0xa8>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d64:	e040      	b.n	8004de8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <vTaskSwitchContext+0xa8>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6c:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <vTaskSwitchContext+0xac>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	e00f      	b.n	8004d94 <vTaskSwitchContext+0x44>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <vTaskSwitchContext+0x3e>
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	e7fe      	b.n	8004d8c <vTaskSwitchContext+0x3c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	491a      	ldr	r1, [pc, #104]	; (8004e00 <vTaskSwitchContext+0xb0>)
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0e5      	beq.n	8004d74 <vTaskSwitchContext+0x24>
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <vTaskSwitchContext+0xb0>)
 8004db4:	4413      	add	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d104      	bne.n	8004dd8 <vTaskSwitchContext+0x88>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	605a      	str	r2, [r3, #4]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <vTaskSwitchContext+0xb4>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	4a06      	ldr	r2, [pc, #24]	; (8004dfc <vTaskSwitchContext+0xac>)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6013      	str	r3, [r2, #0]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	20000c54 	.word	0x20000c54
 8004df8:	20000c40 	.word	0x20000c40
 8004dfc:	20000c34 	.word	0x20000c34
 8004e00:	2000075c 	.word	0x2000075c
 8004e04:	20000758 	.word	0x20000758

08004e08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <vTaskPlaceOnEventList+0x24>
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e7fe      	b.n	8004e2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <vTaskPlaceOnEventList+0x44>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3318      	adds	r3, #24
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fe fb92 	bl	800355e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	6838      	ldr	r0, [r7, #0]
 8004e3e:	f000 fb6d 	bl	800551c <prvAddCurrentTaskToDelayedList>
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000758 	.word	0x20000758

08004e50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <vTaskPlaceOnEventListRestricted+0x26>
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e7fe      	b.n	8004e74 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <vTaskPlaceOnEventListRestricted+0x50>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3318      	adds	r3, #24
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7fe fb49 	bl	8003516 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	68b8      	ldr	r0, [r7, #8]
 8004e94:	f000 fb42 	bl	800551c <prvAddCurrentTaskToDelayedList>
	}
 8004e98:	bf00      	nop
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000758 	.word	0x20000758

08004ea4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <xTaskRemoveFromEventList+0x2a>
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e7fe      	b.n	8004ecc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fb7c 	bl	80035d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <xTaskRemoveFromEventList+0xac>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11d      	bne.n	8004f1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fe fb73 	bl	80035d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <xTaskRemoveFromEventList+0xb0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d903      	bls.n	8004efe <xTaskRemoveFromEventList+0x5a>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <xTaskRemoveFromEventList+0xb0>)
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <xTaskRemoveFromEventList+0xb4>)
 8004f0c:	441a      	add	r2, r3
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f7fe fafe 	bl	8003516 <vListInsertEnd>
 8004f1a:	e005      	b.n	8004f28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	4619      	mov	r1, r3
 8004f22:	480e      	ldr	r0, [pc, #56]	; (8004f5c <xTaskRemoveFromEventList+0xb8>)
 8004f24:	f7fe faf7 	bl	8003516 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <xTaskRemoveFromEventList+0xbc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d905      	bls.n	8004f42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f36:	2301      	movs	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <xTaskRemoveFromEventList+0xc0>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e001      	b.n	8004f46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f46:	697b      	ldr	r3, [r7, #20]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000c54 	.word	0x20000c54
 8004f54:	20000c34 	.word	0x20000c34
 8004f58:	2000075c 	.word	0x2000075c
 8004f5c:	20000bec 	.word	0x20000bec
 8004f60:	20000758 	.word	0x20000758
 8004f64:	20000c40 	.word	0x20000c40

08004f68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <vTaskInternalSetTimeOutState+0x24>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <vTaskInternalSetTimeOutState+0x28>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	605a      	str	r2, [r3, #4]
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	20000c44 	.word	0x20000c44
 8004f90:	20000c30 	.word	0x20000c30

08004f94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <xTaskCheckForTimeOut+0x24>
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	e7fe      	b.n	8004fb6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <xTaskCheckForTimeOut+0x3e>
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e7fe      	b.n	8004fd0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004fd2:	f001 f843 	bl	800605c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fd6:	4b1d      	ldr	r3, [pc, #116]	; (800504c <xTaskCheckForTimeOut+0xb8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d102      	bne.n	8004ff6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	e023      	b.n	800503e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4b15      	ldr	r3, [pc, #84]	; (8005050 <xTaskCheckForTimeOut+0xbc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d007      	beq.n	8005012 <xTaskCheckForTimeOut+0x7e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	e015      	b.n	800503e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	429a      	cmp	r2, r3
 800501a:	d20b      	bcs.n	8005034 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ff9d 	bl	8004f68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	e004      	b.n	800503e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800503a:	2301      	movs	r3, #1
 800503c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800503e:	f001 f83b 	bl	80060b8 <vPortExitCritical>

	return xReturn;
 8005042:	69fb      	ldr	r3, [r7, #28]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000c30 	.word	0x20000c30
 8005050:	20000c44 	.word	0x20000c44

08005054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <vTaskMissedYield+0x14>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	20000c40 	.word	0x20000c40

0800506c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005074:	f000 f852 	bl	800511c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <prvIdleTask+0x28>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d9f9      	bls.n	8005074 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005080:	4b05      	ldr	r3, [pc, #20]	; (8005098 <prvIdleTask+0x2c>)
 8005082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005090:	e7f0      	b.n	8005074 <prvIdleTask+0x8>
 8005092:	bf00      	nop
 8005094:	2000075c 	.word	0x2000075c
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	e00c      	b.n	80050c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <prvInitialiseTaskLists+0x60>)
 80050b4:	4413      	add	r3, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fa00 	bl	80034bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3301      	adds	r3, #1
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b37      	cmp	r3, #55	; 0x37
 80050c6:	d9ef      	bls.n	80050a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050c8:	480d      	ldr	r0, [pc, #52]	; (8005100 <prvInitialiseTaskLists+0x64>)
 80050ca:	f7fe f9f7 	bl	80034bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050ce:	480d      	ldr	r0, [pc, #52]	; (8005104 <prvInitialiseTaskLists+0x68>)
 80050d0:	f7fe f9f4 	bl	80034bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050d4:	480c      	ldr	r0, [pc, #48]	; (8005108 <prvInitialiseTaskLists+0x6c>)
 80050d6:	f7fe f9f1 	bl	80034bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050da:	480c      	ldr	r0, [pc, #48]	; (800510c <prvInitialiseTaskLists+0x70>)
 80050dc:	f7fe f9ee 	bl	80034bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050e0:	480b      	ldr	r0, [pc, #44]	; (8005110 <prvInitialiseTaskLists+0x74>)
 80050e2:	f7fe f9eb 	bl	80034bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <prvInitialiseTaskLists+0x78>)
 80050e8:	4a05      	ldr	r2, [pc, #20]	; (8005100 <prvInitialiseTaskLists+0x64>)
 80050ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <prvInitialiseTaskLists+0x7c>)
 80050ee:	4a05      	ldr	r2, [pc, #20]	; (8005104 <prvInitialiseTaskLists+0x68>)
 80050f0:	601a      	str	r2, [r3, #0]
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	2000075c 	.word	0x2000075c
 8005100:	20000bbc 	.word	0x20000bbc
 8005104:	20000bd0 	.word	0x20000bd0
 8005108:	20000bec 	.word	0x20000bec
 800510c:	20000c00 	.word	0x20000c00
 8005110:	20000c18 	.word	0x20000c18
 8005114:	20000be4 	.word	0x20000be4
 8005118:	20000be8 	.word	0x20000be8

0800511c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005122:	e019      	b.n	8005158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005124:	f000 ff9a 	bl	800605c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <prvCheckTasksWaitingTermination+0x4c>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe fa4b 	bl	80035d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <prvCheckTasksWaitingTermination+0x50>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <prvCheckTasksWaitingTermination+0x50>)
 8005142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005144:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <prvCheckTasksWaitingTermination+0x54>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3b01      	subs	r3, #1
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <prvCheckTasksWaitingTermination+0x54>)
 800514c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800514e:	f000 ffb3 	bl	80060b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f80e 	bl	8005174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <prvCheckTasksWaitingTermination+0x54>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e1      	bne.n	8005124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000c00 	.word	0x20000c00
 800516c:	20000c2c 	.word	0x20000c2c
 8005170:	20000c14 	.word	0x20000c14

08005174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005182:	2b00      	cmp	r3, #0
 8005184:	d108      	bne.n	8005198 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4618      	mov	r0, r3
 800518c:	f001 f942 	bl	8006414 <vPortFree>
				vPortFree( pxTCB );
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 f93f 	bl	8006414 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005196:	e017      	b.n	80051c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d103      	bne.n	80051aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 f936 	bl	8006414 <vPortFree>
	}
 80051a8:	e00e      	b.n	80051c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d009      	beq.n	80051c8 <prvDeleteTCB+0x54>
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e7fe      	b.n	80051c6 <prvDeleteTCB+0x52>
	}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051d6:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <prvResetNextTaskUnblockTime+0x38>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <prvResetNextTaskUnblockTime+0x3c>)
 80051e2:	f04f 32ff 	mov.w	r2, #4294967295
 80051e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051e8:	e008      	b.n	80051fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <prvResetNextTaskUnblockTime+0x38>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4a04      	ldr	r2, [pc, #16]	; (800520c <prvResetNextTaskUnblockTime+0x3c>)
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20000be4 	.word	0x20000be4
 800520c:	20000c4c 	.word	0x20000c4c

08005210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <xTaskGetSchedulerState+0x34>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800521e:	2301      	movs	r3, #1
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	e008      	b.n	8005236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <xTaskGetSchedulerState+0x38>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d102      	bne.n	8005232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800522c:	2302      	movs	r3, #2
 800522e:	607b      	str	r3, [r7, #4]
 8005230:	e001      	b.n	8005236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005232:	2300      	movs	r3, #0
 8005234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005236:	687b      	ldr	r3, [r7, #4]
	}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	20000c38 	.word	0x20000c38
 8005248:	20000c54 	.word	0x20000c54

0800524c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d051      	beq.n	8005306 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <xTaskPriorityInherit+0xc4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	429a      	cmp	r2, r3
 800526e:	d241      	bcs.n	80052f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	db06      	blt.n	8005286 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	4b25      	ldr	r3, [pc, #148]	; (8005310 <xTaskPriorityInherit+0xc4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6959      	ldr	r1, [r3, #20]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <xTaskPriorityInherit+0xc8>)
 8005298:	4413      	add	r3, r2
 800529a:	4299      	cmp	r1, r3
 800529c:	d122      	bne.n	80052e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe f994 	bl	80035d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <xTaskPriorityInherit+0xc4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b6:	4b18      	ldr	r3, [pc, #96]	; (8005318 <xTaskPriorityInherit+0xcc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d903      	bls.n	80052c6 <xTaskPriorityInherit+0x7a>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <xTaskPriorityInherit+0xcc>)
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4a10      	ldr	r2, [pc, #64]	; (8005314 <xTaskPriorityInherit+0xc8>)
 80052d4:	441a      	add	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	3304      	adds	r3, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f7fe f91a 	bl	8003516 <vListInsertEnd>
 80052e2:	e004      	b.n	80052ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <xTaskPriorityInherit+0xc4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80052ee:	2301      	movs	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e008      	b.n	8005306 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <xTaskPriorityInherit+0xc4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	429a      	cmp	r2, r3
 8005300:	d201      	bcs.n	8005306 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005302:	2301      	movs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005306:	68fb      	ldr	r3, [r7, #12]
	}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20000758 	.word	0x20000758
 8005314:	2000075c 	.word	0x2000075c
 8005318:	20000c34 	.word	0x20000c34

0800531c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d054      	beq.n	80053dc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005332:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <xTaskPriorityDisinherit+0xcc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	429a      	cmp	r2, r3
 800533a:	d009      	beq.n	8005350 <xTaskPriorityDisinherit+0x34>
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e7fe      	b.n	800534e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <xTaskPriorityDisinherit+0x50>
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	e7fe      	b.n	800536a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	1e5a      	subs	r2, r3, #1
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537e:	429a      	cmp	r2, r3
 8005380:	d02c      	beq.n	80053dc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005386:	2b00      	cmp	r3, #0
 8005388:	d128      	bne.n	80053dc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3304      	adds	r3, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe f91e 	bl	80035d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <xTaskPriorityDisinherit+0xd0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <xTaskPriorityDisinherit+0xa0>
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a0c      	ldr	r2, [pc, #48]	; (80053ec <xTaskPriorityDisinherit+0xd0>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <xTaskPriorityDisinherit+0xd4>)
 80053ca:	441a      	add	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7fe f89f 	bl	8003516 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053dc:	697b      	ldr	r3, [r7, #20]
	}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000758 	.word	0x20000758
 80053ec:	20000c34 	.word	0x20000c34
 80053f0:	2000075c 	.word	0x2000075c

080053f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005402:	2301      	movs	r3, #1
 8005404:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d068      	beq.n	80054de <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005410:	2b00      	cmp	r3, #0
 8005412:	d109      	bne.n	8005428 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e7fe      	b.n	8005426 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d902      	bls.n	8005438 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	e002      	b.n	800543e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	429a      	cmp	r2, r3
 8005446:	d04a      	beq.n	80054de <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	429a      	cmp	r2, r3
 8005450:	d145      	bne.n	80054de <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005452:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	429a      	cmp	r2, r3
 800545a:	d109      	bne.n	8005470 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	e7fe      	b.n	800546e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	db04      	blt.n	800548e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	6959      	ldr	r1, [r3, #20]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4a13      	ldr	r2, [pc, #76]	; (80054ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800549e:	4413      	add	r3, r2
 80054a0:	4299      	cmp	r1, r3
 80054a2:	d11c      	bne.n	80054de <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe f891 	bl	80035d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d903      	bls.n	80054c2 <vTaskPriorityDisinheritAfterTimeout+0xce>
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4a07      	ldr	r2, [pc, #28]	; (80054ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80054d0:	441a      	add	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fe f81c 	bl	8003516 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054de:	bf00      	nop
 80054e0:	3720      	adds	r7, #32
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000758 	.word	0x20000758
 80054ec:	2000075c 	.word	0x2000075c
 80054f0:	20000c34 	.word	0x20000c34

080054f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <pvTaskIncrementMutexHeldCount+0x24>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <pvTaskIncrementMutexHeldCount+0x24>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005506:	3201      	adds	r2, #1
 8005508:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800550a:	4b03      	ldr	r3, [pc, #12]	; (8005518 <pvTaskIncrementMutexHeldCount+0x24>)
 800550c:	681b      	ldr	r3, [r3, #0]
	}
 800550e:	4618      	mov	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	20000758 	.word	0x20000758

0800551c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005526:	4b21      	ldr	r3, [pc, #132]	; (80055ac <prvAddCurrentTaskToDelayedList+0x90>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800552c:	4b20      	ldr	r3, [pc, #128]	; (80055b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3304      	adds	r3, #4
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe f84c 	bl	80035d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d10a      	bne.n	8005556 <prvAddCurrentTaskToDelayedList+0x3a>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005546:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4819      	ldr	r0, [pc, #100]	; (80055b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005550:	f7fd ffe1 	bl	8003516 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005554:	e026      	b.n	80055a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4413      	add	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	429a      	cmp	r2, r3
 800556c:	d209      	bcs.n	8005582 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f7fd ffef 	bl	800355e <vListInsert>
}
 8005580:	e010      	b.n	80055a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005582:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f7fd ffe5 	bl	800355e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005594:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	429a      	cmp	r2, r3
 800559c:	d202      	bcs.n	80055a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800559e:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6013      	str	r3, [r2, #0]
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000c30 	.word	0x20000c30
 80055b0:	20000758 	.word	0x20000758
 80055b4:	20000c18 	.word	0x20000c18
 80055b8:	20000be8 	.word	0x20000be8
 80055bc:	20000be4 	.word	0x20000be4
 80055c0:	20000c4c 	.word	0x20000c4c

080055c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80055ce:	f000 fb97 	bl	8005d00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80055d2:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <xTimerCreateTimerTask+0x80>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d021      	beq.n	800561e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80055e2:	1d3a      	adds	r2, r7, #4
 80055e4:	f107 0108 	add.w	r1, r7, #8
 80055e8:	f107 030c 	add.w	r3, r7, #12
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fd ff4b 	bl	8003488 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	9202      	str	r2, [sp, #8]
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	2302      	movs	r3, #2
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2300      	movs	r3, #0
 8005602:	460a      	mov	r2, r1
 8005604:	4910      	ldr	r1, [pc, #64]	; (8005648 <xTimerCreateTimerTask+0x84>)
 8005606:	4811      	ldr	r0, [pc, #68]	; (800564c <xTimerCreateTimerTask+0x88>)
 8005608:	f7fe fffa 	bl	8004600 <xTaskCreateStatic>
 800560c:	4602      	mov	r2, r0
 800560e:	4b10      	ldr	r3, [pc, #64]	; (8005650 <xTimerCreateTimerTask+0x8c>)
 8005610:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005612:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <xTimerCreateTimerTask+0x8c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <xTimerCreateTimerTask+0x74>
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e7fe      	b.n	8005636 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005638:	697b      	ldr	r3, [r7, #20]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000c88 	.word	0x20000c88
 8005648:	0800756c 	.word	0x0800756c
 800564c:	080058b5 	.word	0x080058b5
 8005650:	20000c8c 	.word	0x20000c8c

08005654 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005662:	202c      	movs	r0, #44	; 0x2c
 8005664:	f000 fe14 	bl	8006290 <pvPortMalloc>
 8005668:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f841 	bl	800570e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800568c:	697b      	ldr	r3, [r7, #20]
	}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005696:	b580      	push	{r7, lr}
 8005698:	b08a      	sub	sp, #40	; 0x28
 800569a:	af02      	add	r7, sp, #8
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80056a4:	232c      	movs	r3, #44	; 0x2c
 80056a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b2c      	cmp	r3, #44	; 0x2c
 80056ac:	d009      	beq.n	80056c2 <xTimerCreateStatic+0x2c>
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	e7fe      	b.n	80056c0 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <xTimerCreateStatic+0x48>
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e7fe      	b.n	80056dc <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00d      	beq.n	8005704 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f805 	bl	800570e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005704:	69fb      	ldr	r3, [r7, #28]
	}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b086      	sub	sp, #24
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <prvInitialiseNewTimer+0x28>
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	e7fe      	b.n	8005734 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01e      	beq.n	800577a <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800573c:	f000 fae0 	bl	8005d00 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	3304      	adds	r3, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd fecd 	bl	80034fc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800576e:	f043 0304 	orr.w	r3, r3, #4
 8005772:	b2da      	uxtb	r2, r3
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800577a:	bf00      	nop
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005792:	2300      	movs	r3, #0
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <xTimerGenericCommand+0x2c>
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	623b      	str	r3, [r7, #32]
 80057ae:	e7fe      	b.n	80057ae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <xTimerGenericCommand+0x94>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d02a      	beq.n	800580e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	dc18      	bgt.n	80057fc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057ca:	f7ff fd21 	bl	8005210 <xTaskGetSchedulerState>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d109      	bne.n	80057e8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057d4:	4b10      	ldr	r3, [pc, #64]	; (8005818 <xTimerGenericCommand+0x94>)
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	f107 0110 	add.w	r1, r7, #16
 80057dc:	2300      	movs	r3, #0
 80057de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e0:	f7fe f8c4 	bl	800396c <xQueueGenericSend>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24
 80057e6:	e012      	b.n	800580e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057e8:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <xTimerGenericCommand+0x94>)
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	f107 0110 	add.w	r1, r7, #16
 80057f0:	2300      	movs	r3, #0
 80057f2:	2200      	movs	r2, #0
 80057f4:	f7fe f8ba 	bl	800396c <xQueueGenericSend>
 80057f8:	6278      	str	r0, [r7, #36]	; 0x24
 80057fa:	e008      	b.n	800580e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <xTimerGenericCommand+0x94>)
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	f107 0110 	add.w	r1, r7, #16
 8005804:	2300      	movs	r3, #0
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	f7fe f9aa 	bl	8003b60 <xQueueGenericSendFromISR>
 800580c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005810:	4618      	mov	r0, r3
 8005812:	3728      	adds	r7, #40	; 0x28
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000c88 	.word	0x20000c88

0800581c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af02      	add	r7, sp, #8
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005826:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <prvProcessExpiredTimer+0x94>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	3304      	adds	r3, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f7fd fecb 	bl	80035d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d021      	beq.n	800588c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	18d1      	adds	r1, r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	6978      	ldr	r0, [r7, #20]
 8005856:	f000 f8d1 	bl	80059fc <prvInsertTimerInActiveList>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01e      	beq.n	800589e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005860:	2300      	movs	r3, #0
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	2300      	movs	r3, #0
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	2100      	movs	r1, #0
 800586a:	6978      	ldr	r0, [r7, #20]
 800586c:	f7ff ff8a 	bl	8005784 <xTimerGenericCommand>
 8005870:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d112      	bne.n	800589e <prvProcessExpiredTimer+0x82>
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e7fe      	b.n	800588a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	b2da      	uxtb	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	6978      	ldr	r0, [r7, #20]
 80058a4:	4798      	blx	r3
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000c80 	.word	0x20000c80

080058b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058bc:	f107 0308 	add.w	r3, r7, #8
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 f857 	bl	8005974 <prvGetNextExpireTime>
 80058c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4619      	mov	r1, r3
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f803 	bl	80058d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058d2:	f000 f8d5 	bl	8005a80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058d6:	e7f1      	b.n	80058bc <prvTimerTask+0x8>

080058d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058e2:	f7ff f8c3 	bl	8004a6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058e6:	f107 0308 	add.w	r3, r7, #8
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 f866 	bl	80059bc <prvSampleTimeNow>
 80058f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d130      	bne.n	800595a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <prvProcessTimerOrBlockTask+0x3c>
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	429a      	cmp	r2, r3
 8005904:	d806      	bhi.n	8005914 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005906:	f7ff f8bf 	bl	8004a88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800590a:	68f9      	ldr	r1, [r7, #12]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff85 	bl	800581c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005912:	e024      	b.n	800595e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <prvProcessTimerOrBlockTask+0x90>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <prvProcessTimerOrBlockTask+0x50>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <prvProcessTimerOrBlockTask+0x52>
 8005928:	2300      	movs	r3, #0
 800592a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <prvProcessTimerOrBlockTask+0x94>)
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	f7fe fe2d 	bl	8004598 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800593e:	f7ff f8a3 	bl	8004a88 <xTaskResumeAll>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <prvProcessTimerOrBlockTask+0x98>)
 800594a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	f3bf 8f6f 	isb	sy
}
 8005958:	e001      	b.n	800595e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800595a:	f7ff f895 	bl	8004a88 <xTaskResumeAll>
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20000c84 	.word	0x20000c84
 800596c:	20000c88 	.word	0x20000c88
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <prvGetNextExpireTime+0x44>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <prvGetNextExpireTime+0x16>
 8005986:	2201      	movs	r2, #1
 8005988:	e000      	b.n	800598c <prvGetNextExpireTime+0x18>
 800598a:	2200      	movs	r2, #0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005998:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <prvGetNextExpireTime+0x44>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e001      	b.n	80059a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059a8:	68fb      	ldr	r3, [r7, #12]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000c80 	.word	0x20000c80

080059bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80059c4:	f7ff f8fc 	bl	8004bc0 <xTaskGetTickCount>
 80059c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <prvSampleTimeNow+0x3c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d205      	bcs.n	80059e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059d4:	f000 f930 	bl	8005c38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e002      	b.n	80059e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80059e6:	4a04      	ldr	r2, [pc, #16]	; (80059f8 <prvSampleTimeNow+0x3c>)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059ec:	68fb      	ldr	r3, [r7, #12]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000c90 	.word	0x20000c90

080059fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d812      	bhi.n	8005a48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e01b      	b.n	8005a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a36:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <prvInsertTimerInActiveList+0x7c>)
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7fd fd8c 	bl	800355e <vListInsert>
 8005a46:	e012      	b.n	8005a6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d206      	bcs.n	8005a5e <prvInsertTimerInActiveList+0x62>
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d302      	bcc.n	8005a5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e007      	b.n	8005a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <prvInsertTimerInActiveList+0x80>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7fd fd78 	bl	800355e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000c84 	.word	0x20000c84
 8005a7c:	20000c80 	.word	0x20000c80

08005a80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08e      	sub	sp, #56	; 0x38
 8005a84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a86:	e0c6      	b.n	8005c16 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	da17      	bge.n	8005abe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a8e:	1d3b      	adds	r3, r7, #4
 8005a90:	3304      	adds	r3, #4
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <prvProcessReceivedCommands+0x2e>
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	e7fe      	b.n	8005aac <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab4:	6850      	ldr	r0, [r2, #4]
 8005ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab8:	6892      	ldr	r2, [r2, #8]
 8005aba:	4611      	mov	r1, r2
 8005abc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f2c0 80a7 	blt.w	8005c14 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fd fd7a 	bl	80035d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005adc:	463b      	mov	r3, r7
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff ff6c 	bl	80059bc <prvSampleTimeNow>
 8005ae4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b09      	cmp	r3, #9
 8005aea:	f200 8094 	bhi.w	8005c16 <prvProcessReceivedCommands+0x196>
 8005aee:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <prvProcessReceivedCommands+0x74>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b1d 	.word	0x08005b1d
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b1d 	.word	0x08005b1d
 8005b00:	08005b8f 	.word	0x08005b8f
 8005b04:	08005ba3 	.word	0x08005ba3
 8005b08:	08005beb 	.word	0x08005beb
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b1d 	.word	0x08005b1d
 8005b14:	08005b8f 	.word	0x08005b8f
 8005b18:	08005ba3 	.word	0x08005ba3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	18d1      	adds	r1, r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3c:	f7ff ff5e 	bl	80059fc <prvInsertTimerInActiveList>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d067      	beq.n	8005c16 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05c      	beq.n	8005c16 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	441a      	add	r2, r3
 8005b64:	2300      	movs	r3, #0
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6e:	f7ff fe09 	bl	8005784 <xTimerGenericCommand>
 8005b72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d14d      	bne.n	8005c16 <prvProcessReceivedCommands+0x196>
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e7fe      	b.n	8005b8c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ba0:	e039      	b.n	8005c16 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d109      	bne.n	8005bd6 <prvProcessReceivedCommands+0x156>
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e7fe      	b.n	8005bd4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	18d1      	adds	r1, r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be4:	f7ff ff0a 	bl	80059fc <prvInsertTimerInActiveList>
					break;
 8005be8:	e015      	b.n	8005c16 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d103      	bne.n	8005c00 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bfa:	f000 fc0b 	bl	8006414 <vPortFree>
 8005bfe:	e00a      	b.n	8005c16 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c12:	e000      	b.n	8005c16 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c16:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <prvProcessReceivedCommands+0x1b4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	1d39      	adds	r1, r7, #4
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe f8bc 	bl	8003d9c <xQueueReceive>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f47f af2e 	bne.w	8005a88 <prvProcessReceivedCommands+0x8>
	}
}
 8005c2c:	bf00      	nop
 8005c2e:	3730      	adds	r7, #48	; 0x30
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000c88 	.word	0x20000c88

08005c38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c3e:	e047      	b.n	8005cd0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c40:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4a:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fd fcb9 	bl	80035d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02d      	beq.n	8005cd0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d90e      	bls.n	8005ca4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c92:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	f7fd fc5e 	bl	800355e <vListInsert>
 8005ca2:	e015      	b.n	8005cd0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	2100      	movs	r1, #0
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff fd68 	bl	8005784 <xTimerGenericCommand>
 8005cb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <prvSwitchTimerLists+0x98>
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	603b      	str	r3, [r7, #0]
 8005cce:	e7fe      	b.n	8005cce <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1b2      	bne.n	8005c40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ce0:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <prvSwitchTimerLists+0xc4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <prvSwitchTimerLists+0xc0>)
 8005ce6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ce8:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <prvSwitchTimerLists+0xc4>)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	6013      	str	r3, [r2, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000c80 	.word	0x20000c80
 8005cfc:	20000c84 	.word	0x20000c84

08005d00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d06:	f000 f9a9 	bl	800605c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <prvCheckForValidListAndQueue+0x60>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d120      	bne.n	8005d54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d12:	4814      	ldr	r0, [pc, #80]	; (8005d64 <prvCheckForValidListAndQueue+0x64>)
 8005d14:	f7fd fbd2 	bl	80034bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d18:	4813      	ldr	r0, [pc, #76]	; (8005d68 <prvCheckForValidListAndQueue+0x68>)
 8005d1a:	f7fd fbcf 	bl	80034bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <prvCheckForValidListAndQueue+0x6c>)
 8005d20:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <prvCheckForValidListAndQueue+0x64>)
 8005d22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d24:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <prvCheckForValidListAndQueue+0x70>)
 8005d26:	4a10      	ldr	r2, [pc, #64]	; (8005d68 <prvCheckForValidListAndQueue+0x68>)
 8005d28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <prvCheckForValidListAndQueue+0x74>)
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <prvCheckForValidListAndQueue+0x78>)
 8005d32:	2110      	movs	r1, #16
 8005d34:	200a      	movs	r0, #10
 8005d36:	f7fd fcdd 	bl	80036f4 <xQueueGenericCreateStatic>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <prvCheckForValidListAndQueue+0x60>)
 8005d3e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d40:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <prvCheckForValidListAndQueue+0x60>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <prvCheckForValidListAndQueue+0x60>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	490b      	ldr	r1, [pc, #44]	; (8005d7c <prvCheckForValidListAndQueue+0x7c>)
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe fbd0 	bl	80044f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d54:	f000 f9b0 	bl	80060b8 <vPortExitCritical>
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000c88 	.word	0x20000c88
 8005d64:	20000c58 	.word	0x20000c58
 8005d68:	20000c6c 	.word	0x20000c6c
 8005d6c:	20000c80 	.word	0x20000c80
 8005d70:	20000c84 	.word	0x20000c84
 8005d74:	20000d34 	.word	0x20000d34
 8005d78:	20000c94 	.word	0x20000c94
 8005d7c:	08007574 	.word	0x08007574

08005d80 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <xTimerIsTimerActive+0x26>
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e7fe      	b.n	8005da4 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8005da6:	f000 f959 	bl	800605c <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <xTimerIsTimerActive+0x3e>
		{
			xReturn = pdFALSE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e001      	b.n	8005dc2 <xTimerIsTimerActive+0x42>
		}
		else
		{
			xReturn = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005dc2:	f000 f979 	bl	80060b8 <vPortExitCritical>

	return xReturn;
 8005dc6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <pvTimerGetTimerID+0x26>
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	e7fe      	b.n	8005df4 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8005df6:	f000 f931 	bl	800605c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005e00:	f000 f95a 	bl	80060b8 <vPortExitCritical>

	return pvReturn;
 8005e04:	693b      	ldr	r3, [r7, #16]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3b04      	subs	r3, #4
 8005e20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3b04      	subs	r3, #4
 8005e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f023 0201 	bic.w	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3b04      	subs	r3, #4
 8005e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e40:	4a0c      	ldr	r2, [pc, #48]	; (8005e74 <pxPortInitialiseStack+0x64>)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3b14      	subs	r3, #20
 8005e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3b04      	subs	r3, #4
 8005e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f06f 0202 	mvn.w	r2, #2
 8005e5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3b20      	subs	r3, #32
 8005e64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e66:	68fb      	ldr	r3, [r7, #12]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	08005e79 	.word	0x08005e79

08005e78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e82:	4b11      	ldr	r3, [pc, #68]	; (8005ec8 <prvTaskExitError+0x50>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d009      	beq.n	8005ea0 <prvTaskExitError+0x28>
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	e7fe      	b.n	8005e9e <prvTaskExitError+0x26>
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005eb2:	bf00      	nop
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0fc      	beq.n	8005eb4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000014 	.word	0x20000014
 8005ecc:	00000000 	.word	0x00000000

08005ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <pxCurrentTCBConst2>)
 8005ed2:	6819      	ldr	r1, [r3, #0]
 8005ed4:	6808      	ldr	r0, [r1, #0]
 8005ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eda:	f380 8809 	msr	PSP, r0
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f380 8811 	msr	BASEPRI, r0
 8005eea:	4770      	bx	lr
 8005eec:	f3af 8000 	nop.w

08005ef0 <pxCurrentTCBConst2>:
 8005ef0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop

08005ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ef8:	4808      	ldr	r0, [pc, #32]	; (8005f1c <prvPortStartFirstTask+0x24>)
 8005efa:	6800      	ldr	r0, [r0, #0]
 8005efc:	6800      	ldr	r0, [r0, #0]
 8005efe:	f380 8808 	msr	MSP, r0
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8814 	msr	CONTROL, r0
 8005f0a:	b662      	cpsie	i
 8005f0c:	b661      	cpsie	f
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	df00      	svc	0
 8005f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f1a:	bf00      	nop
 8005f1c:	e000ed08 	.word	0xe000ed08

08005f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f26:	4b44      	ldr	r3, [pc, #272]	; (8006038 <xPortStartScheduler+0x118>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a44      	ldr	r2, [pc, #272]	; (800603c <xPortStartScheduler+0x11c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d109      	bne.n	8005f44 <xPortStartScheduler+0x24>
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	e7fe      	b.n	8005f42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f44:	4b3c      	ldr	r3, [pc, #240]	; (8006038 <xPortStartScheduler+0x118>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a3d      	ldr	r2, [pc, #244]	; (8006040 <xPortStartScheduler+0x120>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d109      	bne.n	8005f62 <xPortStartScheduler+0x42>
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e7fe      	b.n	8005f60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f62:	4b38      	ldr	r3, [pc, #224]	; (8006044 <xPortStartScheduler+0x124>)
 8005f64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	22ff      	movs	r2, #255	; 0xff
 8005f72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	4b30      	ldr	r3, [pc, #192]	; (8006048 <xPortStartScheduler+0x128>)
 8005f88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f8a:	4b30      	ldr	r3, [pc, #192]	; (800604c <xPortStartScheduler+0x12c>)
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f90:	e009      	b.n	8005fa6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005f92:	4b2e      	ldr	r3, [pc, #184]	; (800604c <xPortStartScheduler+0x12c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	4a2c      	ldr	r2, [pc, #176]	; (800604c <xPortStartScheduler+0x12c>)
 8005f9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b80      	cmp	r3, #128	; 0x80
 8005fb0:	d0ef      	beq.n	8005f92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fb2:	4b26      	ldr	r3, [pc, #152]	; (800604c <xPortStartScheduler+0x12c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1c3 0307 	rsb	r3, r3, #7
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d009      	beq.n	8005fd2 <xPortStartScheduler+0xb2>
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	e7fe      	b.n	8005fd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fd2:	4b1e      	ldr	r3, [pc, #120]	; (800604c <xPortStartScheduler+0x12c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	; (800604c <xPortStartScheduler+0x12c>)
 8005fda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fdc:	4b1b      	ldr	r3, [pc, #108]	; (800604c <xPortStartScheduler+0x12c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <xPortStartScheduler+0x12c>)
 8005fe6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ff0:	4b17      	ldr	r3, [pc, #92]	; (8006050 <xPortStartScheduler+0x130>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a16      	ldr	r2, [pc, #88]	; (8006050 <xPortStartScheduler+0x130>)
 8005ff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ffa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ffc:	4b14      	ldr	r3, [pc, #80]	; (8006050 <xPortStartScheduler+0x130>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <xPortStartScheduler+0x130>)
 8006002:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006006:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006008:	f000 f8d6 	bl	80061b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <xPortStartScheduler+0x134>)
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006012:	f000 f8f5 	bl	8006200 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <xPortStartScheduler+0x138>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a0f      	ldr	r2, [pc, #60]	; (8006058 <xPortStartScheduler+0x138>)
 800601c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006020:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006022:	f7ff ff69 	bl	8005ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006026:	f7fe fe93 	bl	8004d50 <vTaskSwitchContext>
	prvTaskExitError();
 800602a:	f7ff ff25 	bl	8005e78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	e000ed00 	.word	0xe000ed00
 800603c:	410fc271 	.word	0x410fc271
 8006040:	410fc270 	.word	0x410fc270
 8006044:	e000e400 	.word	0xe000e400
 8006048:	20000d84 	.word	0x20000d84
 800604c:	20000d88 	.word	0x20000d88
 8006050:	e000ed20 	.word	0xe000ed20
 8006054:	20000014 	.word	0x20000014
 8006058:	e000ef34 	.word	0xe000ef34

0800605c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006074:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <vPortEnterCritical+0x54>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <vPortEnterCritical+0x54>)
 800607c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800607e:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <vPortEnterCritical+0x54>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10e      	bne.n	80060a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <vPortEnterCritical+0x58>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d009      	beq.n	80060a4 <vPortEnterCritical+0x48>
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	603b      	str	r3, [r7, #0]
 80060a2:	e7fe      	b.n	80060a2 <vPortEnterCritical+0x46>
	}
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000014 	.word	0x20000014
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060be:	4b11      	ldr	r3, [pc, #68]	; (8006104 <vPortExitCritical+0x4c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <vPortExitCritical+0x22>
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	e7fe      	b.n	80060d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <vPortExitCritical+0x4c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3b01      	subs	r3, #1
 80060e0:	4a08      	ldr	r2, [pc, #32]	; (8006104 <vPortExitCritical+0x4c>)
 80060e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <vPortExitCritical+0x4c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <vPortExitCritical+0x3e>
 80060ec:	2300      	movs	r3, #0
 80060ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000014 	.word	0x20000014
	...

08006110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006110:	f3ef 8009 	mrs	r0, PSP
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <pxCurrentTCBConst>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	f01e 0f10 	tst.w	lr, #16
 8006120:	bf08      	it	eq
 8006122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	6010      	str	r0, [r2, #0]
 800612c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006134:	f380 8811 	msr	BASEPRI, r0
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f7fe fe06 	bl	8004d50 <vTaskSwitchContext>
 8006144:	f04f 0000 	mov.w	r0, #0
 8006148:	f380 8811 	msr	BASEPRI, r0
 800614c:	bc09      	pop	{r0, r3}
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	6808      	ldr	r0, [r1, #0]
 8006152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006156:	f01e 0f10 	tst.w	lr, #16
 800615a:	bf08      	it	eq
 800615c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006160:	f380 8809 	msr	PSP, r0
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	f3af 8000 	nop.w

08006170 <pxCurrentTCBConst>:
 8006170:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop

08006178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006190:	f7fe fd26 	bl	8004be0 <xTaskIncrementTick>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <SysTick_Handler+0x3c>)
 800619c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	2300      	movs	r3, #0
 80061a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <vPortSetupTimerInterrupt+0x34>)
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061c2:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <vPortSetupTimerInterrupt+0x38>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061c8:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <vPortSetupTimerInterrupt+0x3c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a0a      	ldr	r2, [pc, #40]	; (80061f8 <vPortSetupTimerInterrupt+0x40>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	099b      	lsrs	r3, r3, #6
 80061d4:	4a09      	ldr	r2, [pc, #36]	; (80061fc <vPortSetupTimerInterrupt+0x44>)
 80061d6:	3b01      	subs	r3, #1
 80061d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061da:	4b04      	ldr	r3, [pc, #16]	; (80061ec <vPortSetupTimerInterrupt+0x34>)
 80061dc:	2207      	movs	r2, #7
 80061de:	601a      	str	r2, [r3, #0]
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	e000e010 	.word	0xe000e010
 80061f0:	e000e018 	.word	0xe000e018
 80061f4:	20000008 	.word	0x20000008
 80061f8:	10624dd3 	.word	0x10624dd3
 80061fc:	e000e014 	.word	0xe000e014

08006200 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006200:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006210 <vPortEnableVFP+0x10>
 8006204:	6801      	ldr	r1, [r0, #0]
 8006206:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800620a:	6001      	str	r1, [r0, #0]
 800620c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800620e:	bf00      	nop
 8006210:	e000ed88 	.word	0xe000ed88

08006214 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800621a:	f3ef 8305 	mrs	r3, IPSR
 800621e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b0f      	cmp	r3, #15
 8006224:	d913      	bls.n	800624e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006226:	4a16      	ldr	r2, [pc, #88]	; (8006280 <vPortValidateInterruptPriority+0x6c>)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006230:	4b14      	ldr	r3, [pc, #80]	; (8006284 <vPortValidateInterruptPriority+0x70>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	7afa      	ldrb	r2, [r7, #11]
 8006236:	429a      	cmp	r2, r3
 8006238:	d209      	bcs.n	800624e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	e7fe      	b.n	800624c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <vPortValidateInterruptPriority+0x74>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <vPortValidateInterruptPriority+0x78>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d909      	bls.n	8006272 <vPortValidateInterruptPriority+0x5e>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	e7fe      	b.n	8006270 <vPortValidateInterruptPriority+0x5c>
	}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	e000e3f0 	.word	0xe000e3f0
 8006284:	20000d84 	.word	0x20000d84
 8006288:	e000ed0c 	.word	0xe000ed0c
 800628c:	20000d88 	.word	0x20000d88

08006290 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006298:	2300      	movs	r3, #0
 800629a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800629c:	f7fe fbe6 	bl	8004a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062a0:	4b57      	ldr	r3, [pc, #348]	; (8006400 <pvPortMalloc+0x170>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062a8:	f000 f90c 	bl	80064c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062ac:	4b55      	ldr	r3, [pc, #340]	; (8006404 <pvPortMalloc+0x174>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 808c 	bne.w	80063d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01c      	beq.n	80062fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80062c0:	2208      	movs	r2, #8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4413      	add	r3, r2
 80062c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d013      	beq.n	80062fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f023 0307 	bic.w	r3, r3, #7
 80062d8:	3308      	adds	r3, #8
 80062da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <pvPortMalloc+0x6a>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e7fe      	b.n	80062f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d068      	beq.n	80063d2 <pvPortMalloc+0x142>
 8006300:	4b41      	ldr	r3, [pc, #260]	; (8006408 <pvPortMalloc+0x178>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	429a      	cmp	r2, r3
 8006308:	d863      	bhi.n	80063d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800630a:	4b40      	ldr	r3, [pc, #256]	; (800640c <pvPortMalloc+0x17c>)
 800630c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800630e:	4b3f      	ldr	r3, [pc, #252]	; (800640c <pvPortMalloc+0x17c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006314:	e004      	b.n	8006320 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d903      	bls.n	8006332 <pvPortMalloc+0xa2>
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f1      	bne.n	8006316 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006332:	4b33      	ldr	r3, [pc, #204]	; (8006400 <pvPortMalloc+0x170>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006338:	429a      	cmp	r2, r3
 800633a:	d04a      	beq.n	80063d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2208      	movs	r2, #8
 8006342:	4413      	add	r3, r2
 8006344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1ad2      	subs	r2, r2, r3
 8006356:	2308      	movs	r3, #8
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	429a      	cmp	r2, r3
 800635c:	d91e      	bls.n	800639c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800635e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4413      	add	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <pvPortMalloc+0xf4>
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	e7fe      	b.n	8006382 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006396:	69b8      	ldr	r0, [r7, #24]
 8006398:	f000 f8f6 	bl	8006588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800639c:	4b1a      	ldr	r3, [pc, #104]	; (8006408 <pvPortMalloc+0x178>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	4a18      	ldr	r2, [pc, #96]	; (8006408 <pvPortMalloc+0x178>)
 80063a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063aa:	4b17      	ldr	r3, [pc, #92]	; (8006408 <pvPortMalloc+0x178>)
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b18      	ldr	r3, [pc, #96]	; (8006410 <pvPortMalloc+0x180>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d203      	bcs.n	80063be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063b6:	4b14      	ldr	r3, [pc, #80]	; (8006408 <pvPortMalloc+0x178>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a15      	ldr	r2, [pc, #84]	; (8006410 <pvPortMalloc+0x180>)
 80063bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	4b10      	ldr	r3, [pc, #64]	; (8006404 <pvPortMalloc+0x174>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063d2:	f7fe fb59 	bl	8004a88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <pvPortMalloc+0x164>
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e7fe      	b.n	80063f2 <pvPortMalloc+0x162>
	return pvReturn;
 80063f4:	69fb      	ldr	r3, [r7, #28]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3728      	adds	r7, #40	; 0x28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20004994 	.word	0x20004994
 8006404:	200049a0 	.word	0x200049a0
 8006408:	20004998 	.word	0x20004998
 800640c:	2000498c 	.word	0x2000498c
 8006410:	2000499c 	.word	0x2000499c

08006414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d046      	beq.n	80064b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006426:	2308      	movs	r3, #8
 8006428:	425b      	negs	r3, r3
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	4b20      	ldr	r3, [pc, #128]	; (80064bc <vPortFree+0xa8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4013      	ands	r3, r2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <vPortFree+0x42>
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e7fe      	b.n	8006454 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <vPortFree+0x5e>
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	60bb      	str	r3, [r7, #8]
 8006470:	e7fe      	b.n	8006470 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	4b11      	ldr	r3, [pc, #68]	; (80064bc <vPortFree+0xa8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4013      	ands	r3, r2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d019      	beq.n	80064b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d115      	bne.n	80064b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <vPortFree+0xa8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	43db      	mvns	r3, r3
 8006492:	401a      	ands	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006498:	f7fe fae8 	bl	8004a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <vPortFree+0xac>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4413      	add	r3, r2
 80064a6:	4a06      	ldr	r2, [pc, #24]	; (80064c0 <vPortFree+0xac>)
 80064a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064aa:	6938      	ldr	r0, [r7, #16]
 80064ac:	f000 f86c 	bl	8006588 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80064b0:	f7fe faea 	bl	8004a88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064b4:	bf00      	nop
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	200049a0 	.word	0x200049a0
 80064c0:	20004998 	.word	0x20004998

080064c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064d0:	4b27      	ldr	r3, [pc, #156]	; (8006570 <prvHeapInit+0xac>)
 80064d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00c      	beq.n	80064f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3307      	adds	r3, #7
 80064e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0307 	bic.w	r3, r3, #7
 80064ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <prvHeapInit+0xac>)
 80064f4:	4413      	add	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064fc:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <prvHeapInit+0xb0>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006502:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <prvHeapInit+0xb0>)
 8006504:	2200      	movs	r2, #0
 8006506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	4413      	add	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006510:	2208      	movs	r2, #8
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0307 	bic.w	r3, r3, #7
 800651e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a15      	ldr	r2, [pc, #84]	; (8006578 <prvHeapInit+0xb4>)
 8006524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <prvHeapInit+0xb4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <prvHeapInit+0xb4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <prvHeapInit+0xb4>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4a0a      	ldr	r2, [pc, #40]	; (800657c <prvHeapInit+0xb8>)
 8006552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4a09      	ldr	r2, [pc, #36]	; (8006580 <prvHeapInit+0xbc>)
 800655a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800655c:	4b09      	ldr	r3, [pc, #36]	; (8006584 <prvHeapInit+0xc0>)
 800655e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006562:	601a      	str	r2, [r3, #0]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000d8c 	.word	0x20000d8c
 8006574:	2000498c 	.word	0x2000498c
 8006578:	20004994 	.word	0x20004994
 800657c:	2000499c 	.word	0x2000499c
 8006580:	20004998 	.word	0x20004998
 8006584:	200049a0 	.word	0x200049a0

08006588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006590:	4b28      	ldr	r3, [pc, #160]	; (8006634 <prvInsertBlockIntoFreeList+0xac>)
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e002      	b.n	800659c <prvInsertBlockIntoFreeList+0x14>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d8f7      	bhi.n	8006596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4413      	add	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d108      	bne.n	80065ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	441a      	add	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	441a      	add	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d118      	bne.n	8006610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b15      	ldr	r3, [pc, #84]	; (8006638 <prvInsertBlockIntoFreeList+0xb0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d00d      	beq.n	8006606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	441a      	add	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e008      	b.n	8006618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <prvInsertBlockIntoFreeList+0xb0>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e003      	b.n	8006618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	d002      	beq.n	8006626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000498c 	.word	0x2000498c
 8006638:	20004994 	.word	0x20004994

0800663c <__errno>:
 800663c:	4b01      	ldr	r3, [pc, #4]	; (8006644 <__errno+0x8>)
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000018 	.word	0x20000018

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4e0d      	ldr	r6, [pc, #52]	; (8006680 <__libc_init_array+0x38>)
 800664c:	4c0d      	ldr	r4, [pc, #52]	; (8006684 <__libc_init_array+0x3c>)
 800664e:	1ba4      	subs	r4, r4, r6
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	2500      	movs	r5, #0
 8006654:	42a5      	cmp	r5, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	4e0b      	ldr	r6, [pc, #44]	; (8006688 <__libc_init_array+0x40>)
 800665a:	4c0c      	ldr	r4, [pc, #48]	; (800668c <__libc_init_array+0x44>)
 800665c:	f000 ff10 	bl	8007480 <_init>
 8006660:	1ba4      	subs	r4, r4, r6
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2500      	movs	r5, #0
 8006666:	42a5      	cmp	r5, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006670:	4798      	blx	r3
 8006672:	3501      	adds	r5, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800667a:	4798      	blx	r3
 800667c:	3501      	adds	r5, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	080076d0 	.word	0x080076d0
 8006684:	080076d0 	.word	0x080076d0
 8006688:	080076d0 	.word	0x080076d0
 800668c:	080076d4 	.word	0x080076d4

08006690 <memcpy>:
 8006690:	b510      	push	{r4, lr}
 8006692:	1e43      	subs	r3, r0, #1
 8006694:	440a      	add	r2, r1
 8006696:	4291      	cmp	r1, r2
 8006698:	d100      	bne.n	800669c <memcpy+0xc>
 800669a:	bd10      	pop	{r4, pc}
 800669c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a4:	e7f7      	b.n	8006696 <memcpy+0x6>

080066a6 <memset>:
 80066a6:	4402      	add	r2, r0
 80066a8:	4603      	mov	r3, r0
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d100      	bne.n	80066b0 <memset+0xa>
 80066ae:	4770      	bx	lr
 80066b0:	f803 1b01 	strb.w	r1, [r3], #1
 80066b4:	e7f9      	b.n	80066aa <memset+0x4>
	...

080066b8 <iprintf>:
 80066b8:	b40f      	push	{r0, r1, r2, r3}
 80066ba:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <iprintf+0x2c>)
 80066bc:	b513      	push	{r0, r1, r4, lr}
 80066be:	681c      	ldr	r4, [r3, #0]
 80066c0:	b124      	cbz	r4, 80066cc <iprintf+0x14>
 80066c2:	69a3      	ldr	r3, [r4, #24]
 80066c4:	b913      	cbnz	r3, 80066cc <iprintf+0x14>
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 f84e 	bl	8006768 <__sinit>
 80066cc:	ab05      	add	r3, sp, #20
 80066ce:	9a04      	ldr	r2, [sp, #16]
 80066d0:	68a1      	ldr	r1, [r4, #8]
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 f955 	bl	8006984 <_vfiprintf_r>
 80066da:	b002      	add	sp, #8
 80066dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e0:	b004      	add	sp, #16
 80066e2:	4770      	bx	lr
 80066e4:	20000018 	.word	0x20000018

080066e8 <std>:
 80066e8:	2300      	movs	r3, #0
 80066ea:	b510      	push	{r4, lr}
 80066ec:	4604      	mov	r4, r0
 80066ee:	e9c0 3300 	strd	r3, r3, [r0]
 80066f2:	6083      	str	r3, [r0, #8]
 80066f4:	8181      	strh	r1, [r0, #12]
 80066f6:	6643      	str	r3, [r0, #100]	; 0x64
 80066f8:	81c2      	strh	r2, [r0, #14]
 80066fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066fe:	6183      	str	r3, [r0, #24]
 8006700:	4619      	mov	r1, r3
 8006702:	2208      	movs	r2, #8
 8006704:	305c      	adds	r0, #92	; 0x5c
 8006706:	f7ff ffce 	bl	80066a6 <memset>
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <std+0x38>)
 800670c:	6263      	str	r3, [r4, #36]	; 0x24
 800670e:	4b05      	ldr	r3, [pc, #20]	; (8006724 <std+0x3c>)
 8006710:	62a3      	str	r3, [r4, #40]	; 0x28
 8006712:	4b05      	ldr	r3, [pc, #20]	; (8006728 <std+0x40>)
 8006714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <std+0x44>)
 8006718:	6224      	str	r4, [r4, #32]
 800671a:	6323      	str	r3, [r4, #48]	; 0x30
 800671c:	bd10      	pop	{r4, pc}
 800671e:	bf00      	nop
 8006720:	08006ee1 	.word	0x08006ee1
 8006724:	08006f03 	.word	0x08006f03
 8006728:	08006f3b 	.word	0x08006f3b
 800672c:	08006f5f 	.word	0x08006f5f

08006730 <_cleanup_r>:
 8006730:	4901      	ldr	r1, [pc, #4]	; (8006738 <_cleanup_r+0x8>)
 8006732:	f000 b885 	b.w	8006840 <_fwalk_reent>
 8006736:	bf00      	nop
 8006738:	08007239 	.word	0x08007239

0800673c <__sfmoreglue>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	1e4a      	subs	r2, r1, #1
 8006740:	2568      	movs	r5, #104	; 0x68
 8006742:	4355      	muls	r5, r2
 8006744:	460e      	mov	r6, r1
 8006746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800674a:	f000 f897 	bl	800687c <_malloc_r>
 800674e:	4604      	mov	r4, r0
 8006750:	b140      	cbz	r0, 8006764 <__sfmoreglue+0x28>
 8006752:	2100      	movs	r1, #0
 8006754:	e9c0 1600 	strd	r1, r6, [r0]
 8006758:	300c      	adds	r0, #12
 800675a:	60a0      	str	r0, [r4, #8]
 800675c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006760:	f7ff ffa1 	bl	80066a6 <memset>
 8006764:	4620      	mov	r0, r4
 8006766:	bd70      	pop	{r4, r5, r6, pc}

08006768 <__sinit>:
 8006768:	6983      	ldr	r3, [r0, #24]
 800676a:	b510      	push	{r4, lr}
 800676c:	4604      	mov	r4, r0
 800676e:	bb33      	cbnz	r3, 80067be <__sinit+0x56>
 8006770:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006774:	6503      	str	r3, [r0, #80]	; 0x50
 8006776:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <__sinit+0x58>)
 8006778:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <__sinit+0x5c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6282      	str	r2, [r0, #40]	; 0x28
 800677e:	4298      	cmp	r0, r3
 8006780:	bf04      	itt	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	6183      	streq	r3, [r0, #24]
 8006786:	f000 f81f 	bl	80067c8 <__sfp>
 800678a:	6060      	str	r0, [r4, #4]
 800678c:	4620      	mov	r0, r4
 800678e:	f000 f81b 	bl	80067c8 <__sfp>
 8006792:	60a0      	str	r0, [r4, #8]
 8006794:	4620      	mov	r0, r4
 8006796:	f000 f817 	bl	80067c8 <__sfp>
 800679a:	2200      	movs	r2, #0
 800679c:	60e0      	str	r0, [r4, #12]
 800679e:	2104      	movs	r1, #4
 80067a0:	6860      	ldr	r0, [r4, #4]
 80067a2:	f7ff ffa1 	bl	80066e8 <std>
 80067a6:	2201      	movs	r2, #1
 80067a8:	2109      	movs	r1, #9
 80067aa:	68a0      	ldr	r0, [r4, #8]
 80067ac:	f7ff ff9c 	bl	80066e8 <std>
 80067b0:	2202      	movs	r2, #2
 80067b2:	2112      	movs	r1, #18
 80067b4:	68e0      	ldr	r0, [r4, #12]
 80067b6:	f7ff ff97 	bl	80066e8 <std>
 80067ba:	2301      	movs	r3, #1
 80067bc:	61a3      	str	r3, [r4, #24]
 80067be:	bd10      	pop	{r4, pc}
 80067c0:	08007630 	.word	0x08007630
 80067c4:	08006731 	.word	0x08006731

080067c8 <__sfp>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <__sfp+0x70>)
 80067cc:	681e      	ldr	r6, [r3, #0]
 80067ce:	69b3      	ldr	r3, [r6, #24]
 80067d0:	4607      	mov	r7, r0
 80067d2:	b913      	cbnz	r3, 80067da <__sfp+0x12>
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7ff ffc7 	bl	8006768 <__sinit>
 80067da:	3648      	adds	r6, #72	; 0x48
 80067dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	d503      	bpl.n	80067ec <__sfp+0x24>
 80067e4:	6833      	ldr	r3, [r6, #0]
 80067e6:	b133      	cbz	r3, 80067f6 <__sfp+0x2e>
 80067e8:	6836      	ldr	r6, [r6, #0]
 80067ea:	e7f7      	b.n	80067dc <__sfp+0x14>
 80067ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067f0:	b16d      	cbz	r5, 800680e <__sfp+0x46>
 80067f2:	3468      	adds	r4, #104	; 0x68
 80067f4:	e7f4      	b.n	80067e0 <__sfp+0x18>
 80067f6:	2104      	movs	r1, #4
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff ff9f 	bl	800673c <__sfmoreglue>
 80067fe:	6030      	str	r0, [r6, #0]
 8006800:	2800      	cmp	r0, #0
 8006802:	d1f1      	bne.n	80067e8 <__sfp+0x20>
 8006804:	230c      	movs	r3, #12
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	4604      	mov	r4, r0
 800680a:	4620      	mov	r0, r4
 800680c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <__sfp+0x74>)
 8006810:	6665      	str	r5, [r4, #100]	; 0x64
 8006812:	e9c4 5500 	strd	r5, r5, [r4]
 8006816:	60a5      	str	r5, [r4, #8]
 8006818:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800681c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006820:	2208      	movs	r2, #8
 8006822:	4629      	mov	r1, r5
 8006824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006828:	f7ff ff3d 	bl	80066a6 <memset>
 800682c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006830:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006834:	e7e9      	b.n	800680a <__sfp+0x42>
 8006836:	bf00      	nop
 8006838:	08007630 	.word	0x08007630
 800683c:	ffff0001 	.word	0xffff0001

08006840 <_fwalk_reent>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4680      	mov	r8, r0
 8006846:	4689      	mov	r9, r1
 8006848:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800684c:	2600      	movs	r6, #0
 800684e:	b914      	cbnz	r4, 8006856 <_fwalk_reent+0x16>
 8006850:	4630      	mov	r0, r6
 8006852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006856:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800685a:	3f01      	subs	r7, #1
 800685c:	d501      	bpl.n	8006862 <_fwalk_reent+0x22>
 800685e:	6824      	ldr	r4, [r4, #0]
 8006860:	e7f5      	b.n	800684e <_fwalk_reent+0xe>
 8006862:	89ab      	ldrh	r3, [r5, #12]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d907      	bls.n	8006878 <_fwalk_reent+0x38>
 8006868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800686c:	3301      	adds	r3, #1
 800686e:	d003      	beq.n	8006878 <_fwalk_reent+0x38>
 8006870:	4629      	mov	r1, r5
 8006872:	4640      	mov	r0, r8
 8006874:	47c8      	blx	r9
 8006876:	4306      	orrs	r6, r0
 8006878:	3568      	adds	r5, #104	; 0x68
 800687a:	e7ee      	b.n	800685a <_fwalk_reent+0x1a>

0800687c <_malloc_r>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	1ccd      	adds	r5, r1, #3
 8006880:	f025 0503 	bic.w	r5, r5, #3
 8006884:	3508      	adds	r5, #8
 8006886:	2d0c      	cmp	r5, #12
 8006888:	bf38      	it	cc
 800688a:	250c      	movcc	r5, #12
 800688c:	2d00      	cmp	r5, #0
 800688e:	4606      	mov	r6, r0
 8006890:	db01      	blt.n	8006896 <_malloc_r+0x1a>
 8006892:	42a9      	cmp	r1, r5
 8006894:	d903      	bls.n	800689e <_malloc_r+0x22>
 8006896:	230c      	movs	r3, #12
 8006898:	6033      	str	r3, [r6, #0]
 800689a:	2000      	movs	r0, #0
 800689c:	bd70      	pop	{r4, r5, r6, pc}
 800689e:	f000 fd6b 	bl	8007378 <__malloc_lock>
 80068a2:	4a21      	ldr	r2, [pc, #132]	; (8006928 <_malloc_r+0xac>)
 80068a4:	6814      	ldr	r4, [r2, #0]
 80068a6:	4621      	mov	r1, r4
 80068a8:	b991      	cbnz	r1, 80068d0 <_malloc_r+0x54>
 80068aa:	4c20      	ldr	r4, [pc, #128]	; (800692c <_malloc_r+0xb0>)
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	b91b      	cbnz	r3, 80068b8 <_malloc_r+0x3c>
 80068b0:	4630      	mov	r0, r6
 80068b2:	f000 fb05 	bl	8006ec0 <_sbrk_r>
 80068b6:	6020      	str	r0, [r4, #0]
 80068b8:	4629      	mov	r1, r5
 80068ba:	4630      	mov	r0, r6
 80068bc:	f000 fb00 	bl	8006ec0 <_sbrk_r>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d124      	bne.n	800690e <_malloc_r+0x92>
 80068c4:	230c      	movs	r3, #12
 80068c6:	6033      	str	r3, [r6, #0]
 80068c8:	4630      	mov	r0, r6
 80068ca:	f000 fd56 	bl	800737a <__malloc_unlock>
 80068ce:	e7e4      	b.n	800689a <_malloc_r+0x1e>
 80068d0:	680b      	ldr	r3, [r1, #0]
 80068d2:	1b5b      	subs	r3, r3, r5
 80068d4:	d418      	bmi.n	8006908 <_malloc_r+0x8c>
 80068d6:	2b0b      	cmp	r3, #11
 80068d8:	d90f      	bls.n	80068fa <_malloc_r+0x7e>
 80068da:	600b      	str	r3, [r1, #0]
 80068dc:	50cd      	str	r5, [r1, r3]
 80068de:	18cc      	adds	r4, r1, r3
 80068e0:	4630      	mov	r0, r6
 80068e2:	f000 fd4a 	bl	800737a <__malloc_unlock>
 80068e6:	f104 000b 	add.w	r0, r4, #11
 80068ea:	1d23      	adds	r3, r4, #4
 80068ec:	f020 0007 	bic.w	r0, r0, #7
 80068f0:	1ac3      	subs	r3, r0, r3
 80068f2:	d0d3      	beq.n	800689c <_malloc_r+0x20>
 80068f4:	425a      	negs	r2, r3
 80068f6:	50e2      	str	r2, [r4, r3]
 80068f8:	e7d0      	b.n	800689c <_malloc_r+0x20>
 80068fa:	428c      	cmp	r4, r1
 80068fc:	684b      	ldr	r3, [r1, #4]
 80068fe:	bf16      	itet	ne
 8006900:	6063      	strne	r3, [r4, #4]
 8006902:	6013      	streq	r3, [r2, #0]
 8006904:	460c      	movne	r4, r1
 8006906:	e7eb      	b.n	80068e0 <_malloc_r+0x64>
 8006908:	460c      	mov	r4, r1
 800690a:	6849      	ldr	r1, [r1, #4]
 800690c:	e7cc      	b.n	80068a8 <_malloc_r+0x2c>
 800690e:	1cc4      	adds	r4, r0, #3
 8006910:	f024 0403 	bic.w	r4, r4, #3
 8006914:	42a0      	cmp	r0, r4
 8006916:	d005      	beq.n	8006924 <_malloc_r+0xa8>
 8006918:	1a21      	subs	r1, r4, r0
 800691a:	4630      	mov	r0, r6
 800691c:	f000 fad0 	bl	8006ec0 <_sbrk_r>
 8006920:	3001      	adds	r0, #1
 8006922:	d0cf      	beq.n	80068c4 <_malloc_r+0x48>
 8006924:	6025      	str	r5, [r4, #0]
 8006926:	e7db      	b.n	80068e0 <_malloc_r+0x64>
 8006928:	200049a4 	.word	0x200049a4
 800692c:	200049a8 	.word	0x200049a8

08006930 <__sfputc_r>:
 8006930:	6893      	ldr	r3, [r2, #8]
 8006932:	3b01      	subs	r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	b410      	push	{r4}
 8006938:	6093      	str	r3, [r2, #8]
 800693a:	da08      	bge.n	800694e <__sfputc_r+0x1e>
 800693c:	6994      	ldr	r4, [r2, #24]
 800693e:	42a3      	cmp	r3, r4
 8006940:	db01      	blt.n	8006946 <__sfputc_r+0x16>
 8006942:	290a      	cmp	r1, #10
 8006944:	d103      	bne.n	800694e <__sfputc_r+0x1e>
 8006946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800694a:	f000 bb0d 	b.w	8006f68 <__swbuf_r>
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	1c58      	adds	r0, r3, #1
 8006952:	6010      	str	r0, [r2, #0]
 8006954:	7019      	strb	r1, [r3, #0]
 8006956:	4608      	mov	r0, r1
 8006958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800695c:	4770      	bx	lr

0800695e <__sfputs_r>:
 800695e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006960:	4606      	mov	r6, r0
 8006962:	460f      	mov	r7, r1
 8006964:	4614      	mov	r4, r2
 8006966:	18d5      	adds	r5, r2, r3
 8006968:	42ac      	cmp	r4, r5
 800696a:	d101      	bne.n	8006970 <__sfputs_r+0x12>
 800696c:	2000      	movs	r0, #0
 800696e:	e007      	b.n	8006980 <__sfputs_r+0x22>
 8006970:	463a      	mov	r2, r7
 8006972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006976:	4630      	mov	r0, r6
 8006978:	f7ff ffda 	bl	8006930 <__sfputc_r>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d1f3      	bne.n	8006968 <__sfputs_r+0xa>
 8006980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006984 <_vfiprintf_r>:
 8006984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	460c      	mov	r4, r1
 800698a:	b09d      	sub	sp, #116	; 0x74
 800698c:	4617      	mov	r7, r2
 800698e:	461d      	mov	r5, r3
 8006990:	4606      	mov	r6, r0
 8006992:	b118      	cbz	r0, 800699c <_vfiprintf_r+0x18>
 8006994:	6983      	ldr	r3, [r0, #24]
 8006996:	b90b      	cbnz	r3, 800699c <_vfiprintf_r+0x18>
 8006998:	f7ff fee6 	bl	8006768 <__sinit>
 800699c:	4b7c      	ldr	r3, [pc, #496]	; (8006b90 <_vfiprintf_r+0x20c>)
 800699e:	429c      	cmp	r4, r3
 80069a0:	d158      	bne.n	8006a54 <_vfiprintf_r+0xd0>
 80069a2:	6874      	ldr	r4, [r6, #4]
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	0718      	lsls	r0, r3, #28
 80069a8:	d55e      	bpl.n	8006a68 <_vfiprintf_r+0xe4>
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d05b      	beq.n	8006a68 <_vfiprintf_r+0xe4>
 80069b0:	2300      	movs	r3, #0
 80069b2:	9309      	str	r3, [sp, #36]	; 0x24
 80069b4:	2320      	movs	r3, #32
 80069b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069ba:	2330      	movs	r3, #48	; 0x30
 80069bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069c0:	9503      	str	r5, [sp, #12]
 80069c2:	f04f 0b01 	mov.w	fp, #1
 80069c6:	46b8      	mov	r8, r7
 80069c8:	4645      	mov	r5, r8
 80069ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069ce:	b10b      	cbz	r3, 80069d4 <_vfiprintf_r+0x50>
 80069d0:	2b25      	cmp	r3, #37	; 0x25
 80069d2:	d154      	bne.n	8006a7e <_vfiprintf_r+0xfa>
 80069d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80069d8:	d00b      	beq.n	80069f2 <_vfiprintf_r+0x6e>
 80069da:	4653      	mov	r3, sl
 80069dc:	463a      	mov	r2, r7
 80069de:	4621      	mov	r1, r4
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff ffbc 	bl	800695e <__sfputs_r>
 80069e6:	3001      	adds	r0, #1
 80069e8:	f000 80c2 	beq.w	8006b70 <_vfiprintf_r+0x1ec>
 80069ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ee:	4453      	add	r3, sl
 80069f0:	9309      	str	r3, [sp, #36]	; 0x24
 80069f2:	f898 3000 	ldrb.w	r3, [r8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80ba 	beq.w	8006b70 <_vfiprintf_r+0x1ec>
 80069fc:	2300      	movs	r3, #0
 80069fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a06:	9304      	str	r3, [sp, #16]
 8006a08:	9307      	str	r3, [sp, #28]
 8006a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8006a10:	46a8      	mov	r8, r5
 8006a12:	2205      	movs	r2, #5
 8006a14:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006a18:	485e      	ldr	r0, [pc, #376]	; (8006b94 <_vfiprintf_r+0x210>)
 8006a1a:	f7f9 fbf9 	bl	8000210 <memchr>
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	bb78      	cbnz	r0, 8006a82 <_vfiprintf_r+0xfe>
 8006a22:	06d9      	lsls	r1, r3, #27
 8006a24:	bf44      	itt	mi
 8006a26:	2220      	movmi	r2, #32
 8006a28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a2c:	071a      	lsls	r2, r3, #28
 8006a2e:	bf44      	itt	mi
 8006a30:	222b      	movmi	r2, #43	; 0x2b
 8006a32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a36:	782a      	ldrb	r2, [r5, #0]
 8006a38:	2a2a      	cmp	r2, #42	; 0x2a
 8006a3a:	d02a      	beq.n	8006a92 <_vfiprintf_r+0x10e>
 8006a3c:	9a07      	ldr	r2, [sp, #28]
 8006a3e:	46a8      	mov	r8, r5
 8006a40:	2000      	movs	r0, #0
 8006a42:	250a      	movs	r5, #10
 8006a44:	4641      	mov	r1, r8
 8006a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a4a:	3b30      	subs	r3, #48	; 0x30
 8006a4c:	2b09      	cmp	r3, #9
 8006a4e:	d969      	bls.n	8006b24 <_vfiprintf_r+0x1a0>
 8006a50:	b360      	cbz	r0, 8006aac <_vfiprintf_r+0x128>
 8006a52:	e024      	b.n	8006a9e <_vfiprintf_r+0x11a>
 8006a54:	4b50      	ldr	r3, [pc, #320]	; (8006b98 <_vfiprintf_r+0x214>)
 8006a56:	429c      	cmp	r4, r3
 8006a58:	d101      	bne.n	8006a5e <_vfiprintf_r+0xda>
 8006a5a:	68b4      	ldr	r4, [r6, #8]
 8006a5c:	e7a2      	b.n	80069a4 <_vfiprintf_r+0x20>
 8006a5e:	4b4f      	ldr	r3, [pc, #316]	; (8006b9c <_vfiprintf_r+0x218>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	bf08      	it	eq
 8006a64:	68f4      	ldreq	r4, [r6, #12]
 8006a66:	e79d      	b.n	80069a4 <_vfiprintf_r+0x20>
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f000 fae0 	bl	8007030 <__swsetup_r>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d09d      	beq.n	80069b0 <_vfiprintf_r+0x2c>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	b01d      	add	sp, #116	; 0x74
 8006a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7e:	46a8      	mov	r8, r5
 8006a80:	e7a2      	b.n	80069c8 <_vfiprintf_r+0x44>
 8006a82:	4a44      	ldr	r2, [pc, #272]	; (8006b94 <_vfiprintf_r+0x210>)
 8006a84:	1a80      	subs	r0, r0, r2
 8006a86:	fa0b f000 	lsl.w	r0, fp, r0
 8006a8a:	4318      	orrs	r0, r3
 8006a8c:	9004      	str	r0, [sp, #16]
 8006a8e:	4645      	mov	r5, r8
 8006a90:	e7be      	b.n	8006a10 <_vfiprintf_r+0x8c>
 8006a92:	9a03      	ldr	r2, [sp, #12]
 8006a94:	1d11      	adds	r1, r2, #4
 8006a96:	6812      	ldr	r2, [r2, #0]
 8006a98:	9103      	str	r1, [sp, #12]
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	db01      	blt.n	8006aa2 <_vfiprintf_r+0x11e>
 8006a9e:	9207      	str	r2, [sp, #28]
 8006aa0:	e004      	b.n	8006aac <_vfiprintf_r+0x128>
 8006aa2:	4252      	negs	r2, r2
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	9207      	str	r2, [sp, #28]
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	f898 3000 	ldrb.w	r3, [r8]
 8006ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ab2:	d10e      	bne.n	8006ad2 <_vfiprintf_r+0x14e>
 8006ab4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aba:	d138      	bne.n	8006b2e <_vfiprintf_r+0x1aa>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	1d1a      	adds	r2, r3, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	9203      	str	r2, [sp, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bfb8      	it	lt
 8006ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006acc:	f108 0802 	add.w	r8, r8, #2
 8006ad0:	9305      	str	r3, [sp, #20]
 8006ad2:	4d33      	ldr	r5, [pc, #204]	; (8006ba0 <_vfiprintf_r+0x21c>)
 8006ad4:	f898 1000 	ldrb.w	r1, [r8]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	4628      	mov	r0, r5
 8006adc:	f7f9 fb98 	bl	8000210 <memchr>
 8006ae0:	b140      	cbz	r0, 8006af4 <_vfiprintf_r+0x170>
 8006ae2:	2340      	movs	r3, #64	; 0x40
 8006ae4:	1b40      	subs	r0, r0, r5
 8006ae6:	fa03 f000 	lsl.w	r0, r3, r0
 8006aea:	9b04      	ldr	r3, [sp, #16]
 8006aec:	4303      	orrs	r3, r0
 8006aee:	f108 0801 	add.w	r8, r8, #1
 8006af2:	9304      	str	r3, [sp, #16]
 8006af4:	f898 1000 	ldrb.w	r1, [r8]
 8006af8:	482a      	ldr	r0, [pc, #168]	; (8006ba4 <_vfiprintf_r+0x220>)
 8006afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006afe:	2206      	movs	r2, #6
 8006b00:	f108 0701 	add.w	r7, r8, #1
 8006b04:	f7f9 fb84 	bl	8000210 <memchr>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d037      	beq.n	8006b7c <_vfiprintf_r+0x1f8>
 8006b0c:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <_vfiprintf_r+0x224>)
 8006b0e:	bb1b      	cbnz	r3, 8006b58 <_vfiprintf_r+0x1d4>
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	3307      	adds	r3, #7
 8006b14:	f023 0307 	bic.w	r3, r3, #7
 8006b18:	3308      	adds	r3, #8
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1e:	444b      	add	r3, r9
 8006b20:	9309      	str	r3, [sp, #36]	; 0x24
 8006b22:	e750      	b.n	80069c6 <_vfiprintf_r+0x42>
 8006b24:	fb05 3202 	mla	r2, r5, r2, r3
 8006b28:	2001      	movs	r0, #1
 8006b2a:	4688      	mov	r8, r1
 8006b2c:	e78a      	b.n	8006a44 <_vfiprintf_r+0xc0>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f108 0801 	add.w	r8, r8, #1
 8006b34:	9305      	str	r3, [sp, #20]
 8006b36:	4619      	mov	r1, r3
 8006b38:	250a      	movs	r5, #10
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b40:	3a30      	subs	r2, #48	; 0x30
 8006b42:	2a09      	cmp	r2, #9
 8006b44:	d903      	bls.n	8006b4e <_vfiprintf_r+0x1ca>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0c3      	beq.n	8006ad2 <_vfiprintf_r+0x14e>
 8006b4a:	9105      	str	r1, [sp, #20]
 8006b4c:	e7c1      	b.n	8006ad2 <_vfiprintf_r+0x14e>
 8006b4e:	fb05 2101 	mla	r1, r5, r1, r2
 8006b52:	2301      	movs	r3, #1
 8006b54:	4680      	mov	r8, r0
 8006b56:	e7f0      	b.n	8006b3a <_vfiprintf_r+0x1b6>
 8006b58:	ab03      	add	r3, sp, #12
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <_vfiprintf_r+0x228>)
 8006b60:	a904      	add	r1, sp, #16
 8006b62:	4630      	mov	r0, r6
 8006b64:	f3af 8000 	nop.w
 8006b68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b6c:	4681      	mov	r9, r0
 8006b6e:	d1d5      	bne.n	8006b1c <_vfiprintf_r+0x198>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	065b      	lsls	r3, r3, #25
 8006b74:	f53f af7e 	bmi.w	8006a74 <_vfiprintf_r+0xf0>
 8006b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b7a:	e77d      	b.n	8006a78 <_vfiprintf_r+0xf4>
 8006b7c:	ab03      	add	r3, sp, #12
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	4622      	mov	r2, r4
 8006b82:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <_vfiprintf_r+0x228>)
 8006b84:	a904      	add	r1, sp, #16
 8006b86:	4630      	mov	r0, r6
 8006b88:	f000 f888 	bl	8006c9c <_printf_i>
 8006b8c:	e7ec      	b.n	8006b68 <_vfiprintf_r+0x1e4>
 8006b8e:	bf00      	nop
 8006b90:	08007654 	.word	0x08007654
 8006b94:	08007694 	.word	0x08007694
 8006b98:	08007674 	.word	0x08007674
 8006b9c:	08007634 	.word	0x08007634
 8006ba0:	0800769a 	.word	0x0800769a
 8006ba4:	0800769e 	.word	0x0800769e
 8006ba8:	00000000 	.word	0x00000000
 8006bac:	0800695f 	.word	0x0800695f

08006bb0 <_printf_common>:
 8006bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	4691      	mov	r9, r2
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	688a      	ldr	r2, [r1, #8]
 8006bba:	690b      	ldr	r3, [r1, #16]
 8006bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	bfb8      	it	lt
 8006bc4:	4613      	movlt	r3, r2
 8006bc6:	f8c9 3000 	str.w	r3, [r9]
 8006bca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	b112      	cbz	r2, 8006bda <_printf_common+0x2a>
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	f8c9 3000 	str.w	r3, [r9]
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	0699      	lsls	r1, r3, #26
 8006bde:	bf42      	ittt	mi
 8006be0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006be4:	3302      	addmi	r3, #2
 8006be6:	f8c9 3000 	strmi.w	r3, [r9]
 8006bea:	6825      	ldr	r5, [r4, #0]
 8006bec:	f015 0506 	ands.w	r5, r5, #6
 8006bf0:	d107      	bne.n	8006c02 <_printf_common+0x52>
 8006bf2:	f104 0a19 	add.w	sl, r4, #25
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	f8d9 2000 	ldr.w	r2, [r9]
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	42ab      	cmp	r3, r5
 8006c00:	dc28      	bgt.n	8006c54 <_printf_common+0xa4>
 8006c02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	3300      	adds	r3, #0
 8006c0a:	bf18      	it	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	0692      	lsls	r2, r2, #26
 8006c10:	d42d      	bmi.n	8006c6e <_printf_common+0xbe>
 8006c12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c16:	4639      	mov	r1, r7
 8006c18:	4630      	mov	r0, r6
 8006c1a:	47c0      	blx	r8
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d020      	beq.n	8006c62 <_printf_common+0xb2>
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	68e5      	ldr	r5, [r4, #12]
 8006c24:	f8d9 2000 	ldr.w	r2, [r9]
 8006c28:	f003 0306 	and.w	r3, r3, #6
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	bf08      	it	eq
 8006c30:	1aad      	subeq	r5, r5, r2
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	6922      	ldr	r2, [r4, #16]
 8006c36:	bf0c      	ite	eq
 8006c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c3c:	2500      	movne	r5, #0
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	bfc4      	itt	gt
 8006c42:	1a9b      	subgt	r3, r3, r2
 8006c44:	18ed      	addgt	r5, r5, r3
 8006c46:	f04f 0900 	mov.w	r9, #0
 8006c4a:	341a      	adds	r4, #26
 8006c4c:	454d      	cmp	r5, r9
 8006c4e:	d11a      	bne.n	8006c86 <_printf_common+0xd6>
 8006c50:	2000      	movs	r0, #0
 8006c52:	e008      	b.n	8006c66 <_printf_common+0xb6>
 8006c54:	2301      	movs	r3, #1
 8006c56:	4652      	mov	r2, sl
 8006c58:	4639      	mov	r1, r7
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	47c0      	blx	r8
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d103      	bne.n	8006c6a <_printf_common+0xba>
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295
 8006c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6a:	3501      	adds	r5, #1
 8006c6c:	e7c3      	b.n	8006bf6 <_printf_common+0x46>
 8006c6e:	18e1      	adds	r1, r4, r3
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	2030      	movs	r0, #48	; 0x30
 8006c74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c78:	4422      	add	r2, r4
 8006c7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c82:	3302      	adds	r3, #2
 8006c84:	e7c5      	b.n	8006c12 <_printf_common+0x62>
 8006c86:	2301      	movs	r3, #1
 8006c88:	4622      	mov	r2, r4
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	47c0      	blx	r8
 8006c90:	3001      	adds	r0, #1
 8006c92:	d0e6      	beq.n	8006c62 <_printf_common+0xb2>
 8006c94:	f109 0901 	add.w	r9, r9, #1
 8006c98:	e7d8      	b.n	8006c4c <_printf_common+0x9c>
	...

08006c9c <_printf_i>:
 8006c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	7e09      	ldrb	r1, [r1, #24]
 8006ca8:	b085      	sub	sp, #20
 8006caa:	296e      	cmp	r1, #110	; 0x6e
 8006cac:	4617      	mov	r7, r2
 8006cae:	4606      	mov	r6, r0
 8006cb0:	4698      	mov	r8, r3
 8006cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cb4:	f000 80b3 	beq.w	8006e1e <_printf_i+0x182>
 8006cb8:	d822      	bhi.n	8006d00 <_printf_i+0x64>
 8006cba:	2963      	cmp	r1, #99	; 0x63
 8006cbc:	d036      	beq.n	8006d2c <_printf_i+0x90>
 8006cbe:	d80a      	bhi.n	8006cd6 <_printf_i+0x3a>
 8006cc0:	2900      	cmp	r1, #0
 8006cc2:	f000 80b9 	beq.w	8006e38 <_printf_i+0x19c>
 8006cc6:	2958      	cmp	r1, #88	; 0x58
 8006cc8:	f000 8083 	beq.w	8006dd2 <_printf_i+0x136>
 8006ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006cd4:	e032      	b.n	8006d3c <_printf_i+0xa0>
 8006cd6:	2964      	cmp	r1, #100	; 0x64
 8006cd8:	d001      	beq.n	8006cde <_printf_i+0x42>
 8006cda:	2969      	cmp	r1, #105	; 0x69
 8006cdc:	d1f6      	bne.n	8006ccc <_printf_i+0x30>
 8006cde:	6820      	ldr	r0, [r4, #0]
 8006ce0:	6813      	ldr	r3, [r2, #0]
 8006ce2:	0605      	lsls	r5, r0, #24
 8006ce4:	f103 0104 	add.w	r1, r3, #4
 8006ce8:	d52a      	bpl.n	8006d40 <_printf_i+0xa4>
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6011      	str	r1, [r2, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	da03      	bge.n	8006cfa <_printf_i+0x5e>
 8006cf2:	222d      	movs	r2, #45	; 0x2d
 8006cf4:	425b      	negs	r3, r3
 8006cf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006cfa:	486f      	ldr	r0, [pc, #444]	; (8006eb8 <_printf_i+0x21c>)
 8006cfc:	220a      	movs	r2, #10
 8006cfe:	e039      	b.n	8006d74 <_printf_i+0xd8>
 8006d00:	2973      	cmp	r1, #115	; 0x73
 8006d02:	f000 809d 	beq.w	8006e40 <_printf_i+0x1a4>
 8006d06:	d808      	bhi.n	8006d1a <_printf_i+0x7e>
 8006d08:	296f      	cmp	r1, #111	; 0x6f
 8006d0a:	d020      	beq.n	8006d4e <_printf_i+0xb2>
 8006d0c:	2970      	cmp	r1, #112	; 0x70
 8006d0e:	d1dd      	bne.n	8006ccc <_printf_i+0x30>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	f043 0320 	orr.w	r3, r3, #32
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	e003      	b.n	8006d22 <_printf_i+0x86>
 8006d1a:	2975      	cmp	r1, #117	; 0x75
 8006d1c:	d017      	beq.n	8006d4e <_printf_i+0xb2>
 8006d1e:	2978      	cmp	r1, #120	; 0x78
 8006d20:	d1d4      	bne.n	8006ccc <_printf_i+0x30>
 8006d22:	2378      	movs	r3, #120	; 0x78
 8006d24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d28:	4864      	ldr	r0, [pc, #400]	; (8006ebc <_printf_i+0x220>)
 8006d2a:	e055      	b.n	8006dd8 <_printf_i+0x13c>
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	1d19      	adds	r1, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6011      	str	r1, [r2, #0]
 8006d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e08c      	b.n	8006e5a <_printf_i+0x1be>
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6011      	str	r1, [r2, #0]
 8006d44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d48:	bf18      	it	ne
 8006d4a:	b21b      	sxthne	r3, r3
 8006d4c:	e7cf      	b.n	8006cee <_printf_i+0x52>
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	6825      	ldr	r5, [r4, #0]
 8006d52:	1d18      	adds	r0, r3, #4
 8006d54:	6010      	str	r0, [r2, #0]
 8006d56:	0628      	lsls	r0, r5, #24
 8006d58:	d501      	bpl.n	8006d5e <_printf_i+0xc2>
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	e002      	b.n	8006d64 <_printf_i+0xc8>
 8006d5e:	0668      	lsls	r0, r5, #25
 8006d60:	d5fb      	bpl.n	8006d5a <_printf_i+0xbe>
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	4854      	ldr	r0, [pc, #336]	; (8006eb8 <_printf_i+0x21c>)
 8006d66:	296f      	cmp	r1, #111	; 0x6f
 8006d68:	bf14      	ite	ne
 8006d6a:	220a      	movne	r2, #10
 8006d6c:	2208      	moveq	r2, #8
 8006d6e:	2100      	movs	r1, #0
 8006d70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d74:	6865      	ldr	r5, [r4, #4]
 8006d76:	60a5      	str	r5, [r4, #8]
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	f2c0 8095 	blt.w	8006ea8 <_printf_i+0x20c>
 8006d7e:	6821      	ldr	r1, [r4, #0]
 8006d80:	f021 0104 	bic.w	r1, r1, #4
 8006d84:	6021      	str	r1, [r4, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d13d      	bne.n	8006e06 <_printf_i+0x16a>
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	f040 808e 	bne.w	8006eac <_printf_i+0x210>
 8006d90:	4665      	mov	r5, ip
 8006d92:	2a08      	cmp	r2, #8
 8006d94:	d10b      	bne.n	8006dae <_printf_i+0x112>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	07db      	lsls	r3, r3, #31
 8006d9a:	d508      	bpl.n	8006dae <_printf_i+0x112>
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	6862      	ldr	r2, [r4, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	bfde      	ittt	le
 8006da4:	2330      	movle	r3, #48	; 0x30
 8006da6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006daa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dae:	ebac 0305 	sub.w	r3, ip, r5
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	f8cd 8000 	str.w	r8, [sp]
 8006db8:	463b      	mov	r3, r7
 8006dba:	aa03      	add	r2, sp, #12
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f7ff fef6 	bl	8006bb0 <_printf_common>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d14d      	bne.n	8006e64 <_printf_i+0x1c8>
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	b005      	add	sp, #20
 8006dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	4839      	ldr	r0, [pc, #228]	; (8006eb8 <_printf_i+0x21c>)
 8006dd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006dd8:	6813      	ldr	r3, [r2, #0]
 8006dda:	6821      	ldr	r1, [r4, #0]
 8006ddc:	1d1d      	adds	r5, r3, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6015      	str	r5, [r2, #0]
 8006de2:	060a      	lsls	r2, r1, #24
 8006de4:	d50b      	bpl.n	8006dfe <_printf_i+0x162>
 8006de6:	07ca      	lsls	r2, r1, #31
 8006de8:	bf44      	itt	mi
 8006dea:	f041 0120 	orrmi.w	r1, r1, #32
 8006dee:	6021      	strmi	r1, [r4, #0]
 8006df0:	b91b      	cbnz	r3, 8006dfa <_printf_i+0x15e>
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	f022 0220 	bic.w	r2, r2, #32
 8006df8:	6022      	str	r2, [r4, #0]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	e7b7      	b.n	8006d6e <_printf_i+0xd2>
 8006dfe:	064d      	lsls	r5, r1, #25
 8006e00:	bf48      	it	mi
 8006e02:	b29b      	uxthmi	r3, r3
 8006e04:	e7ef      	b.n	8006de6 <_printf_i+0x14a>
 8006e06:	4665      	mov	r5, ip
 8006e08:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e0c:	fb02 3311 	mls	r3, r2, r1, r3
 8006e10:	5cc3      	ldrb	r3, [r0, r3]
 8006e12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e16:	460b      	mov	r3, r1
 8006e18:	2900      	cmp	r1, #0
 8006e1a:	d1f5      	bne.n	8006e08 <_printf_i+0x16c>
 8006e1c:	e7b9      	b.n	8006d92 <_printf_i+0xf6>
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	6825      	ldr	r5, [r4, #0]
 8006e22:	6961      	ldr	r1, [r4, #20]
 8006e24:	1d18      	adds	r0, r3, #4
 8006e26:	6010      	str	r0, [r2, #0]
 8006e28:	0628      	lsls	r0, r5, #24
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	d501      	bpl.n	8006e32 <_printf_i+0x196>
 8006e2e:	6019      	str	r1, [r3, #0]
 8006e30:	e002      	b.n	8006e38 <_printf_i+0x19c>
 8006e32:	066a      	lsls	r2, r5, #25
 8006e34:	d5fb      	bpl.n	8006e2e <_printf_i+0x192>
 8006e36:	8019      	strh	r1, [r3, #0]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	4665      	mov	r5, ip
 8006e3e:	e7b9      	b.n	8006db4 <_printf_i+0x118>
 8006e40:	6813      	ldr	r3, [r2, #0]
 8006e42:	1d19      	adds	r1, r3, #4
 8006e44:	6011      	str	r1, [r2, #0]
 8006e46:	681d      	ldr	r5, [r3, #0]
 8006e48:	6862      	ldr	r2, [r4, #4]
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f7f9 f9df 	bl	8000210 <memchr>
 8006e52:	b108      	cbz	r0, 8006e58 <_printf_i+0x1bc>
 8006e54:	1b40      	subs	r0, r0, r5
 8006e56:	6060      	str	r0, [r4, #4]
 8006e58:	6863      	ldr	r3, [r4, #4]
 8006e5a:	6123      	str	r3, [r4, #16]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e62:	e7a7      	b.n	8006db4 <_printf_i+0x118>
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	462a      	mov	r2, r5
 8006e68:	4639      	mov	r1, r7
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	47c0      	blx	r8
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d0aa      	beq.n	8006dc8 <_printf_i+0x12c>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	079b      	lsls	r3, r3, #30
 8006e76:	d413      	bmi.n	8006ea0 <_printf_i+0x204>
 8006e78:	68e0      	ldr	r0, [r4, #12]
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	4298      	cmp	r0, r3
 8006e7e:	bfb8      	it	lt
 8006e80:	4618      	movlt	r0, r3
 8006e82:	e7a3      	b.n	8006dcc <_printf_i+0x130>
 8006e84:	2301      	movs	r3, #1
 8006e86:	464a      	mov	r2, r9
 8006e88:	4639      	mov	r1, r7
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	47c0      	blx	r8
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d09a      	beq.n	8006dc8 <_printf_i+0x12c>
 8006e92:	3501      	adds	r5, #1
 8006e94:	68e3      	ldr	r3, [r4, #12]
 8006e96:	9a03      	ldr	r2, [sp, #12]
 8006e98:	1a9b      	subs	r3, r3, r2
 8006e9a:	42ab      	cmp	r3, r5
 8006e9c:	dcf2      	bgt.n	8006e84 <_printf_i+0x1e8>
 8006e9e:	e7eb      	b.n	8006e78 <_printf_i+0x1dc>
 8006ea0:	2500      	movs	r5, #0
 8006ea2:	f104 0919 	add.w	r9, r4, #25
 8006ea6:	e7f5      	b.n	8006e94 <_printf_i+0x1f8>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1ac      	bne.n	8006e06 <_printf_i+0x16a>
 8006eac:	7803      	ldrb	r3, [r0, #0]
 8006eae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb6:	e76c      	b.n	8006d92 <_printf_i+0xf6>
 8006eb8:	080076a5 	.word	0x080076a5
 8006ebc:	080076b6 	.word	0x080076b6

08006ec0 <_sbrk_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4c06      	ldr	r4, [pc, #24]	; (8006edc <_sbrk_r+0x1c>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	6023      	str	r3, [r4, #0]
 8006ecc:	f7f9 ff04 	bl	8000cd8 <_sbrk>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_sbrk_r+0x1a>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_sbrk_r+0x1a>
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	20004a88 	.word	0x20004a88

08006ee0 <__sread>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee8:	f000 fa96 	bl	8007418 <_read_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	bfab      	itete	ge
 8006ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef4:	181b      	addge	r3, r3, r0
 8006ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006efa:	bfac      	ite	ge
 8006efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006efe:	81a3      	strhlt	r3, [r4, #12]
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <__swrite>:
 8006f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f06:	461f      	mov	r7, r3
 8006f08:	898b      	ldrh	r3, [r1, #12]
 8006f0a:	05db      	lsls	r3, r3, #23
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4616      	mov	r6, r2
 8006f12:	d505      	bpl.n	8006f20 <__swrite+0x1e>
 8006f14:	2302      	movs	r3, #2
 8006f16:	2200      	movs	r2, #0
 8006f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1c:	f000 f9b6 	bl	800728c <_lseek_r>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	463b      	mov	r3, r7
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	f000 b869 	b.w	800700c <_write_r>

08006f3a <__sseek>:
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f42:	f000 f9a3 	bl	800728c <_lseek_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	bf15      	itete	ne
 8006f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f56:	81a3      	strheq	r3, [r4, #12]
 8006f58:	bf18      	it	ne
 8006f5a:	81a3      	strhne	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__sclose>:
 8006f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f62:	f000 b8d3 	b.w	800710c <_close_r>
	...

08006f68 <__swbuf_r>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	460e      	mov	r6, r1
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	4605      	mov	r5, r0
 8006f70:	b118      	cbz	r0, 8006f7a <__swbuf_r+0x12>
 8006f72:	6983      	ldr	r3, [r0, #24]
 8006f74:	b90b      	cbnz	r3, 8006f7a <__swbuf_r+0x12>
 8006f76:	f7ff fbf7 	bl	8006768 <__sinit>
 8006f7a:	4b21      	ldr	r3, [pc, #132]	; (8007000 <__swbuf_r+0x98>)
 8006f7c:	429c      	cmp	r4, r3
 8006f7e:	d12a      	bne.n	8006fd6 <__swbuf_r+0x6e>
 8006f80:	686c      	ldr	r4, [r5, #4]
 8006f82:	69a3      	ldr	r3, [r4, #24]
 8006f84:	60a3      	str	r3, [r4, #8]
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	071a      	lsls	r2, r3, #28
 8006f8a:	d52e      	bpl.n	8006fea <__swbuf_r+0x82>
 8006f8c:	6923      	ldr	r3, [r4, #16]
 8006f8e:	b363      	cbz	r3, 8006fea <__swbuf_r+0x82>
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	1ac0      	subs	r0, r0, r3
 8006f96:	6963      	ldr	r3, [r4, #20]
 8006f98:	b2f6      	uxtb	r6, r6
 8006f9a:	4283      	cmp	r3, r0
 8006f9c:	4637      	mov	r7, r6
 8006f9e:	dc04      	bgt.n	8006faa <__swbuf_r+0x42>
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f000 f948 	bl	8007238 <_fflush_r>
 8006fa8:	bb28      	cbnz	r0, 8006ff6 <__swbuf_r+0x8e>
 8006faa:	68a3      	ldr	r3, [r4, #8]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	60a3      	str	r3, [r4, #8]
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	6022      	str	r2, [r4, #0]
 8006fb6:	701e      	strb	r6, [r3, #0]
 8006fb8:	6963      	ldr	r3, [r4, #20]
 8006fba:	3001      	adds	r0, #1
 8006fbc:	4283      	cmp	r3, r0
 8006fbe:	d004      	beq.n	8006fca <__swbuf_r+0x62>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	07db      	lsls	r3, r3, #31
 8006fc4:	d519      	bpl.n	8006ffa <__swbuf_r+0x92>
 8006fc6:	2e0a      	cmp	r6, #10
 8006fc8:	d117      	bne.n	8006ffa <__swbuf_r+0x92>
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 f933 	bl	8007238 <_fflush_r>
 8006fd2:	b190      	cbz	r0, 8006ffa <__swbuf_r+0x92>
 8006fd4:	e00f      	b.n	8006ff6 <__swbuf_r+0x8e>
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <__swbuf_r+0x9c>)
 8006fd8:	429c      	cmp	r4, r3
 8006fda:	d101      	bne.n	8006fe0 <__swbuf_r+0x78>
 8006fdc:	68ac      	ldr	r4, [r5, #8]
 8006fde:	e7d0      	b.n	8006f82 <__swbuf_r+0x1a>
 8006fe0:	4b09      	ldr	r3, [pc, #36]	; (8007008 <__swbuf_r+0xa0>)
 8006fe2:	429c      	cmp	r4, r3
 8006fe4:	bf08      	it	eq
 8006fe6:	68ec      	ldreq	r4, [r5, #12]
 8006fe8:	e7cb      	b.n	8006f82 <__swbuf_r+0x1a>
 8006fea:	4621      	mov	r1, r4
 8006fec:	4628      	mov	r0, r5
 8006fee:	f000 f81f 	bl	8007030 <__swsetup_r>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d0cc      	beq.n	8006f90 <__swbuf_r+0x28>
 8006ff6:	f04f 37ff 	mov.w	r7, #4294967295
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	08007654 	.word	0x08007654
 8007004:	08007674 	.word	0x08007674
 8007008:	08007634 	.word	0x08007634

0800700c <_write_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4c07      	ldr	r4, [pc, #28]	; (800702c <_write_r+0x20>)
 8007010:	4605      	mov	r5, r0
 8007012:	4608      	mov	r0, r1
 8007014:	4611      	mov	r1, r2
 8007016:	2200      	movs	r2, #0
 8007018:	6022      	str	r2, [r4, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f7f9 fac8 	bl	80005b0 <_write>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_write_r+0x1e>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	b103      	cbz	r3, 800702a <_write_r+0x1e>
 8007028:	602b      	str	r3, [r5, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20004a88 	.word	0x20004a88

08007030 <__swsetup_r>:
 8007030:	4b32      	ldr	r3, [pc, #200]	; (80070fc <__swsetup_r+0xcc>)
 8007032:	b570      	push	{r4, r5, r6, lr}
 8007034:	681d      	ldr	r5, [r3, #0]
 8007036:	4606      	mov	r6, r0
 8007038:	460c      	mov	r4, r1
 800703a:	b125      	cbz	r5, 8007046 <__swsetup_r+0x16>
 800703c:	69ab      	ldr	r3, [r5, #24]
 800703e:	b913      	cbnz	r3, 8007046 <__swsetup_r+0x16>
 8007040:	4628      	mov	r0, r5
 8007042:	f7ff fb91 	bl	8006768 <__sinit>
 8007046:	4b2e      	ldr	r3, [pc, #184]	; (8007100 <__swsetup_r+0xd0>)
 8007048:	429c      	cmp	r4, r3
 800704a:	d10f      	bne.n	800706c <__swsetup_r+0x3c>
 800704c:	686c      	ldr	r4, [r5, #4]
 800704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007052:	b29a      	uxth	r2, r3
 8007054:	0715      	lsls	r5, r2, #28
 8007056:	d42c      	bmi.n	80070b2 <__swsetup_r+0x82>
 8007058:	06d0      	lsls	r0, r2, #27
 800705a:	d411      	bmi.n	8007080 <__swsetup_r+0x50>
 800705c:	2209      	movs	r2, #9
 800705e:	6032      	str	r2, [r6, #0]
 8007060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	e03e      	b.n	80070ea <__swsetup_r+0xba>
 800706c:	4b25      	ldr	r3, [pc, #148]	; (8007104 <__swsetup_r+0xd4>)
 800706e:	429c      	cmp	r4, r3
 8007070:	d101      	bne.n	8007076 <__swsetup_r+0x46>
 8007072:	68ac      	ldr	r4, [r5, #8]
 8007074:	e7eb      	b.n	800704e <__swsetup_r+0x1e>
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <__swsetup_r+0xd8>)
 8007078:	429c      	cmp	r4, r3
 800707a:	bf08      	it	eq
 800707c:	68ec      	ldreq	r4, [r5, #12]
 800707e:	e7e6      	b.n	800704e <__swsetup_r+0x1e>
 8007080:	0751      	lsls	r1, r2, #29
 8007082:	d512      	bpl.n	80070aa <__swsetup_r+0x7a>
 8007084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007086:	b141      	cbz	r1, 800709a <__swsetup_r+0x6a>
 8007088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800708c:	4299      	cmp	r1, r3
 800708e:	d002      	beq.n	8007096 <__swsetup_r+0x66>
 8007090:	4630      	mov	r0, r6
 8007092:	f000 f973 	bl	800737c <_free_r>
 8007096:	2300      	movs	r3, #0
 8007098:	6363      	str	r3, [r4, #52]	; 0x34
 800709a:	89a3      	ldrh	r3, [r4, #12]
 800709c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	2300      	movs	r3, #0
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f043 0308 	orr.w	r3, r3, #8
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	b94b      	cbnz	r3, 80070ca <__swsetup_r+0x9a>
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c0:	d003      	beq.n	80070ca <__swsetup_r+0x9a>
 80070c2:	4621      	mov	r1, r4
 80070c4:	4630      	mov	r0, r6
 80070c6:	f000 f917 	bl	80072f8 <__smakebuf_r>
 80070ca:	89a2      	ldrh	r2, [r4, #12]
 80070cc:	f012 0301 	ands.w	r3, r2, #1
 80070d0:	d00c      	beq.n	80070ec <__swsetup_r+0xbc>
 80070d2:	2300      	movs	r3, #0
 80070d4:	60a3      	str	r3, [r4, #8]
 80070d6:	6963      	ldr	r3, [r4, #20]
 80070d8:	425b      	negs	r3, r3
 80070da:	61a3      	str	r3, [r4, #24]
 80070dc:	6923      	ldr	r3, [r4, #16]
 80070de:	b953      	cbnz	r3, 80070f6 <__swsetup_r+0xc6>
 80070e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80070e8:	d1ba      	bne.n	8007060 <__swsetup_r+0x30>
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	0792      	lsls	r2, r2, #30
 80070ee:	bf58      	it	pl
 80070f0:	6963      	ldrpl	r3, [r4, #20]
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	e7f2      	b.n	80070dc <__swsetup_r+0xac>
 80070f6:	2000      	movs	r0, #0
 80070f8:	e7f7      	b.n	80070ea <__swsetup_r+0xba>
 80070fa:	bf00      	nop
 80070fc:	20000018 	.word	0x20000018
 8007100:	08007654 	.word	0x08007654
 8007104:	08007674 	.word	0x08007674
 8007108:	08007634 	.word	0x08007634

0800710c <_close_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4c06      	ldr	r4, [pc, #24]	; (8007128 <_close_r+0x1c>)
 8007110:	2300      	movs	r3, #0
 8007112:	4605      	mov	r5, r0
 8007114:	4608      	mov	r0, r1
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	f7f9 fda9 	bl	8000c6e <_close>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_close_r+0x1a>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	b103      	cbz	r3, 8007126 <_close_r+0x1a>
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20004a88 	.word	0x20004a88

0800712c <__sflush_r>:
 800712c:	898a      	ldrh	r2, [r1, #12]
 800712e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007132:	4605      	mov	r5, r0
 8007134:	0710      	lsls	r0, r2, #28
 8007136:	460c      	mov	r4, r1
 8007138:	d458      	bmi.n	80071ec <__sflush_r+0xc0>
 800713a:	684b      	ldr	r3, [r1, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	dc05      	bgt.n	800714c <__sflush_r+0x20>
 8007140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc02      	bgt.n	800714c <__sflush_r+0x20>
 8007146:	2000      	movs	r0, #0
 8007148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800714e:	2e00      	cmp	r6, #0
 8007150:	d0f9      	beq.n	8007146 <__sflush_r+0x1a>
 8007152:	2300      	movs	r3, #0
 8007154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007158:	682f      	ldr	r7, [r5, #0]
 800715a:	6a21      	ldr	r1, [r4, #32]
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	d032      	beq.n	80071c6 <__sflush_r+0x9a>
 8007160:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	075a      	lsls	r2, r3, #29
 8007166:	d505      	bpl.n	8007174 <__sflush_r+0x48>
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	1ac0      	subs	r0, r0, r3
 800716c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800716e:	b10b      	cbz	r3, 8007174 <__sflush_r+0x48>
 8007170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007172:	1ac0      	subs	r0, r0, r3
 8007174:	2300      	movs	r3, #0
 8007176:	4602      	mov	r2, r0
 8007178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800717a:	6a21      	ldr	r1, [r4, #32]
 800717c:	4628      	mov	r0, r5
 800717e:	47b0      	blx	r6
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	d106      	bne.n	8007194 <__sflush_r+0x68>
 8007186:	6829      	ldr	r1, [r5, #0]
 8007188:	291d      	cmp	r1, #29
 800718a:	d848      	bhi.n	800721e <__sflush_r+0xf2>
 800718c:	4a29      	ldr	r2, [pc, #164]	; (8007234 <__sflush_r+0x108>)
 800718e:	40ca      	lsrs	r2, r1
 8007190:	07d6      	lsls	r6, r2, #31
 8007192:	d544      	bpl.n	800721e <__sflush_r+0xf2>
 8007194:	2200      	movs	r2, #0
 8007196:	6062      	str	r2, [r4, #4]
 8007198:	04d9      	lsls	r1, r3, #19
 800719a:	6922      	ldr	r2, [r4, #16]
 800719c:	6022      	str	r2, [r4, #0]
 800719e:	d504      	bpl.n	80071aa <__sflush_r+0x7e>
 80071a0:	1c42      	adds	r2, r0, #1
 80071a2:	d101      	bne.n	80071a8 <__sflush_r+0x7c>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b903      	cbnz	r3, 80071aa <__sflush_r+0x7e>
 80071a8:	6560      	str	r0, [r4, #84]	; 0x54
 80071aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ac:	602f      	str	r7, [r5, #0]
 80071ae:	2900      	cmp	r1, #0
 80071b0:	d0c9      	beq.n	8007146 <__sflush_r+0x1a>
 80071b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071b6:	4299      	cmp	r1, r3
 80071b8:	d002      	beq.n	80071c0 <__sflush_r+0x94>
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 f8de 	bl	800737c <_free_r>
 80071c0:	2000      	movs	r0, #0
 80071c2:	6360      	str	r0, [r4, #52]	; 0x34
 80071c4:	e7c0      	b.n	8007148 <__sflush_r+0x1c>
 80071c6:	2301      	movs	r3, #1
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b0      	blx	r6
 80071cc:	1c41      	adds	r1, r0, #1
 80071ce:	d1c8      	bne.n	8007162 <__sflush_r+0x36>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0c5      	beq.n	8007162 <__sflush_r+0x36>
 80071d6:	2b1d      	cmp	r3, #29
 80071d8:	d001      	beq.n	80071de <__sflush_r+0xb2>
 80071da:	2b16      	cmp	r3, #22
 80071dc:	d101      	bne.n	80071e2 <__sflush_r+0xb6>
 80071de:	602f      	str	r7, [r5, #0]
 80071e0:	e7b1      	b.n	8007146 <__sflush_r+0x1a>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	e7ad      	b.n	8007148 <__sflush_r+0x1c>
 80071ec:	690f      	ldr	r7, [r1, #16]
 80071ee:	2f00      	cmp	r7, #0
 80071f0:	d0a9      	beq.n	8007146 <__sflush_r+0x1a>
 80071f2:	0793      	lsls	r3, r2, #30
 80071f4:	680e      	ldr	r6, [r1, #0]
 80071f6:	bf08      	it	eq
 80071f8:	694b      	ldreq	r3, [r1, #20]
 80071fa:	600f      	str	r7, [r1, #0]
 80071fc:	bf18      	it	ne
 80071fe:	2300      	movne	r3, #0
 8007200:	eba6 0807 	sub.w	r8, r6, r7
 8007204:	608b      	str	r3, [r1, #8]
 8007206:	f1b8 0f00 	cmp.w	r8, #0
 800720a:	dd9c      	ble.n	8007146 <__sflush_r+0x1a>
 800720c:	4643      	mov	r3, r8
 800720e:	463a      	mov	r2, r7
 8007210:	6a21      	ldr	r1, [r4, #32]
 8007212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007214:	4628      	mov	r0, r5
 8007216:	47b0      	blx	r6
 8007218:	2800      	cmp	r0, #0
 800721a:	dc06      	bgt.n	800722a <__sflush_r+0xfe>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	e78e      	b.n	8007148 <__sflush_r+0x1c>
 800722a:	4407      	add	r7, r0
 800722c:	eba8 0800 	sub.w	r8, r8, r0
 8007230:	e7e9      	b.n	8007206 <__sflush_r+0xda>
 8007232:	bf00      	nop
 8007234:	20400001 	.word	0x20400001

08007238 <_fflush_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	4605      	mov	r5, r0
 800723e:	460c      	mov	r4, r1
 8007240:	b1db      	cbz	r3, 800727a <_fflush_r+0x42>
 8007242:	b118      	cbz	r0, 800724c <_fflush_r+0x14>
 8007244:	6983      	ldr	r3, [r0, #24]
 8007246:	b90b      	cbnz	r3, 800724c <_fflush_r+0x14>
 8007248:	f7ff fa8e 	bl	8006768 <__sinit>
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <_fflush_r+0x48>)
 800724e:	429c      	cmp	r4, r3
 8007250:	d109      	bne.n	8007266 <_fflush_r+0x2e>
 8007252:	686c      	ldr	r4, [r5, #4]
 8007254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007258:	b17b      	cbz	r3, 800727a <_fflush_r+0x42>
 800725a:	4621      	mov	r1, r4
 800725c:	4628      	mov	r0, r5
 800725e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007262:	f7ff bf63 	b.w	800712c <__sflush_r>
 8007266:	4b07      	ldr	r3, [pc, #28]	; (8007284 <_fflush_r+0x4c>)
 8007268:	429c      	cmp	r4, r3
 800726a:	d101      	bne.n	8007270 <_fflush_r+0x38>
 800726c:	68ac      	ldr	r4, [r5, #8]
 800726e:	e7f1      	b.n	8007254 <_fflush_r+0x1c>
 8007270:	4b05      	ldr	r3, [pc, #20]	; (8007288 <_fflush_r+0x50>)
 8007272:	429c      	cmp	r4, r3
 8007274:	bf08      	it	eq
 8007276:	68ec      	ldreq	r4, [r5, #12]
 8007278:	e7ec      	b.n	8007254 <_fflush_r+0x1c>
 800727a:	2000      	movs	r0, #0
 800727c:	bd38      	pop	{r3, r4, r5, pc}
 800727e:	bf00      	nop
 8007280:	08007654 	.word	0x08007654
 8007284:	08007674 	.word	0x08007674
 8007288:	08007634 	.word	0x08007634

0800728c <_lseek_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4c07      	ldr	r4, [pc, #28]	; (80072ac <_lseek_r+0x20>)
 8007290:	4605      	mov	r5, r0
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	2200      	movs	r2, #0
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f7f9 fd0e 	bl	8000cbc <_lseek>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_lseek_r+0x1e>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_lseek_r+0x1e>
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	20004a88 	.word	0x20004a88

080072b0 <__swhatbuf_r>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	460e      	mov	r6, r1
 80072b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b8:	2900      	cmp	r1, #0
 80072ba:	b096      	sub	sp, #88	; 0x58
 80072bc:	4614      	mov	r4, r2
 80072be:	461d      	mov	r5, r3
 80072c0:	da07      	bge.n	80072d2 <__swhatbuf_r+0x22>
 80072c2:	2300      	movs	r3, #0
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	89b3      	ldrh	r3, [r6, #12]
 80072c8:	061a      	lsls	r2, r3, #24
 80072ca:	d410      	bmi.n	80072ee <__swhatbuf_r+0x3e>
 80072cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d0:	e00e      	b.n	80072f0 <__swhatbuf_r+0x40>
 80072d2:	466a      	mov	r2, sp
 80072d4:	f000 f8b2 	bl	800743c <_fstat_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	dbf2      	blt.n	80072c2 <__swhatbuf_r+0x12>
 80072dc:	9a01      	ldr	r2, [sp, #4]
 80072de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072e6:	425a      	negs	r2, r3
 80072e8:	415a      	adcs	r2, r3
 80072ea:	602a      	str	r2, [r5, #0]
 80072ec:	e7ee      	b.n	80072cc <__swhatbuf_r+0x1c>
 80072ee:	2340      	movs	r3, #64	; 0x40
 80072f0:	2000      	movs	r0, #0
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	b016      	add	sp, #88	; 0x58
 80072f6:	bd70      	pop	{r4, r5, r6, pc}

080072f8 <__smakebuf_r>:
 80072f8:	898b      	ldrh	r3, [r1, #12]
 80072fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072fc:	079d      	lsls	r5, r3, #30
 80072fe:	4606      	mov	r6, r0
 8007300:	460c      	mov	r4, r1
 8007302:	d507      	bpl.n	8007314 <__smakebuf_r+0x1c>
 8007304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	2301      	movs	r3, #1
 800730e:	6163      	str	r3, [r4, #20]
 8007310:	b002      	add	sp, #8
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	ab01      	add	r3, sp, #4
 8007316:	466a      	mov	r2, sp
 8007318:	f7ff ffca 	bl	80072b0 <__swhatbuf_r>
 800731c:	9900      	ldr	r1, [sp, #0]
 800731e:	4605      	mov	r5, r0
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff faab 	bl	800687c <_malloc_r>
 8007326:	b948      	cbnz	r0, 800733c <__smakebuf_r+0x44>
 8007328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732c:	059a      	lsls	r2, r3, #22
 800732e:	d4ef      	bmi.n	8007310 <__smakebuf_r+0x18>
 8007330:	f023 0303 	bic.w	r3, r3, #3
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	e7e3      	b.n	8007304 <__smakebuf_r+0xc>
 800733c:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <__smakebuf_r+0x7c>)
 800733e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	6020      	str	r0, [r4, #0]
 8007344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	6163      	str	r3, [r4, #20]
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	6120      	str	r0, [r4, #16]
 8007352:	b15b      	cbz	r3, 800736c <__smakebuf_r+0x74>
 8007354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007358:	4630      	mov	r0, r6
 800735a:	f000 f881 	bl	8007460 <_isatty_r>
 800735e:	b128      	cbz	r0, 800736c <__smakebuf_r+0x74>
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	431d      	orrs	r5, r3
 8007370:	81a5      	strh	r5, [r4, #12]
 8007372:	e7cd      	b.n	8007310 <__smakebuf_r+0x18>
 8007374:	08006731 	.word	0x08006731

08007378 <__malloc_lock>:
 8007378:	4770      	bx	lr

0800737a <__malloc_unlock>:
 800737a:	4770      	bx	lr

0800737c <_free_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4605      	mov	r5, r0
 8007380:	2900      	cmp	r1, #0
 8007382:	d045      	beq.n	8007410 <_free_r+0x94>
 8007384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007388:	1f0c      	subs	r4, r1, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	bfb8      	it	lt
 800738e:	18e4      	addlt	r4, r4, r3
 8007390:	f7ff fff2 	bl	8007378 <__malloc_lock>
 8007394:	4a1f      	ldr	r2, [pc, #124]	; (8007414 <_free_r+0x98>)
 8007396:	6813      	ldr	r3, [r2, #0]
 8007398:	4610      	mov	r0, r2
 800739a:	b933      	cbnz	r3, 80073aa <_free_r+0x2e>
 800739c:	6063      	str	r3, [r4, #4]
 800739e:	6014      	str	r4, [r2, #0]
 80073a0:	4628      	mov	r0, r5
 80073a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073a6:	f7ff bfe8 	b.w	800737a <__malloc_unlock>
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	d90c      	bls.n	80073c8 <_free_r+0x4c>
 80073ae:	6821      	ldr	r1, [r4, #0]
 80073b0:	1862      	adds	r2, r4, r1
 80073b2:	4293      	cmp	r3, r2
 80073b4:	bf04      	itt	eq
 80073b6:	681a      	ldreq	r2, [r3, #0]
 80073b8:	685b      	ldreq	r3, [r3, #4]
 80073ba:	6063      	str	r3, [r4, #4]
 80073bc:	bf04      	itt	eq
 80073be:	1852      	addeq	r2, r2, r1
 80073c0:	6022      	streq	r2, [r4, #0]
 80073c2:	6004      	str	r4, [r0, #0]
 80073c4:	e7ec      	b.n	80073a0 <_free_r+0x24>
 80073c6:	4613      	mov	r3, r2
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	b10a      	cbz	r2, 80073d0 <_free_r+0x54>
 80073cc:	42a2      	cmp	r2, r4
 80073ce:	d9fa      	bls.n	80073c6 <_free_r+0x4a>
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	1858      	adds	r0, r3, r1
 80073d4:	42a0      	cmp	r0, r4
 80073d6:	d10b      	bne.n	80073f0 <_free_r+0x74>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	4401      	add	r1, r0
 80073dc:	1858      	adds	r0, r3, r1
 80073de:	4282      	cmp	r2, r0
 80073e0:	6019      	str	r1, [r3, #0]
 80073e2:	d1dd      	bne.n	80073a0 <_free_r+0x24>
 80073e4:	6810      	ldr	r0, [r2, #0]
 80073e6:	6852      	ldr	r2, [r2, #4]
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	4401      	add	r1, r0
 80073ec:	6019      	str	r1, [r3, #0]
 80073ee:	e7d7      	b.n	80073a0 <_free_r+0x24>
 80073f0:	d902      	bls.n	80073f8 <_free_r+0x7c>
 80073f2:	230c      	movs	r3, #12
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	e7d3      	b.n	80073a0 <_free_r+0x24>
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	1821      	adds	r1, r4, r0
 80073fc:	428a      	cmp	r2, r1
 80073fe:	bf04      	itt	eq
 8007400:	6811      	ldreq	r1, [r2, #0]
 8007402:	6852      	ldreq	r2, [r2, #4]
 8007404:	6062      	str	r2, [r4, #4]
 8007406:	bf04      	itt	eq
 8007408:	1809      	addeq	r1, r1, r0
 800740a:	6021      	streq	r1, [r4, #0]
 800740c:	605c      	str	r4, [r3, #4]
 800740e:	e7c7      	b.n	80073a0 <_free_r+0x24>
 8007410:	bd38      	pop	{r3, r4, r5, pc}
 8007412:	bf00      	nop
 8007414:	200049a4 	.word	0x200049a4

08007418 <_read_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4c07      	ldr	r4, [pc, #28]	; (8007438 <_read_r+0x20>)
 800741c:	4605      	mov	r5, r0
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	2200      	movs	r2, #0
 8007424:	6022      	str	r2, [r4, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7f9 fc04 	bl	8000c34 <_read>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_read_r+0x1e>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	b103      	cbz	r3, 8007436 <_read_r+0x1e>
 8007434:	602b      	str	r3, [r5, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20004a88 	.word	0x20004a88

0800743c <_fstat_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4c07      	ldr	r4, [pc, #28]	; (800745c <_fstat_r+0x20>)
 8007440:	2300      	movs	r3, #0
 8007442:	4605      	mov	r5, r0
 8007444:	4608      	mov	r0, r1
 8007446:	4611      	mov	r1, r2
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	f7f9 fc1c 	bl	8000c86 <_fstat>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	d102      	bne.n	8007458 <_fstat_r+0x1c>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	b103      	cbz	r3, 8007458 <_fstat_r+0x1c>
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	bd38      	pop	{r3, r4, r5, pc}
 800745a:	bf00      	nop
 800745c:	20004a88 	.word	0x20004a88

08007460 <_isatty_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4c06      	ldr	r4, [pc, #24]	; (800747c <_isatty_r+0x1c>)
 8007464:	2300      	movs	r3, #0
 8007466:	4605      	mov	r5, r0
 8007468:	4608      	mov	r0, r1
 800746a:	6023      	str	r3, [r4, #0]
 800746c:	f7f9 fc1b 	bl	8000ca6 <_isatty>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_isatty_r+0x1a>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	b103      	cbz	r3, 800747a <_isatty_r+0x1a>
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20004a88 	.word	0x20004a88

08007480 <_init>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	bf00      	nop
 8007484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007486:	bc08      	pop	{r3}
 8007488:	469e      	mov	lr, r3
 800748a:	4770      	bx	lr

0800748c <_fini>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	bf00      	nop
 8007490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007492:	bc08      	pop	{r3}
 8007494:	469e      	mov	lr, r3
 8007496:	4770      	bx	lr
