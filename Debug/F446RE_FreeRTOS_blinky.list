
F446RE_FreeRTOS_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005074  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005300  08005300  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005308  08005308  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f4  20000018  08005328  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a0c  08005328  00024a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017431  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cd2  00000000  00000000  00037479  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  0003a150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  0003b448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002d31  00000000  00000000  0003c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec92  00000000  00000000  0003f329  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8581  00000000  00000000  0004dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012653c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f98  00000000  00000000  001265b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800522c 	.word	0x0800522c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	0800522c 	.word	0x0800522c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fac0 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f834 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f8ca 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f89e 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000524:	f002 f910 	bl	8002748 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <main+0x50>)
 800052a:	2100      	movs	r1, #0
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <main+0x54>)
 800052e:	f002 f975 	bl	800281c <osThreadNew>
 8000532:	4602      	mov	r2, r0
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <main+0x58>)
 8000536:	601a      	str	r2, [r3, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <main+0x5c>)
 800053a:	2100      	movs	r1, #0
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <main+0x60>)
 800053e:	f002 f96d 	bl	800281c <osThreadNew>
 8000542:	4602      	mov	r2, r0
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <main+0x64>)
 8000546:	601a      	str	r2, [r3, #0]

  /* creation of readButton03 */
  readButton03Handle = osThreadNew(StartReadButton03, NULL, &readButton03_attributes);
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <main+0x68>)
 800054a:	2100      	movs	r1, #0
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <main+0x6c>)
 800054e:	f002 f965 	bl	800281c <osThreadNew>
 8000552:	4602      	mov	r2, r0
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <main+0x70>)
 8000556:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f002 f92a 	bl	80027b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x4c>
 800055e:	bf00      	nop
 8000560:	0800527c 	.word	0x0800527c
 8000564:	08000795 	.word	0x08000795
 8000568:	20004980 	.word	0x20004980
 800056c:	080052a0 	.word	0x080052a0
 8000570:	080007c5 	.word	0x080007c5
 8000574:	20004984 	.word	0x20004984
 8000578:	080052c4 	.word	0x080052c4
 800057c:	080007d9 	.word	0x080007d9
 8000580:	2000493c 	.word	0x2000493c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2234      	movs	r2, #52	; 0x34
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fe41 	bl	800521a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <SystemClock_Config+0xd4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <SystemClock_Config+0xd4>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <SystemClock_Config+0xd4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c4:	2300      	movs	r3, #0
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <SystemClock_Config+0xd8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	4a22      	ldr	r2, [pc, #136]	; (800065c <SystemClock_Config+0xd8>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <SystemClock_Config+0xd8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f8:	2310      	movs	r3, #16
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000600:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000602:	2304      	movs	r3, #4
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f82e 	bl	8001674 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800061e:	f000 f909 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fd2c 	bl	800109c <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800064a:	f000 f8f3 	bl	8000834 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_USART2_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000698:	f001 fc84 	bl	8001fa4 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f8c7 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20004940 	.word	0x20004940
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a25      	ldr	r2, [pc, #148]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <MX_GPIO_Init+0xd0>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	4812      	ldr	r0, [pc, #72]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000740:	f000 fc78 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_GPIO_Init+0xd8>)
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_GPIO_Init+0xdc>)
 800075a:	f000 fac1 	bl	8000ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075e:	2320      	movs	r3, #32
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000776:	f000 fab3 	bl	8000ce0 <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020000 	.word	0x40020000
 800078c:	10210000 	.word	0x10210000
 8000790:	40020800 	.word	0x40020800

08000794 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800079c:	2120      	movs	r1, #32
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <StartBlink01+0x24>)
 80007a0:	f000 fc61 	bl	8001066 <HAL_GPIO_TogglePin>
    osDelay(Led_Delay * Delay_Multiplier);
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <StartBlink01+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <StartBlink01+0x2c>)
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	fb02 f303 	mul.w	r3, r2, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 f8d9 	bl	8002968 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80007b6:	e7f1      	b.n	800079c <StartBlink01+0x8>
 80007b8:	40020000 	.word	0x40020000
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004

080007c4 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
	  osDelay(700);
 80007cc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80007d0:	f002 f8ca 	bl	8002968 <osDelay>
 80007d4:	e7fa      	b.n	80007cc <StartBlink02+0x8>
	...

080007d8 <StartReadButton03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadButton03 */
void StartReadButton03(void *argument)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadButton03 */
  /* Infinite loop */
  for(;;)
  {
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <StartReadButton03+0x30>)
 80007e6:	f000 fc0d 	bl	8001004 <HAL_GPIO_ReadPin>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d003      	beq.n	80007f8 <StartReadButton03+0x20>
      Delay_Multiplier = 3; // Button released
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <StartReadButton03+0x34>)
 80007f2:	2203      	movs	r2, #3
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	e002      	b.n	80007fe <StartReadButton03+0x26>
    else
      Delay_Multiplier = 1; // Button pushed
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <StartReadButton03+0x34>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
    osDelay(10);
 80007fe:	200a      	movs	r0, #10
 8000800:	f002 f8b2 	bl	8002968 <osDelay>
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000804:	e7ec      	b.n	80007e0 <StartReadButton03+0x8>
 8000806:	bf00      	nop
 8000808:	40020800 	.word	0x40020800
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d101      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000822:	f000 f95b 	bl	8000adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40001000 	.word	0x40001000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083a:	e7fe      	b.n	800083a <Error_Handler+0x6>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_MspInit+0x54>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a11      	ldr	r2, [pc, #68]	; (8000890 <HAL_MspInit+0x54>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x54>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_MspInit+0x54>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_MspInit+0x54>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_MspInit+0x54>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	210f      	movs	r1, #15
 800087e:	f06f 0001 	mvn.w	r0, #1
 8000882:	f000 fa03 	bl	8000c8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12b      	bne.n	800090e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_UART_MspInit+0x88>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_UART_MspInit+0x88>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_UART_MspInit+0x88>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_UART_MspInit+0x88>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_UART_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fe:	2307      	movs	r3, #7
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_UART_MspInit+0x8c>)
 800090a:	f000 f9e9 	bl	8000ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004400 	.word	0x40004400
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000

08000924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2036      	movs	r0, #54	; 0x36
 800093a:	f000 f9a7 	bl	8000c8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800093e:	2036      	movs	r0, #54	; 0x36
 8000940:	f000 f9c0 	bl	8000cc4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <HAL_InitTick+0xa4>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <HAL_InitTick+0xa4>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <HAL_InitTick+0xa4>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000960:	f107 0210 	add.w	r2, r7, #16
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fcb0 	bl	80012d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000970:	f000 fc86 	bl	8001280 <HAL_RCC_GetPCLK1Freq>
 8000974:	4603      	mov	r3, r0
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <HAL_InitTick+0xa8>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	0c9b      	lsrs	r3, r3, #18
 8000984:	3b01      	subs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_InitTick+0xac>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <HAL_InitTick+0xb0>)
 800098c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_InitTick+0xac>)
 8000990:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000994:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_InitTick+0xac>)
 8000998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_InitTick+0xac>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_InitTick+0xac>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <HAL_InitTick+0xac>)
 80009aa:	f001 f8bd 	bl	8001b28 <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d104      	bne.n	80009be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <HAL_InitTick+0xac>)
 80009b6:	f001 f8ec 	bl	8001b92 <HAL_TIM_Base_Start_IT>
 80009ba:	4603      	mov	r3, r0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3730      	adds	r7, #48	; 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	431bde83 	.word	0x431bde83
 80009d0:	20004988 	.word	0x20004988
 80009d4:	40001000 	.word	0x40001000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM6_DAC_IRQHandler+0x10>)
 8000a0a:	f001 f8e6 	bl	8001bda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20004988 	.word	0x20004988

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SystemInit+0x28>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <SystemInit+0x28>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SystemInit+0x28>)
 8000a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a32:	609a      	str	r2, [r3, #8]
#endif
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a4a:	e003      	b.n	8000a54 <LoopCopyDataInit>

08000a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a52:	3104      	adds	r1, #4

08000a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a5c:	d3f6      	bcc.n	8000a4c <CopyDataInit>
  ldr  r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a60:	e002      	b.n	8000a68 <LoopFillZerobss>

08000a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a64:	f842 3b04 	str.w	r3, [r2], #4

08000a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a6c:	d3f9      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffd3 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f004 fba3 	bl	80051bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd4b 	bl	8000510 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a80:	08005310 	.word	0x08005310
  ldr  r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a88:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000a8c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000a90:	20004a0c 	.word	0x20004a0c

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f8d8 	bl	8000c76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff ff2c 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff feb6 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000010 	.word	0x20000010
 8000b00:	200049c8 	.word	0x200049c8

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200049c8 	.word	0x200049c8

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff4c 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9e:	f7ff ff61 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ca2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f7ff ffb1 	bl	8000c10 <NVIC_EncodePriority>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff80 	bl	8000bbc <__NVIC_SetPriority>
}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff54 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	e165      	b.n	8000fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f040 8154 	bne.w	8000fc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d00b      	beq.n	8000d3a <HAL_GPIO_Init+0x5a>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d007      	beq.n	8000d3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2e:	2b11      	cmp	r3, #17
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d130      	bne.n	8000d9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 0201 	and.w	r2, r3, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0xfc>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b12      	cmp	r3, #18
 8000dda:	d123      	bne.n	8000e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	220f      	movs	r2, #15
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	691a      	ldr	r2, [r3, #16]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	69b9      	ldr	r1, [r7, #24]
 8000e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0203 	and.w	r2, r3, #3
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80ae 	beq.w	8000fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <HAL_GPIO_Init+0x2fc>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <HAL_GPIO_Init+0x2fc>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b59      	ldr	r3, [pc, #356]	; (8000fdc <HAL_GPIO_Init+0x2fc>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e82:	4a57      	ldr	r2, [pc, #348]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d025      	beq.n	8000efa <HAL_GPIO_Init+0x21a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4d      	ldr	r2, [pc, #308]	; (8000fe8 <HAL_GPIO_Init+0x308>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d01f      	beq.n	8000ef6 <HAL_GPIO_Init+0x216>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_GPIO_Init+0x30c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x212>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <HAL_GPIO_Init+0x310>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x20e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4a      	ldr	r2, [pc, #296]	; (8000ff4 <HAL_GPIO_Init+0x314>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x20a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a49      	ldr	r2, [pc, #292]	; (8000ff8 <HAL_GPIO_Init+0x318>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x206>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_GPIO_Init+0x31c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x202>
 8000ede:	2306      	movs	r3, #6
 8000ee0:	e00c      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	e00a      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	e008      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000eea:	2304      	movs	r3, #4
 8000eec:	e006      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e004      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	e002      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <HAL_GPIO_Init+0x21c>
 8000efa:	2300      	movs	r3, #0
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	f002 0203 	and.w	r2, r2, #3
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	4093      	lsls	r3, r2
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f0c:	4934      	ldr	r1, [pc, #208]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f3e:	4a30      	ldr	r2, [pc, #192]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f44:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f68:	4a25      	ldr	r2, [pc, #148]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_GPIO_Init+0x320>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	f67f ae96 	bls.w	8000cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3724      	adds	r7, #36	; 0x24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40013800 	.word	0x40013800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40021400 	.word	0x40021400
 8000ffc:	40021800 	.word	0x40021800
 8001000:	40013c00 	.word	0x40013c00

08001004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e001      	b.n	8001026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001050:	e003      	b.n	800105a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001052:	887b      	ldrh	r3, [r7, #2]
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	619a      	str	r2, [r3, #24]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	401a      	ands	r2, r3
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	429a      	cmp	r2, r3
 800107e:	d104      	bne.n	800108a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	041a      	lsls	r2, r3, #16
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001088:	e002      	b.n	8001090 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	619a      	str	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e0cc      	b.n	800124a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010b0:	4b68      	ldr	r3, [pc, #416]	; (8001254 <HAL_RCC_ClockConfig+0x1b8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d90c      	bls.n	80010d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010be:	4b65      	ldr	r3, [pc, #404]	; (8001254 <HAL_RCC_ClockConfig+0x1b8>)
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c6:	4b63      	ldr	r3, [pc, #396]	; (8001254 <HAL_RCC_ClockConfig+0x1b8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0b8      	b.n	800124a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f0:	4b59      	ldr	r3, [pc, #356]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4a58      	ldr	r2, [pc, #352]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4a52      	ldr	r2, [pc, #328]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 800110e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001114:	4b50      	ldr	r3, [pc, #320]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	494d      	ldr	r1, [pc, #308]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	4313      	orrs	r3, r2
 8001124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d044      	beq.n	80011bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d107      	bne.n	800114a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d119      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e07f      	b.n	800124a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d003      	beq.n	800115a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001156:	2b03      	cmp	r3, #3
 8001158:	d107      	bne.n	800116a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e06f      	b.n	800124a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e067      	b.n	800124a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f023 0203 	bic.w	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4934      	ldr	r1, [pc, #208]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	4313      	orrs	r3, r2
 800118a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800118c:	f7ff fcba 	bl	8000b04 <HAL_GetTick>
 8001190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001192:	e00a      	b.n	80011aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001194:	f7ff fcb6 	bl	8000b04 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e04f      	b.n	800124a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011aa:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 020c 	and.w	r2, r3, #12
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d1eb      	bne.n	8001194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <HAL_RCC_ClockConfig+0x1b8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d20c      	bcs.n	80011e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_RCC_ClockConfig+0x1b8>)
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d001      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e032      	b.n	800124a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4916      	ldr	r1, [pc, #88]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	490e      	ldr	r1, [pc, #56]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	4313      	orrs	r3, r2
 8001220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001222:	f000 f887 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 8001226:	4601      	mov	r1, r0
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_RCC_ClockConfig+0x1c0>)
 8001234:	5cd3      	ldrb	r3, [r2, r3]
 8001236:	fa21 f303 	lsr.w	r3, r1, r3
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_RCC_ClockConfig+0x1c8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fb6e 	bl	8000924 <HAL_InitTick>

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023c00 	.word	0x40023c00
 8001258:	40023800 	.word	0x40023800
 800125c:	080052e8 	.word	0x080052e8
 8001260:	20000008 	.word	0x20000008
 8001264:	2000000c 	.word	0x2000000c

08001268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_RCC_GetHCLKFreq+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001284:	f7ff fff0 	bl	8001268 <HAL_RCC_GetHCLKFreq>
 8001288:	4601      	mov	r1, r0
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	0a9b      	lsrs	r3, r3, #10
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	fa21 f303 	lsr.w	r3, r1, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	080052f8 	.word	0x080052f8

080012a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012ac:	f7ff ffdc 	bl	8001268 <HAL_RCC_GetHCLKFreq>
 80012b0:	4601      	mov	r1, r0
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	0b5b      	lsrs	r3, r3, #13
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	4a03      	ldr	r2, [pc, #12]	; (80012cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	080052f8 	.word	0x080052f8

080012d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	220f      	movs	r2, #15
 80012de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_RCC_GetClockConfig+0x5c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_RCC_GetClockConfig+0x5c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_RCC_GetClockConfig+0x5c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_RCC_GetClockConfig+0x5c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_RCC_GetClockConfig+0x60>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 020f 	and.w	r2, r3, #15
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	601a      	str	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800134e:	4bc6      	ldr	r3, [pc, #792]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b0c      	cmp	r3, #12
 8001358:	f200 817e 	bhi.w	8001658 <HAL_RCC_GetSysClockFreq+0x324>
 800135c:	a201      	add	r2, pc, #4	; (adr r2, 8001364 <HAL_RCC_GetSysClockFreq+0x30>)
 800135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001362:	bf00      	nop
 8001364:	08001399 	.word	0x08001399
 8001368:	08001659 	.word	0x08001659
 800136c:	08001659 	.word	0x08001659
 8001370:	08001659 	.word	0x08001659
 8001374:	0800139f 	.word	0x0800139f
 8001378:	08001659 	.word	0x08001659
 800137c:	08001659 	.word	0x08001659
 8001380:	08001659 	.word	0x08001659
 8001384:	080013a5 	.word	0x080013a5
 8001388:	08001659 	.word	0x08001659
 800138c:	08001659 	.word	0x08001659
 8001390:	08001659 	.word	0x08001659
 8001394:	08001501 	.word	0x08001501
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001398:	4bb4      	ldr	r3, [pc, #720]	; (800166c <HAL_RCC_GetSysClockFreq+0x338>)
 800139a:	613b      	str	r3, [r7, #16]
       break;
 800139c:	e15f      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800139e:	4bb4      	ldr	r3, [pc, #720]	; (8001670 <HAL_RCC_GetSysClockFreq+0x33c>)
 80013a0:	613b      	str	r3, [r7, #16]
      break;
 80013a2:	e15c      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a4:	4bb0      	ldr	r3, [pc, #704]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013ac:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ae:	4bae      	ldr	r3, [pc, #696]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d04a      	beq.n	8001450 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ba:	4bab      	ldr	r3, [pc, #684]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	099b      	lsrs	r3, r3, #6
 80013c0:	f04f 0400 	mov.w	r4, #0
 80013c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	ea03 0501 	and.w	r5, r3, r1
 80013d0:	ea04 0602 	and.w	r6, r4, r2
 80013d4:	4629      	mov	r1, r5
 80013d6:	4632      	mov	r2, r6
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	f04f 0400 	mov.w	r4, #0
 80013e0:	0154      	lsls	r4, r2, #5
 80013e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013e6:	014b      	lsls	r3, r1, #5
 80013e8:	4619      	mov	r1, r3
 80013ea:	4622      	mov	r2, r4
 80013ec:	1b49      	subs	r1, r1, r5
 80013ee:	eb62 0206 	sbc.w	r2, r2, r6
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	f04f 0400 	mov.w	r4, #0
 80013fa:	0194      	lsls	r4, r2, #6
 80013fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001400:	018b      	lsls	r3, r1, #6
 8001402:	1a5b      	subs	r3, r3, r1
 8001404:	eb64 0402 	sbc.w	r4, r4, r2
 8001408:	f04f 0100 	mov.w	r1, #0
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	00e2      	lsls	r2, r4, #3
 8001412:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001416:	00d9      	lsls	r1, r3, #3
 8001418:	460b      	mov	r3, r1
 800141a:	4614      	mov	r4, r2
 800141c:	195b      	adds	r3, r3, r5
 800141e:	eb44 0406 	adc.w	r4, r4, r6
 8001422:	f04f 0100 	mov.w	r1, #0
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	0262      	lsls	r2, r4, #9
 800142c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001430:	0259      	lsls	r1, r3, #9
 8001432:	460b      	mov	r3, r1
 8001434:	4614      	mov	r4, r2
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f04f 0400 	mov.w	r4, #0
 8001440:	461a      	mov	r2, r3
 8001442:	4623      	mov	r3, r4
 8001444:	f7fe fee4 	bl	8000210 <__aeabi_uldivmod>
 8001448:	4603      	mov	r3, r0
 800144a:	460c      	mov	r4, r1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e049      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001450:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	099b      	lsrs	r3, r3, #6
 8001456:	f04f 0400 	mov.w	r4, #0
 800145a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	ea03 0501 	and.w	r5, r3, r1
 8001466:	ea04 0602 	and.w	r6, r4, r2
 800146a:	4629      	mov	r1, r5
 800146c:	4632      	mov	r2, r6
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	f04f 0400 	mov.w	r4, #0
 8001476:	0154      	lsls	r4, r2, #5
 8001478:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800147c:	014b      	lsls	r3, r1, #5
 800147e:	4619      	mov	r1, r3
 8001480:	4622      	mov	r2, r4
 8001482:	1b49      	subs	r1, r1, r5
 8001484:	eb62 0206 	sbc.w	r2, r2, r6
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	f04f 0400 	mov.w	r4, #0
 8001490:	0194      	lsls	r4, r2, #6
 8001492:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001496:	018b      	lsls	r3, r1, #6
 8001498:	1a5b      	subs	r3, r3, r1
 800149a:	eb64 0402 	sbc.w	r4, r4, r2
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	00e2      	lsls	r2, r4, #3
 80014a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014ac:	00d9      	lsls	r1, r3, #3
 80014ae:	460b      	mov	r3, r1
 80014b0:	4614      	mov	r4, r2
 80014b2:	195b      	adds	r3, r3, r5
 80014b4:	eb44 0406 	adc.w	r4, r4, r6
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	02a2      	lsls	r2, r4, #10
 80014c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80014c6:	0299      	lsls	r1, r3, #10
 80014c8:	460b      	mov	r3, r1
 80014ca:	4614      	mov	r4, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	4621      	mov	r1, r4
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f04f 0400 	mov.w	r4, #0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4623      	mov	r3, r4
 80014da:	f7fe fe99 	bl	8000210 <__aeabi_uldivmod>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	0c1b      	lsrs	r3, r3, #16
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	3301      	adds	r3, #1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	613b      	str	r3, [r7, #16]
      break;
 80014fe:	e0ae      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001508:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800150a:	4b57      	ldr	r3, [pc, #348]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d04a      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001516:	4b54      	ldr	r3, [pc, #336]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	099b      	lsrs	r3, r3, #6
 800151c:	f04f 0400 	mov.w	r4, #0
 8001520:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	ea03 0501 	and.w	r5, r3, r1
 800152c:	ea04 0602 	and.w	r6, r4, r2
 8001530:	4629      	mov	r1, r5
 8001532:	4632      	mov	r2, r6
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	f04f 0400 	mov.w	r4, #0
 800153c:	0154      	lsls	r4, r2, #5
 800153e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001542:	014b      	lsls	r3, r1, #5
 8001544:	4619      	mov	r1, r3
 8001546:	4622      	mov	r2, r4
 8001548:	1b49      	subs	r1, r1, r5
 800154a:	eb62 0206 	sbc.w	r2, r2, r6
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	f04f 0400 	mov.w	r4, #0
 8001556:	0194      	lsls	r4, r2, #6
 8001558:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800155c:	018b      	lsls	r3, r1, #6
 800155e:	1a5b      	subs	r3, r3, r1
 8001560:	eb64 0402 	sbc.w	r4, r4, r2
 8001564:	f04f 0100 	mov.w	r1, #0
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	00e2      	lsls	r2, r4, #3
 800156e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001572:	00d9      	lsls	r1, r3, #3
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	195b      	adds	r3, r3, r5
 800157a:	eb44 0406 	adc.w	r4, r4, r6
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	0262      	lsls	r2, r4, #9
 8001588:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800158c:	0259      	lsls	r1, r3, #9
 800158e:	460b      	mov	r3, r1
 8001590:	4614      	mov	r4, r2
 8001592:	4618      	mov	r0, r3
 8001594:	4621      	mov	r1, r4
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f04f 0400 	mov.w	r4, #0
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	f7fe fe36 	bl	8000210 <__aeabi_uldivmod>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e049      	b.n	8001640 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	f04f 0400 	mov.w	r4, #0
 80015b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	ea03 0501 	and.w	r5, r3, r1
 80015c2:	ea04 0602 	and.w	r6, r4, r2
 80015c6:	4629      	mov	r1, r5
 80015c8:	4632      	mov	r2, r6
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	f04f 0400 	mov.w	r4, #0
 80015d2:	0154      	lsls	r4, r2, #5
 80015d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015d8:	014b      	lsls	r3, r1, #5
 80015da:	4619      	mov	r1, r3
 80015dc:	4622      	mov	r2, r4
 80015de:	1b49      	subs	r1, r1, r5
 80015e0:	eb62 0206 	sbc.w	r2, r2, r6
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	f04f 0400 	mov.w	r4, #0
 80015ec:	0194      	lsls	r4, r2, #6
 80015ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015f2:	018b      	lsls	r3, r1, #6
 80015f4:	1a5b      	subs	r3, r3, r1
 80015f6:	eb64 0402 	sbc.w	r4, r4, r2
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	00e2      	lsls	r2, r4, #3
 8001604:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001608:	00d9      	lsls	r1, r3, #3
 800160a:	460b      	mov	r3, r1
 800160c:	4614      	mov	r4, r2
 800160e:	195b      	adds	r3, r3, r5
 8001610:	eb44 0406 	adc.w	r4, r4, r6
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	02a2      	lsls	r2, r4, #10
 800161e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001622:	0299      	lsls	r1, r3, #10
 8001624:	460b      	mov	r3, r1
 8001626:	4614      	mov	r4, r2
 8001628:	4618      	mov	r0, r3
 800162a:	4621      	mov	r1, r4
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f04f 0400 	mov.w	r4, #0
 8001632:	461a      	mov	r2, r3
 8001634:	4623      	mov	r3, r4
 8001636:	f7fe fdeb 	bl	8000210 <__aeabi_uldivmod>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_RCC_GetSysClockFreq+0x334>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	0f1b      	lsrs	r3, r3, #28
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	613b      	str	r3, [r7, #16]
      break;
 8001656:	e002      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <HAL_RCC_GetSysClockFreq+0x338>)
 800165a:	613b      	str	r3, [r7, #16]
      break;
 800165c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165e:	693b      	ldr	r3, [r7, #16]
}
 8001660:	4618      	mov	r0, r3
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001668:	40023800 	.word	0x40023800
 800166c:	00f42400 	.word	0x00f42400
 8001670:	007a1200 	.word	0x007a1200

08001674 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8083 	beq.w	8001794 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800168e:	4b95      	ldr	r3, [pc, #596]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d019      	beq.n	80016ce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800169a:	4b92      	ldr	r3, [pc, #584]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d106      	bne.n	80016b4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016a6:	4b8f      	ldr	r3, [pc, #572]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b2:	d00c      	beq.n	80016ce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b4:	4b8b      	ldr	r3, [pc, #556]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d112      	bne.n	80016e6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c0:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016cc:	d10b      	bne.n	80016e6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ce:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d05b      	beq.n	8001792 <HAL_RCC_OscConfig+0x11e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d157      	bne.n	8001792 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e216      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x8a>
 80016f0:	4b7c      	ldr	r3, [pc, #496]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a7b      	ldr	r2, [pc, #492]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	e01d      	b.n	800173a <HAL_RCC_OscConfig+0xc6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0xae>
 8001708:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a75      	ldr	r2, [pc, #468]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800170e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b73      	ldr	r3, [pc, #460]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a72      	ldr	r2, [pc, #456]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800171a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0xc6>
 8001722:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a6f      	ldr	r2, [pc, #444]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b6d      	ldr	r3, [pc, #436]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6c      	ldr	r2, [pc, #432]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d013      	beq.n	800176a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff f9df 	bl	8000b04 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174a:	f7ff f9db 	bl	8000b04 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1db      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175c:	4b61      	ldr	r3, [pc, #388]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0xd6>
 8001768:	e014      	b.n	8001794 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff f9cb 	bl	8000b04 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001772:	f7ff f9c7 	bl	8000b04 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b64      	cmp	r3, #100	; 0x64
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1c7      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001784:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0xfe>
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d06f      	beq.n	8001880 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d017      	beq.n	80017dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017b8:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00b      	beq.n	80017dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c4:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d11c      	bne.n	800180a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d0:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d116      	bne.n	800180a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x180>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e18f      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4938      	ldr	r1, [pc, #224]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001808:	e03a      	b.n	8001880 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d020      	beq.n	8001854 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f974 	bl	8000b04 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff f970 	bl	8000b04 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e170      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4925      	ldr	r1, [pc, #148]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
 8001852:	e015      	b.n	8001880 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_OscConfig+0x274>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff f953 	bl	8000b04 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff f94f 	bl	8000b04 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e14f      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d037      	beq.n	80018fc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d016      	beq.n	80018c2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_RCC_OscConfig+0x278>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff f933 	bl	8000b04 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff f92f 	bl	8000b04 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e12f      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_OscConfig+0x270>)
 80018b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x22e>
 80018c0:	e01c      	b.n	80018fc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_RCC_OscConfig+0x278>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff f91c 	bl	8000b04 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ce:	e00f      	b.n	80018f0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff f918 	bl	8000b04 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d908      	bls.n	80018f0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e118      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	42470000 	.word	0x42470000
 80018ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	4b8a      	ldr	r3, [pc, #552]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 80018f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1e9      	bne.n	80018d0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8097 	beq.w	8001a38 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190e:	4b83      	ldr	r3, [pc, #524]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10f      	bne.n	800193a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b7f      	ldr	r3, [pc, #508]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a7e      	ldr	r2, [pc, #504]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b7c      	ldr	r3, [pc, #496]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001936:	2301      	movs	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193a:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <HAL_RCC_OscConfig+0x4ac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d118      	bne.n	8001978 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0x4ac>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001952:	f7ff f8d7 	bl	8000b04 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195a:	f7ff f8d3 	bl	8000b04 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0d3      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x4ac>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x31a>
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a65      	ldr	r2, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x354>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x33c>
 8001996:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a60      	ldr	r2, [pc, #384]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0x354>
 80019b0:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a59      	ldr	r2, [pc, #356]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
 80019bc:	4b57      	ldr	r3, [pc, #348]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 80019c2:	f023 0304 	bic.w	r3, r3, #4
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d015      	beq.n	80019fc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f898 	bl	8000b04 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d8:	f7ff f894 	bl	8000b04 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e092      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0ee      	beq.n	80019d8 <HAL_RCC_OscConfig+0x364>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f882 	bl	8000b04 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff f87e 	bl	8000b04 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e07c      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1a:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1ee      	bne.n	8001a04 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d068      	beq.n	8001b12 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d060      	beq.n	8001b0e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d145      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <HAL_RCC_OscConfig+0x4b0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f853 	bl	8000b04 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f84f 	bl	8000b04 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e04f      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	019b      	lsls	r3, r3, #6
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	061b      	lsls	r3, r3, #24
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	071b      	lsls	r3, r3, #28
 8001aac:	491b      	ldr	r1, [pc, #108]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_RCC_OscConfig+0x4b0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f824 	bl	8000b04 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f820 	bl	8000b04 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e020      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x44c>
 8001ade:	e018      	b.n	8001b12 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_OscConfig+0x4b0>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f80d 	bl	8000b04 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f809 	bl	8000b04 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e009      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_OscConfig+0x4a8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x47a>
 8001b0c:	e001      	b.n	8001b12 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40007000 	.word	0x40007000
 8001b24:	42470060 	.word	0x42470060

08001b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e01d      	b.n	8001b76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f815 	bl	8001b7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 f968 	bl	8001e3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	d007      	beq.n	8001bcc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d122      	bne.n	8001c36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d11b      	bne.n	8001c36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f06f 0202 	mvn.w	r2, #2
 8001c06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8ee 	bl	8001dfe <HAL_TIM_IC_CaptureCallback>
 8001c22:	e005      	b.n	8001c30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f8e0 	bl	8001dea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8f1 	bl	8001e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d122      	bne.n	8001c8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d11b      	bne.n	8001c8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0204 	mvn.w	r2, #4
 8001c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8c4 	bl	8001dfe <HAL_TIM_IC_CaptureCallback>
 8001c76:	e005      	b.n	8001c84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8b6 	bl	8001dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8c7 	bl	8001e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d122      	bne.n	8001cde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d11b      	bne.n	8001cde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0208 	mvn.w	r2, #8
 8001cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f89a 	bl	8001dfe <HAL_TIM_IC_CaptureCallback>
 8001cca:	e005      	b.n	8001cd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f88c 	bl	8001dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f89d 	bl	8001e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d122      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d11b      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f06f 0210 	mvn.w	r2, #16
 8001d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2208      	movs	r2, #8
 8001d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f870 	bl	8001dfe <HAL_TIM_IC_CaptureCallback>
 8001d1e:	e005      	b.n	8001d2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f862 	bl	8001dea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f873 	bl	8001e12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d10e      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0201 	mvn.w	r2, #1
 8001d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7fe fd59 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d68:	2b80      	cmp	r3, #128	; 0x80
 8001d6a:	d10e      	bne.n	8001d8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d76:	2b80      	cmp	r3, #128	; 0x80
 8001d78:	d107      	bne.n	8001d8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f903 	bl	8001f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d10e      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da2:	2b40      	cmp	r3, #64	; 0x40
 8001da4:	d107      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f838 	bl	8001e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d10e      	bne.n	8001de2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d107      	bne.n	8001de2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f06f 0220 	mvn.w	r2, #32
 8001dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8cd 	bl	8001f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <TIM_Base_SetConfig+0x114>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <TIM_Base_SetConfig+0x40>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5a:	d00f      	beq.n	8001e7c <TIM_Base_SetConfig+0x40>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <TIM_Base_SetConfig+0x118>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00b      	beq.n	8001e7c <TIM_Base_SetConfig+0x40>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a3c      	ldr	r2, [pc, #240]	; (8001f58 <TIM_Base_SetConfig+0x11c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d007      	beq.n	8001e7c <TIM_Base_SetConfig+0x40>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <TIM_Base_SetConfig+0x120>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d003      	beq.n	8001e7c <TIM_Base_SetConfig+0x40>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <TIM_Base_SetConfig+0x124>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a2f      	ldr	r2, [pc, #188]	; (8001f50 <TIM_Base_SetConfig+0x114>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02b      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d027      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <TIM_Base_SetConfig+0x118>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d023      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a2b      	ldr	r2, [pc, #172]	; (8001f58 <TIM_Base_SetConfig+0x11c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <TIM_Base_SetConfig+0x120>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01b      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <TIM_Base_SetConfig+0x124>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d017      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <TIM_Base_SetConfig+0x128>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <TIM_Base_SetConfig+0x12c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <TIM_Base_SetConfig+0x130>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00b      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <TIM_Base_SetConfig+0x134>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <TIM_Base_SetConfig+0x138>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a23      	ldr	r2, [pc, #140]	; (8001f78 <TIM_Base_SetConfig+0x13c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d108      	bne.n	8001f00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <TIM_Base_SetConfig+0x114>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0xf8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <TIM_Base_SetConfig+0x124>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d103      	bne.n	8001f3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	615a      	str	r2, [r3, #20]
}
 8001f42:	bf00      	nop
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40000800 	.word	0x40000800
 8001f5c:	40000c00 	.word	0x40000c00
 8001f60:	40010400 	.word	0x40010400
 8001f64:	40014000 	.word	0x40014000
 8001f68:	40014400 	.word	0x40014400
 8001f6c:	40014800 	.word	0x40014800
 8001f70:	40001800 	.word	0x40001800
 8001f74:	40001c00 	.word	0x40001c00
 8001f78:	40002000 	.word	0x40002000

08001f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e03f      	b.n	8002036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fc62 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f829 	bl	8002040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800200c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800201c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002082:	f023 030c 	bic.w	r3, r3, #12
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	430b      	orrs	r3, r1
 800208e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ae:	f040 818b 	bne.w	80023c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4ac1      	ldr	r2, [pc, #772]	; (80023bc <UART_SetConfig+0x37c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d005      	beq.n	80020c8 <UART_SetConfig+0x88>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4abf      	ldr	r2, [pc, #764]	; (80023c0 <UART_SetConfig+0x380>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	f040 80bd 	bne.w	8002242 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020c8:	f7ff f8ee 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 80020cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	461d      	mov	r5, r3
 80020d2:	f04f 0600 	mov.w	r6, #0
 80020d6:	46a8      	mov	r8, r5
 80020d8:	46b1      	mov	r9, r6
 80020da:	eb18 0308 	adds.w	r3, r8, r8
 80020de:	eb49 0409 	adc.w	r4, r9, r9
 80020e2:	4698      	mov	r8, r3
 80020e4:	46a1      	mov	r9, r4
 80020e6:	eb18 0805 	adds.w	r8, r8, r5
 80020ea:	eb49 0906 	adc.w	r9, r9, r6
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002102:	4688      	mov	r8, r1
 8002104:	4691      	mov	r9, r2
 8002106:	eb18 0005 	adds.w	r0, r8, r5
 800210a:	eb49 0106 	adc.w	r1, r9, r6
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	461d      	mov	r5, r3
 8002114:	f04f 0600 	mov.w	r6, #0
 8002118:	196b      	adds	r3, r5, r5
 800211a:	eb46 0406 	adc.w	r4, r6, r6
 800211e:	461a      	mov	r2, r3
 8002120:	4623      	mov	r3, r4
 8002122:	f7fe f875 	bl	8000210 <__aeabi_uldivmod>
 8002126:	4603      	mov	r3, r0
 8002128:	460c      	mov	r4, r1
 800212a:	461a      	mov	r2, r3
 800212c:	4ba5      	ldr	r3, [pc, #660]	; (80023c4 <UART_SetConfig+0x384>)
 800212e:	fba3 2302 	umull	r2, r3, r3, r2
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	461d      	mov	r5, r3
 800213c:	f04f 0600 	mov.w	r6, #0
 8002140:	46a9      	mov	r9, r5
 8002142:	46b2      	mov	sl, r6
 8002144:	eb19 0309 	adds.w	r3, r9, r9
 8002148:	eb4a 040a 	adc.w	r4, sl, sl
 800214c:	4699      	mov	r9, r3
 800214e:	46a2      	mov	sl, r4
 8002150:	eb19 0905 	adds.w	r9, r9, r5
 8002154:	eb4a 0a06 	adc.w	sl, sl, r6
 8002158:	f04f 0100 	mov.w	r1, #0
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002164:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002168:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800216c:	4689      	mov	r9, r1
 800216e:	4692      	mov	sl, r2
 8002170:	eb19 0005 	adds.w	r0, r9, r5
 8002174:	eb4a 0106 	adc.w	r1, sl, r6
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	461d      	mov	r5, r3
 800217e:	f04f 0600 	mov.w	r6, #0
 8002182:	196b      	adds	r3, r5, r5
 8002184:	eb46 0406 	adc.w	r4, r6, r6
 8002188:	461a      	mov	r2, r3
 800218a:	4623      	mov	r3, r4
 800218c:	f7fe f840 	bl	8000210 <__aeabi_uldivmod>
 8002190:	4603      	mov	r3, r0
 8002192:	460c      	mov	r4, r1
 8002194:	461a      	mov	r2, r3
 8002196:	4b8b      	ldr	r3, [pc, #556]	; (80023c4 <UART_SetConfig+0x384>)
 8002198:	fba3 1302 	umull	r1, r3, r3, r2
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	2164      	movs	r1, #100	; 0x64
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	3332      	adds	r3, #50	; 0x32
 80021aa:	4a86      	ldr	r2, [pc, #536]	; (80023c4 <UART_SetConfig+0x384>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021b8:	4498      	add	r8, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	461d      	mov	r5, r3
 80021be:	f04f 0600 	mov.w	r6, #0
 80021c2:	46a9      	mov	r9, r5
 80021c4:	46b2      	mov	sl, r6
 80021c6:	eb19 0309 	adds.w	r3, r9, r9
 80021ca:	eb4a 040a 	adc.w	r4, sl, sl
 80021ce:	4699      	mov	r9, r3
 80021d0:	46a2      	mov	sl, r4
 80021d2:	eb19 0905 	adds.w	r9, r9, r5
 80021d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80021da:	f04f 0100 	mov.w	r1, #0
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021ee:	4689      	mov	r9, r1
 80021f0:	4692      	mov	sl, r2
 80021f2:	eb19 0005 	adds.w	r0, r9, r5
 80021f6:	eb4a 0106 	adc.w	r1, sl, r6
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	461d      	mov	r5, r3
 8002200:	f04f 0600 	mov.w	r6, #0
 8002204:	196b      	adds	r3, r5, r5
 8002206:	eb46 0406 	adc.w	r4, r6, r6
 800220a:	461a      	mov	r2, r3
 800220c:	4623      	mov	r3, r4
 800220e:	f7fd ffff 	bl	8000210 <__aeabi_uldivmod>
 8002212:	4603      	mov	r3, r0
 8002214:	460c      	mov	r4, r1
 8002216:	461a      	mov	r2, r3
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <UART_SetConfig+0x384>)
 800221a:	fba3 1302 	umull	r1, r3, r3, r2
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2164      	movs	r1, #100	; 0x64
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	3332      	adds	r3, #50	; 0x32
 800222c:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <UART_SetConfig+0x384>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	f003 0207 	and.w	r2, r3, #7
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4442      	add	r2, r8
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	e26f      	b.n	8002722 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002242:	f7ff f81d 	bl	8001280 <HAL_RCC_GetPCLK1Freq>
 8002246:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	461d      	mov	r5, r3
 800224c:	f04f 0600 	mov.w	r6, #0
 8002250:	46a8      	mov	r8, r5
 8002252:	46b1      	mov	r9, r6
 8002254:	eb18 0308 	adds.w	r3, r8, r8
 8002258:	eb49 0409 	adc.w	r4, r9, r9
 800225c:	4698      	mov	r8, r3
 800225e:	46a1      	mov	r9, r4
 8002260:	eb18 0805 	adds.w	r8, r8, r5
 8002264:	eb49 0906 	adc.w	r9, r9, r6
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002274:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002278:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800227c:	4688      	mov	r8, r1
 800227e:	4691      	mov	r9, r2
 8002280:	eb18 0005 	adds.w	r0, r8, r5
 8002284:	eb49 0106 	adc.w	r1, r9, r6
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	461d      	mov	r5, r3
 800228e:	f04f 0600 	mov.w	r6, #0
 8002292:	196b      	adds	r3, r5, r5
 8002294:	eb46 0406 	adc.w	r4, r6, r6
 8002298:	461a      	mov	r2, r3
 800229a:	4623      	mov	r3, r4
 800229c:	f7fd ffb8 	bl	8000210 <__aeabi_uldivmod>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <UART_SetConfig+0x384>)
 80022a8:	fba3 2302 	umull	r2, r3, r3, r2
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	461d      	mov	r5, r3
 80022b6:	f04f 0600 	mov.w	r6, #0
 80022ba:	46a9      	mov	r9, r5
 80022bc:	46b2      	mov	sl, r6
 80022be:	eb19 0309 	adds.w	r3, r9, r9
 80022c2:	eb4a 040a 	adc.w	r4, sl, sl
 80022c6:	4699      	mov	r9, r3
 80022c8:	46a2      	mov	sl, r4
 80022ca:	eb19 0905 	adds.w	r9, r9, r5
 80022ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80022d2:	f04f 0100 	mov.w	r1, #0
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022e6:	4689      	mov	r9, r1
 80022e8:	4692      	mov	sl, r2
 80022ea:	eb19 0005 	adds.w	r0, r9, r5
 80022ee:	eb4a 0106 	adc.w	r1, sl, r6
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	461d      	mov	r5, r3
 80022f8:	f04f 0600 	mov.w	r6, #0
 80022fc:	196b      	adds	r3, r5, r5
 80022fe:	eb46 0406 	adc.w	r4, r6, r6
 8002302:	461a      	mov	r2, r3
 8002304:	4623      	mov	r3, r4
 8002306:	f7fd ff83 	bl	8000210 <__aeabi_uldivmod>
 800230a:	4603      	mov	r3, r0
 800230c:	460c      	mov	r4, r1
 800230e:	461a      	mov	r2, r3
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <UART_SetConfig+0x384>)
 8002312:	fba3 1302 	umull	r1, r3, r3, r2
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2164      	movs	r1, #100	; 0x64
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	3332      	adds	r3, #50	; 0x32
 8002324:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <UART_SetConfig+0x384>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002332:	4498      	add	r8, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	461d      	mov	r5, r3
 8002338:	f04f 0600 	mov.w	r6, #0
 800233c:	46a9      	mov	r9, r5
 800233e:	46b2      	mov	sl, r6
 8002340:	eb19 0309 	adds.w	r3, r9, r9
 8002344:	eb4a 040a 	adc.w	r4, sl, sl
 8002348:	4699      	mov	r9, r3
 800234a:	46a2      	mov	sl, r4
 800234c:	eb19 0905 	adds.w	r9, r9, r5
 8002350:	eb4a 0a06 	adc.w	sl, sl, r6
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002360:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002364:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002368:	4689      	mov	r9, r1
 800236a:	4692      	mov	sl, r2
 800236c:	eb19 0005 	adds.w	r0, r9, r5
 8002370:	eb4a 0106 	adc.w	r1, sl, r6
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	461d      	mov	r5, r3
 800237a:	f04f 0600 	mov.w	r6, #0
 800237e:	196b      	adds	r3, r5, r5
 8002380:	eb46 0406 	adc.w	r4, r6, r6
 8002384:	461a      	mov	r2, r3
 8002386:	4623      	mov	r3, r4
 8002388:	f7fd ff42 	bl	8000210 <__aeabi_uldivmod>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	461a      	mov	r2, r3
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <UART_SetConfig+0x384>)
 8002394:	fba3 1302 	umull	r1, r3, r3, r2
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	2164      	movs	r1, #100	; 0x64
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	3332      	adds	r3, #50	; 0x32
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <UART_SetConfig+0x384>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	f003 0207 	and.w	r2, r3, #7
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4442      	add	r2, r8
 80023b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80023ba:	e1b2      	b.n	8002722 <UART_SetConfig+0x6e2>
 80023bc:	40011000 	.word	0x40011000
 80023c0:	40011400 	.word	0x40011400
 80023c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4ad7      	ldr	r2, [pc, #860]	; (800272c <UART_SetConfig+0x6ec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d005      	beq.n	80023de <UART_SetConfig+0x39e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4ad6      	ldr	r2, [pc, #856]	; (8002730 <UART_SetConfig+0x6f0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	f040 80d1 	bne.w	8002580 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80023de:	f7fe ff63 	bl	80012a8 <HAL_RCC_GetPCLK2Freq>
 80023e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	469a      	mov	sl, r3
 80023e8:	f04f 0b00 	mov.w	fp, #0
 80023ec:	46d0      	mov	r8, sl
 80023ee:	46d9      	mov	r9, fp
 80023f0:	eb18 0308 	adds.w	r3, r8, r8
 80023f4:	eb49 0409 	adc.w	r4, r9, r9
 80023f8:	4698      	mov	r8, r3
 80023fa:	46a1      	mov	r9, r4
 80023fc:	eb18 080a 	adds.w	r8, r8, sl
 8002400:	eb49 090b 	adc.w	r9, r9, fp
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002410:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002414:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002418:	4688      	mov	r8, r1
 800241a:	4691      	mov	r9, r2
 800241c:	eb1a 0508 	adds.w	r5, sl, r8
 8002420:	eb4b 0609 	adc.w	r6, fp, r9
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	f04f 0400 	mov.w	r4, #0
 8002436:	0094      	lsls	r4, r2, #2
 8002438:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800243c:	008b      	lsls	r3, r1, #2
 800243e:	461a      	mov	r2, r3
 8002440:	4623      	mov	r3, r4
 8002442:	4628      	mov	r0, r5
 8002444:	4631      	mov	r1, r6
 8002446:	f7fd fee3 	bl	8000210 <__aeabi_uldivmod>
 800244a:	4603      	mov	r3, r0
 800244c:	460c      	mov	r4, r1
 800244e:	461a      	mov	r2, r3
 8002450:	4bb8      	ldr	r3, [pc, #736]	; (8002734 <UART_SetConfig+0x6f4>)
 8002452:	fba3 2302 	umull	r2, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	469b      	mov	fp, r3
 8002460:	f04f 0c00 	mov.w	ip, #0
 8002464:	46d9      	mov	r9, fp
 8002466:	46e2      	mov	sl, ip
 8002468:	eb19 0309 	adds.w	r3, r9, r9
 800246c:	eb4a 040a 	adc.w	r4, sl, sl
 8002470:	4699      	mov	r9, r3
 8002472:	46a2      	mov	sl, r4
 8002474:	eb19 090b 	adds.w	r9, r9, fp
 8002478:	eb4a 0a0c 	adc.w	sl, sl, ip
 800247c:	f04f 0100 	mov.w	r1, #0
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002488:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800248c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002490:	4689      	mov	r9, r1
 8002492:	4692      	mov	sl, r2
 8002494:	eb1b 0509 	adds.w	r5, fp, r9
 8002498:	eb4c 060a 	adc.w	r6, ip, sl
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f04f 0400 	mov.w	r4, #0
 80024ae:	0094      	lsls	r4, r2, #2
 80024b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024b4:	008b      	lsls	r3, r1, #2
 80024b6:	461a      	mov	r2, r3
 80024b8:	4623      	mov	r3, r4
 80024ba:	4628      	mov	r0, r5
 80024bc:	4631      	mov	r1, r6
 80024be:	f7fd fea7 	bl	8000210 <__aeabi_uldivmod>
 80024c2:	4603      	mov	r3, r0
 80024c4:	460c      	mov	r4, r1
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b9a      	ldr	r3, [pc, #616]	; (8002734 <UART_SetConfig+0x6f4>)
 80024ca:	fba3 1302 	umull	r1, r3, r3, r2
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2164      	movs	r1, #100	; 0x64
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	3332      	adds	r3, #50	; 0x32
 80024dc:	4a95      	ldr	r2, [pc, #596]	; (8002734 <UART_SetConfig+0x6f4>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e8:	4498      	add	r8, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	469b      	mov	fp, r3
 80024ee:	f04f 0c00 	mov.w	ip, #0
 80024f2:	46d9      	mov	r9, fp
 80024f4:	46e2      	mov	sl, ip
 80024f6:	eb19 0309 	adds.w	r3, r9, r9
 80024fa:	eb4a 040a 	adc.w	r4, sl, sl
 80024fe:	4699      	mov	r9, r3
 8002500:	46a2      	mov	sl, r4
 8002502:	eb19 090b 	adds.w	r9, r9, fp
 8002506:	eb4a 0a0c 	adc.w	sl, sl, ip
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002516:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800251a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800251e:	4689      	mov	r9, r1
 8002520:	4692      	mov	sl, r2
 8002522:	eb1b 0509 	adds.w	r5, fp, r9
 8002526:	eb4c 060a 	adc.w	r6, ip, sl
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	f04f 0400 	mov.w	r4, #0
 800253c:	0094      	lsls	r4, r2, #2
 800253e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002542:	008b      	lsls	r3, r1, #2
 8002544:	461a      	mov	r2, r3
 8002546:	4623      	mov	r3, r4
 8002548:	4628      	mov	r0, r5
 800254a:	4631      	mov	r1, r6
 800254c:	f7fd fe60 	bl	8000210 <__aeabi_uldivmod>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	461a      	mov	r2, r3
 8002556:	4b77      	ldr	r3, [pc, #476]	; (8002734 <UART_SetConfig+0x6f4>)
 8002558:	fba3 1302 	umull	r1, r3, r3, r2
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	2164      	movs	r1, #100	; 0x64
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	3332      	adds	r3, #50	; 0x32
 800256a:	4a72      	ldr	r2, [pc, #456]	; (8002734 <UART_SetConfig+0x6f4>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4442      	add	r2, r8
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	e0d0      	b.n	8002722 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002580:	f7fe fe7e 	bl	8001280 <HAL_RCC_GetPCLK1Freq>
 8002584:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	469a      	mov	sl, r3
 800258a:	f04f 0b00 	mov.w	fp, #0
 800258e:	46d0      	mov	r8, sl
 8002590:	46d9      	mov	r9, fp
 8002592:	eb18 0308 	adds.w	r3, r8, r8
 8002596:	eb49 0409 	adc.w	r4, r9, r9
 800259a:	4698      	mov	r8, r3
 800259c:	46a1      	mov	r9, r4
 800259e:	eb18 080a 	adds.w	r8, r8, sl
 80025a2:	eb49 090b 	adc.w	r9, r9, fp
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025ba:	4688      	mov	r8, r1
 80025bc:	4691      	mov	r9, r2
 80025be:	eb1a 0508 	adds.w	r5, sl, r8
 80025c2:	eb4b 0609 	adc.w	r6, fp, r9
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4619      	mov	r1, r3
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	f04f 0400 	mov.w	r4, #0
 80025d8:	0094      	lsls	r4, r2, #2
 80025da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025de:	008b      	lsls	r3, r1, #2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	4628      	mov	r0, r5
 80025e6:	4631      	mov	r1, r6
 80025e8:	f7fd fe12 	bl	8000210 <__aeabi_uldivmod>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b50      	ldr	r3, [pc, #320]	; (8002734 <UART_SetConfig+0x6f4>)
 80025f4:	fba3 2302 	umull	r2, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	469b      	mov	fp, r3
 8002602:	f04f 0c00 	mov.w	ip, #0
 8002606:	46d9      	mov	r9, fp
 8002608:	46e2      	mov	sl, ip
 800260a:	eb19 0309 	adds.w	r3, r9, r9
 800260e:	eb4a 040a 	adc.w	r4, sl, sl
 8002612:	4699      	mov	r9, r3
 8002614:	46a2      	mov	sl, r4
 8002616:	eb19 090b 	adds.w	r9, r9, fp
 800261a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800262a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800262e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002632:	4689      	mov	r9, r1
 8002634:	4692      	mov	sl, r2
 8002636:	eb1b 0509 	adds.w	r5, fp, r9
 800263a:	eb4c 060a 	adc.w	r6, ip, sl
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4619      	mov	r1, r3
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	f04f 0400 	mov.w	r4, #0
 8002650:	0094      	lsls	r4, r2, #2
 8002652:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002656:	008b      	lsls	r3, r1, #2
 8002658:	461a      	mov	r2, r3
 800265a:	4623      	mov	r3, r4
 800265c:	4628      	mov	r0, r5
 800265e:	4631      	mov	r1, r6
 8002660:	f7fd fdd6 	bl	8000210 <__aeabi_uldivmod>
 8002664:	4603      	mov	r3, r0
 8002666:	460c      	mov	r4, r1
 8002668:	461a      	mov	r2, r3
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <UART_SetConfig+0x6f4>)
 800266c:	fba3 1302 	umull	r1, r3, r3, r2
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	2164      	movs	r1, #100	; 0x64
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	3332      	adds	r3, #50	; 0x32
 800267e:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <UART_SetConfig+0x6f4>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268a:	4498      	add	r8, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	469b      	mov	fp, r3
 8002690:	f04f 0c00 	mov.w	ip, #0
 8002694:	46d9      	mov	r9, fp
 8002696:	46e2      	mov	sl, ip
 8002698:	eb19 0309 	adds.w	r3, r9, r9
 800269c:	eb4a 040a 	adc.w	r4, sl, sl
 80026a0:	4699      	mov	r9, r3
 80026a2:	46a2      	mov	sl, r4
 80026a4:	eb19 090b 	adds.w	r9, r9, fp
 80026a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026c0:	4689      	mov	r9, r1
 80026c2:	4692      	mov	sl, r2
 80026c4:	eb1b 0509 	adds.w	r5, fp, r9
 80026c8:	eb4c 060a 	adc.w	r6, ip, sl
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	0094      	lsls	r4, r2, #2
 80026e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026e4:	008b      	lsls	r3, r1, #2
 80026e6:	461a      	mov	r2, r3
 80026e8:	4623      	mov	r3, r4
 80026ea:	4628      	mov	r0, r5
 80026ec:	4631      	mov	r1, r6
 80026ee:	f7fd fd8f 	bl	8000210 <__aeabi_uldivmod>
 80026f2:	4603      	mov	r3, r0
 80026f4:	460c      	mov	r4, r1
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <UART_SetConfig+0x6f4>)
 80026fa:	fba3 1302 	umull	r1, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2164      	movs	r1, #100	; 0x64
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a09      	ldr	r2, [pc, #36]	; (8002734 <UART_SetConfig+0x6f4>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 020f 	and.w	r2, r3, #15
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4442      	add	r2, r8
 800271e:	609a      	str	r2, [r3, #8]
}
 8002720:	e7ff      	b.n	8002722 <UART_SetConfig+0x6e2>
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272c:	40011000 	.word	0x40011000
 8002730:	40011400 	.word	0x40011400
 8002734:	51eb851f 	.word	0x51eb851f

08002738 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800274e:	f3ef 8305 	mrs	r3, IPSR
 8002752:	60bb      	str	r3, [r7, #8]
  return(result);
 8002754:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275a:	f3ef 8310 	mrs	r3, PRIMASK
 800275e:	607b      	str	r3, [r7, #4]
  return(result);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002766:	f3ef 8311 	mrs	r3, BASEPRI
 800276a:	603b      	str	r3, [r7, #0]
  return(result);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <osKernelInitialize+0x3a>
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <osKernelInitialize+0x64>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d103      	bne.n	8002782 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800277a:	f06f 0305 	mvn.w	r3, #5
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e00c      	b.n	800279c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <osKernelInitialize+0x64>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <osKernelInitialize+0x64>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e002      	b.n	800279c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800279c:	68fb      	ldr	r3, [r7, #12]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000034 	.word	0x20000034

080027b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b6:	f3ef 8305 	mrs	r3, IPSR
 80027ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80027bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c2:	f3ef 8310 	mrs	r3, PRIMASK
 80027c6:	607b      	str	r3, [r7, #4]
  return(result);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027ce:	f3ef 8311 	mrs	r3, BASEPRI
 80027d2:	603b      	str	r3, [r7, #0]
  return(result);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <osKernelStart+0x3a>
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <osKernelStart+0x68>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d103      	bne.n	80027ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80027e2:	f06f 0305 	mvn.w	r3, #5
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e010      	b.n	800280c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <osKernelStart+0x68>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d109      	bne.n	8002806 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80027f2:	f7ff ffa1 	bl	8002738 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <osKernelStart+0x68>)
 80027f8:	2202      	movs	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80027fc:	f001 f870 	bl	80038e0 <vTaskStartScheduler>
      stat = osOK;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e002      	b.n	800280c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800280c:	68fb      	ldr	r3, [r7, #12]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000034 	.word	0x20000034

0800281c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b090      	sub	sp, #64	; 0x40
 8002820:	af04      	add	r7, sp, #16
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800282c:	f3ef 8305 	mrs	r3, IPSR
 8002830:	61fb      	str	r3, [r7, #28]
  return(result);
 8002832:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002834:	2b00      	cmp	r3, #0
 8002836:	f040 808f 	bne.w	8002958 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283a:	f3ef 8310 	mrs	r3, PRIMASK
 800283e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002846:	f3ef 8311 	mrs	r3, BASEPRI
 800284a:	617b      	str	r3, [r7, #20]
  return(result);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <osThreadNew+0x3e>
 8002852:	4b44      	ldr	r3, [pc, #272]	; (8002964 <osThreadNew+0x148>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d07e      	beq.n	8002958 <osThreadNew+0x13c>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d07b      	beq.n	8002958 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002864:	2318      	movs	r3, #24
 8002866:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d045      	beq.n	8002904 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <osThreadNew+0x6a>
        name = attr->name;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <osThreadNew+0x90>
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	2b38      	cmp	r3, #56	; 0x38
 800289e:	d805      	bhi.n	80028ac <osThreadNew+0x90>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <osThreadNew+0x94>
        return (NULL);
 80028ac:	2300      	movs	r3, #0
 80028ae:	e054      	b.n	800295a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <osThreadNew+0xca>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b5b      	cmp	r3, #91	; 0x5b
 80028ce:	d90a      	bls.n	80028e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <osThreadNew+0xca>
        mem = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	e010      	b.n	8002908 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10c      	bne.n	8002908 <osThreadNew+0xec>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <osThreadNew+0xec>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <osThreadNew+0xec>
          mem = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
 8002902:	e001      	b.n	8002908 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d110      	bne.n	8002930 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002916:	9202      	str	r2, [sp, #8]
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fe09 	bl	800353c <xTaskCreateStatic>
 800292a:	4603      	mov	r3, r0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	e013      	b.n	8002958 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d110      	bne.n	8002958 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	b29a      	uxth	r2, r3
 800293a:	f107 0310 	add.w	r3, r7, #16
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fe51 	bl	80035f0 <xTaskCreate>
 800294e:	4603      	mov	r3, r0
 8002950:	2b01      	cmp	r3, #1
 8002952:	d001      	beq.n	8002958 <osThreadNew+0x13c>
          hTask = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002958:	693b      	ldr	r3, [r7, #16]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3730      	adds	r7, #48	; 0x30
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000034 	.word	0x20000034

08002968 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002970:	f3ef 8305 	mrs	r3, IPSR
 8002974:	613b      	str	r3, [r7, #16]
  return(result);
 8002976:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297c:	f3ef 8310 	mrs	r3, PRIMASK
 8002980:	60fb      	str	r3, [r7, #12]
  return(result);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002988:	f3ef 8311 	mrs	r3, BASEPRI
 800298c:	60bb      	str	r3, [r7, #8]
  return(result);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <osDelay+0x3c>
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <osDelay+0x58>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d103      	bne.n	80029a4 <osDelay+0x3c>
    stat = osErrorISR;
 800299c:	f06f 0305 	mvn.w	r3, #5
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e007      	b.n	80029b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 ff62 	bl	8003878 <vTaskDelay>
    }
  }

  return (stat);
 80029b4:	697b      	ldr	r3, [r7, #20]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000034 	.word	0x20000034

080029c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80029d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <vApplicationGetIdleTaskMemory+0x30>)
 80029da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000038 	.word	0x20000038
 80029f4:	20000094 	.word	0x20000094

080029f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <vApplicationGetTimerTaskMemory+0x30>)
 8002a0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	20000294 	.word	0x20000294
 8002a28:	200002f0 	.word	0x200002f0

08002a2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f103 0208 	add.w	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f103 0208 	add.w	r2, r3, #8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f103 0208 	add.w	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d103      	bne.n	8002aee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e00c      	b.n	8002b08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3308      	adds	r3, #8
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e002      	b.n	8002afc <vListInsert+0x2e>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d2f6      	bcs.n	8002af6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6852      	ldr	r2, [r2, #4]
 8002b60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d103      	bne.n	8002b74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	1e5a      	subs	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002bbc:	f002 f80e 	bl	8004bdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	68f9      	ldr	r1, [r7, #12]
 8002bca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	441a      	add	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	3b01      	subs	r3, #1
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	441a      	add	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	22ff      	movs	r2, #255	; 0xff
 8002c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d114      	bne.n	8002c3c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01a      	beq.n	8002c50 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 f8de 	bl	8003de0 <xTaskRemoveFromEventList>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <xQueueGenericReset+0xcc>)
 8002c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	e009      	b.n	8002c50 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3310      	adds	r3, #16
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fef3 	bl	8002a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3324      	adds	r3, #36	; 0x24
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff feee 	bl	8002a2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c50:	f001 fff2 	bl	8004c38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c54:	2301      	movs	r3, #1
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <xQueueGenericCreateStatic+0x28>
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8a:	e7fe      	b.n	8002c8a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <xQueueGenericCreateStatic+0x42>
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	e7fe      	b.n	8002ca4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <xQueueGenericCreateStatic+0x4e>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <xQueueGenericCreateStatic+0x52>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <xQueueGenericCreateStatic+0x54>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <xQueueGenericCreateStatic+0x6c>
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	623b      	str	r3, [r7, #32]
 8002cce:	e7fe      	b.n	8002cce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <xQueueGenericCreateStatic+0x78>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <xQueueGenericCreateStatic+0x7c>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <xQueueGenericCreateStatic+0x7e>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <xQueueGenericCreateStatic+0x96>
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cfa:	2350      	movs	r3, #80	; 0x50
 8002cfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b50      	cmp	r3, #80	; 0x50
 8002d02:	d009      	beq.n	8002d18 <xQueueGenericCreateStatic+0xb4>
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e7fe      	b.n	8002d16 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f805 	bl	8002d4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3730      	adds	r7, #48	; 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e002      	b.n	8002d6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d78:	2101      	movs	r1, #1
 8002d7a:	69b8      	ldr	r0, [r7, #24]
 8002d7c:	f7ff ff0a 	bl	8002b94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <xQueueGenericSend+0x30>
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbe:	e7fe      	b.n	8002dbe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <xQueueGenericSend+0x3e>
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <xQueueGenericSend+0x42>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <xQueueGenericSend+0x44>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <xQueueGenericSend+0x5c>
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dea:	e7fe      	b.n	8002dea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d103      	bne.n	8002dfa <xQueueGenericSend+0x6a>
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <xQueueGenericSend+0x6e>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueGenericSend+0x70>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <xQueueGenericSend+0x88>
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	623b      	str	r3, [r7, #32]
 8002e16:	e7fe      	b.n	8002e16 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e18:	f001 f998 	bl	800414c <xTaskGetSchedulerState>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <xQueueGenericSend+0x98>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <xQueueGenericSend+0x9c>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <xQueueGenericSend+0x9e>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <xQueueGenericSend+0xb6>
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e46:	f001 fec9 	bl	8004bdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <xQueueGenericSend+0xcc>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d129      	bne.n	8002eb0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e62:	f000 f9ff 	bl	8003264 <prvCopyDataToQueue>
 8002e66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	3324      	adds	r3, #36	; 0x24
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 ffb3 	bl	8003de0 <xTaskRemoveFromEventList>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <xQueueGenericSend+0x1f0>)
 8002e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	e00a      	b.n	8002ea8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <xQueueGenericSend+0x1f0>)
 8002e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ea8:	f001 fec6 	bl	8004c38 <vPortExitCritical>
				return pdPASS;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e063      	b.n	8002f78 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d103      	bne.n	8002ebe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eb6:	f001 febf 	bl	8004c38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e05c      	b.n	8002f78 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 ffeb 	bl	8003ea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ed2:	f001 feb1 	bl	8004c38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ed6:	f000 fd67 	bl	80039a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eda:	f001 fe7f 	bl	8004bdc <vPortEnterCritical>
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d103      	bne.n	8002ef4 <xQueueGenericSend+0x164>
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d103      	bne.n	8002f0a <xQueueGenericSend+0x17a>
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f0a:	f001 fe95 	bl	8004c38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f0e:	1d3a      	adds	r2, r7, #4
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ffda 	bl	8003ed0 <xTaskCheckForTimeOut>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d124      	bne.n	8002f6c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f24:	f000 fa96 	bl	8003454 <prvIsQueueFull>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d018      	beq.n	8002f60 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	3310      	adds	r3, #16
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ff04 	bl	8003d44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f3e:	f000 fa21 	bl	8003384 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f42:	f000 fd3f 	bl	80039c4 <xTaskResumeAll>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f47f af7c 	bne.w	8002e46 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <xQueueGenericSend+0x1f0>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	e772      	b.n	8002e46 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f62:	f000 fa0f 	bl	8003384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f66:	f000 fd2d 	bl	80039c4 <xTaskResumeAll>
 8002f6a:	e76c      	b.n	8002e46 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6e:	f000 fa09 	bl	8003384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f72:	f000 fd27 	bl	80039c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3738      	adds	r7, #56	; 0x38
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	e000ed04 	.word	0xe000ed04

08002f84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08e      	sub	sp, #56	; 0x38
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <xQueueGenericSendFromISR+0x2c>
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
 8002fae:	e7fe      	b.n	8002fae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <xQueueGenericSendFromISR+0x3a>
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <xQueueGenericSendFromISR+0x3e>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <xQueueGenericSendFromISR+0x40>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <xQueueGenericSendFromISR+0x58>
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	e7fe      	b.n	8002fda <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d103      	bne.n	8002fea <xQueueGenericSendFromISR+0x66>
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <xQueueGenericSendFromISR+0x6a>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <xQueueGenericSendFromISR+0x6c>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <xQueueGenericSendFromISR+0x84>
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e7fe      	b.n	8003006 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003008:	f001 fec4 	bl	8004d94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800300c:	f3ef 8211 	mrs	r2, BASEPRI
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	61ba      	str	r2, [r7, #24]
 8003022:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003024:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <xQueueGenericSendFromISR+0xb6>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d12c      	bne.n	8003094 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304a:	f000 f90b 	bl	8003264 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800304e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d112      	bne.n	800307e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	2b00      	cmp	r3, #0
 800305e:	d016      	beq.n	800308e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	3324      	adds	r3, #36	; 0x24
 8003064:	4618      	mov	r0, r3
 8003066:	f000 febb 	bl	8003de0 <xTaskRemoveFromEventList>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e007      	b.n	800308e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800307e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003082:	3301      	adds	r3, #1
 8003084:	b2db      	uxtb	r3, r3
 8003086:	b25a      	sxtb	r2, r3
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800308e:	2301      	movs	r3, #1
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003092:	e001      	b.n	8003098 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003094:	2300      	movs	r3, #0
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	; 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <xQueueReceive+0x2e>
	__asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	623b      	str	r3, [r7, #32]
 80030d8:	e7fe      	b.n	80030d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <xQueueReceive+0x3c>
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <xQueueReceive+0x40>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <xQueueReceive+0x42>
 80030ec:	2300      	movs	r3, #0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <xQueueReceive+0x5a>
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e7fe      	b.n	8003104 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003106:	f001 f821 	bl	800414c <xTaskGetSchedulerState>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <xQueueReceive+0x6a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <xQueueReceive+0x6e>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <xQueueReceive+0x70>
 800311a:	2300      	movs	r3, #0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <xQueueReceive+0x88>
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e7fe      	b.n	8003132 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003134:	f001 fd52 	bl	8004bdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01f      	beq.n	8003184 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003144:	68b9      	ldr	r1, [r7, #8]
 8003146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003148:	f000 f8f6 	bl	8003338 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00f      	beq.n	800317c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	3310      	adds	r3, #16
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fe3d 	bl	8003de0 <xTaskRemoveFromEventList>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800316c:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <xQueueReceive+0x1b4>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800317c:	f001 fd5c 	bl	8004c38 <vPortExitCritical>
				return pdPASS;
 8003180:	2301      	movs	r3, #1
 8003182:	e069      	b.n	8003258 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800318a:	f001 fd55 	bl	8004c38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800318e:	2300      	movs	r3, #0
 8003190:	e062      	b.n	8003258 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d106      	bne.n	80031a6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003198:	f107 0310 	add.w	r3, r7, #16
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fe81 	bl	8003ea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031a6:	f001 fd47 	bl	8004c38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031aa:	f000 fbfd 	bl	80039a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031ae:	f001 fd15 	bl	8004bdc <vPortEnterCritical>
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b8:	b25b      	sxtb	r3, r3
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d103      	bne.n	80031c8 <xQueueReceive+0x11c>
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d103      	bne.n	80031de <xQueueReceive+0x132>
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031de:	f001 fd2b 	bl	8004c38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031e2:	1d3a      	adds	r2, r7, #4
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fe70 	bl	8003ed0 <xTaskCheckForTimeOut>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d123      	bne.n	800323e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f8:	f000 f916 	bl	8003428 <prvIsQueueEmpty>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d017      	beq.n	8003232 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	3324      	adds	r3, #36	; 0x24
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fd9a 	bl	8003d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003212:	f000 f8b7 	bl	8003384 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003216:	f000 fbd5 	bl	80039c4 <xTaskResumeAll>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d189      	bne.n	8003134 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <xQueueReceive+0x1b4>)
 8003222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	e780      	b.n	8003134 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003234:	f000 f8a6 	bl	8003384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003238:	f000 fbc4 	bl	80039c4 <xTaskResumeAll>
 800323c:	e77a      	b.n	8003134 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800323e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003240:	f000 f8a0 	bl	8003384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003244:	f000 fbbe 	bl	80039c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800324a:	f000 f8ed 	bl	8003428 <prvIsQueueEmpty>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	f43f af6f 	beq.w	8003134 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003256:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003258:	4618      	mov	r0, r3
 800325a:	3730      	adds	r7, #48	; 0x30
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	e000ed04 	.word	0xe000ed04

08003264 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d14d      	bne.n	8003326 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 ff7a 	bl	8004188 <xTaskPriorityDisinherit>
 8003294:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	e043      	b.n	8003326 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d119      	bne.n	80032d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6858      	ldr	r0, [r3, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	461a      	mov	r2, r3
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	f001 ffa8 	bl	8005204 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	441a      	add	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d32b      	bcc.n	8003326 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	e026      	b.n	8003326 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	68d8      	ldr	r0, [r3, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	461a      	mov	r2, r3
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	f001 ff8e 	bl	8005204 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	425b      	negs	r3, r3
 80032f2:	441a      	add	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d207      	bcs.n	8003314 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	425b      	negs	r3, r3
 800330e:	441a      	add	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d105      	bne.n	8003326 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	3b01      	subs	r3, #1
 8003324:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800332e:	697b      	ldr	r3, [r7, #20]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	d303      	bcc.n	800336c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68d9      	ldr	r1, [r3, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	461a      	mov	r2, r3
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	f001 ff44 	bl	8005204 <memcpy>
	}
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800338c:	f001 fc26 	bl	8004bdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003396:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003398:	e011      	b.n	80033be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3324      	adds	r3, #36	; 0x24
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fd1a 	bl	8003de0 <xTaskRemoveFromEventList>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033b2:	f000 fded 	bl	8003f90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	dce9      	bgt.n	800339a <prvUnlockQueue+0x16>
 80033c6:	e000      	b.n	80033ca <prvUnlockQueue+0x46>
					break;
 80033c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	22ff      	movs	r2, #255	; 0xff
 80033ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033d2:	f001 fc31 	bl	8004c38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033d6:	f001 fc01 	bl	8004bdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033e2:	e011      	b.n	8003408 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3310      	adds	r3, #16
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fcf5 	bl	8003de0 <xTaskRemoveFromEventList>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033fc:	f000 fdc8 	bl	8003f90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	3b01      	subs	r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800340c:	2b00      	cmp	r3, #0
 800340e:	dce9      	bgt.n	80033e4 <prvUnlockQueue+0x60>
 8003410:	e000      	b.n	8003414 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003412:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	22ff      	movs	r2, #255	; 0xff
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800341c:	f001 fc0c 	bl	8004c38 <vPortExitCritical>
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003430:	f001 fbd4 	bl	8004bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800343c:	2301      	movs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e001      	b.n	8003446 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003446:	f001 fbf7 	bl	8004c38 <vPortExitCritical>

	return xReturn;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800345c:	f001 fbbe 	bl	8004bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	429a      	cmp	r2, r3
 800346a:	d102      	bne.n	8003472 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e001      	b.n	8003476 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003476:	f001 fbdf 	bl	8004c38 <vPortExitCritical>

	return xReturn;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e014      	b.n	80034be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003494:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <vQueueAddToRegistry+0x4c>)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034a0:	490b      	ldr	r1, [pc, #44]	; (80034d0 <vQueueAddToRegistry+0x4c>)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <vQueueAddToRegistry+0x4c>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034b6:	e005      	b.n	80034c4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3301      	adds	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b07      	cmp	r3, #7
 80034c2:	d9e7      	bls.n	8003494 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	200049cc 	.word	0x200049cc

080034d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034e4:	f001 fb7a 	bl	8004bdc <vPortEnterCritical>
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ee:	b25b      	sxtb	r3, r3
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d103      	bne.n	80034fe <vQueueWaitForMessageRestricted+0x2a>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003504:	b25b      	sxtb	r3, r3
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d103      	bne.n	8003514 <vQueueWaitForMessageRestricted+0x40>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003514:	f001 fb90 	bl	8004c38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3324      	adds	r3, #36	; 0x24
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fc2f 	bl	8003d8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800352e:	6978      	ldr	r0, [r7, #20]
 8003530:	f7ff ff28 	bl	8003384 <prvUnlockQueue>
	}
 8003534:	bf00      	nop
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08e      	sub	sp, #56	; 0x38
 8003540:	af04      	add	r7, sp, #16
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800354a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <xTaskCreateStatic+0x28>
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	623b      	str	r3, [r7, #32]
 8003562:	e7fe      	b.n	8003562 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <xTaskCreateStatic+0x42>
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	e7fe      	b.n	800357c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800357e:	235c      	movs	r3, #92	; 0x5c
 8003580:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b5c      	cmp	r3, #92	; 0x5c
 8003586:	d009      	beq.n	800359c <xTaskCreateStatic+0x60>
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e7fe      	b.n	800359a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800359c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01e      	beq.n	80035e2 <xTaskCreateStatic+0xa6>
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01b      	beq.n	80035e2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035bc:	2300      	movs	r3, #0
 80035be:	9303      	str	r3, [sp, #12]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f850 	bl	800367a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035dc:	f000 f8dc 	bl	8003798 <prvAddNewTaskToReadyList>
 80035e0:	e001      	b.n	80035e6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035e6:	697b      	ldr	r3, [r7, #20]
	}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3728      	adds	r7, #40	; 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08c      	sub	sp, #48	; 0x30
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4618      	mov	r0, r3
 8003606:	f001 fc03 	bl	8004e10 <pvPortMalloc>
 800360a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003612:	205c      	movs	r0, #92	; 0x5c
 8003614:	f001 fbfc 	bl	8004e10 <pvPortMalloc>
 8003618:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
 8003626:	e005      	b.n	8003634 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003628:	6978      	ldr	r0, [r7, #20]
 800362a:	f001 fcb3 	bl	8004f94 <vPortFree>
 800362e:	e001      	b.n	8003634 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d017      	beq.n	800366a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	2300      	movs	r3, #0
 8003646:	9303      	str	r3, [sp, #12]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	9302      	str	r3, [sp, #8]
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f80e 	bl	800367a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800365e:	69f8      	ldr	r0, [r7, #28]
 8003660:	f000 f89a 	bl	8003798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003664:	2301      	movs	r3, #1
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e002      	b.n	8003670 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003670:	69bb      	ldr	r3, [r7, #24]
	}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b088      	sub	sp, #32
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	21a5      	movs	r1, #165	; 0xa5
 8003694:	f001 fdc1 	bl	800521a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036a2:	3b01      	subs	r3, #1
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f023 0307 	bic.w	r3, r3, #7
 80036b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <prvInitialiseNewTask+0x56>
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	e7fe      	b.n	80036ce <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01f      	beq.n	8003716 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e012      	b.n	8003702 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	7819      	ldrb	r1, [r3, #0]
 80036e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	3334      	adds	r3, #52	; 0x34
 80036ec:	460a      	mov	r2, r1
 80036ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d006      	beq.n	800370a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	3301      	adds	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b0f      	cmp	r3, #15
 8003706:	d9e9      	bls.n	80036dc <prvInitialiseNewTask+0x62>
 8003708:	e000      	b.n	800370c <prvInitialiseNewTask+0x92>
			{
				break;
 800370a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003714:	e003      	b.n	800371e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	2b37      	cmp	r3, #55	; 0x37
 8003722:	d901      	bls.n	8003728 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003724:	2337      	movs	r3, #55	; 0x37
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003732:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	2200      	movs	r2, #0
 8003738:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	3304      	adds	r3, #4
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f994 	bl	8002a6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	3318      	adds	r3, #24
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f98f 	bl	8002a6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	2200      	movs	r2, #0
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	68f9      	ldr	r1, [r7, #12]
 8003776:	69b8      	ldr	r0, [r7, #24]
 8003778:	f001 f90c 	bl	8004994 <pxPortInitialiseStack>
 800377c:	4602      	mov	r2, r0
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800378e:	bf00      	nop
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037a0:	f001 fa1c 	bl	8004bdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037a4:	4b2d      	ldr	r3, [pc, #180]	; (800385c <prvAddNewTaskToReadyList+0xc4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	4a2c      	ldr	r2, [pc, #176]	; (800385c <prvAddNewTaskToReadyList+0xc4>)
 80037ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037ae:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <prvAddNewTaskToReadyList+0xc8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037b6:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <prvAddNewTaskToReadyList+0xc8>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <prvAddNewTaskToReadyList+0xc4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d110      	bne.n	80037e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037c4:	f000 fc08 	bl	8003fd8 <prvInitialiseTaskLists>
 80037c8:	e00d      	b.n	80037e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <prvAddNewTaskToReadyList+0xcc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037d2:	4b23      	ldr	r3, [pc, #140]	; (8003860 <prvAddNewTaskToReadyList+0xc8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	429a      	cmp	r2, r3
 80037de:	d802      	bhi.n	80037e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037e0:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <prvAddNewTaskToReadyList+0xc8>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037e6:	4b20      	ldr	r3, [pc, #128]	; (8003868 <prvAddNewTaskToReadyList+0xd0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <prvAddNewTaskToReadyList+0xd0>)
 80037ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <prvAddNewTaskToReadyList+0xd0>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <prvAddNewTaskToReadyList+0xd4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d903      	bls.n	800380c <prvAddNewTaskToReadyList+0x74>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	4a18      	ldr	r2, [pc, #96]	; (800386c <prvAddNewTaskToReadyList+0xd4>)
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <prvAddNewTaskToReadyList+0xd8>)
 800381a:	441a      	add	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f7ff f92f 	bl	8002a86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003828:	f001 fa06 	bl	8004c38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800382c:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <prvAddNewTaskToReadyList+0xcc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <prvAddNewTaskToReadyList+0xc8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	429a      	cmp	r2, r3
 8003840:	d207      	bcs.n	8003852 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <prvAddNewTaskToReadyList+0xdc>)
 8003844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000bc4 	.word	0x20000bc4
 8003860:	200006f0 	.word	0x200006f0
 8003864:	20000bd0 	.word	0x20000bd0
 8003868:	20000be0 	.word	0x20000be0
 800386c:	20000bcc 	.word	0x20000bcc
 8003870:	200006f4 	.word	0x200006f4
 8003874:	e000ed04 	.word	0xe000ed04

08003878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <vTaskDelay+0x60>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <vTaskDelay+0x2e>
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	e7fe      	b.n	80038a4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80038a6:	f000 f87f 	bl	80039a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038aa:	2100      	movs	r1, #0
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fcd7 	bl	8004260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038b2:	f000 f887 	bl	80039c4 <xTaskResumeAll>
 80038b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <vTaskDelay+0x64>)
 80038c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000bec 	.word	0x20000bec
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038ee:	463a      	mov	r2, r7
 80038f0:	1d39      	adds	r1, r7, #4
 80038f2:	f107 0308 	add.w	r3, r7, #8
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff f864 	bl	80029c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	9202      	str	r2, [sp, #8]
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	460a      	mov	r2, r1
 800390e:	4920      	ldr	r1, [pc, #128]	; (8003990 <vTaskStartScheduler+0xb0>)
 8003910:	4820      	ldr	r0, [pc, #128]	; (8003994 <vTaskStartScheduler+0xb4>)
 8003912:	f7ff fe13 	bl	800353c <xTaskCreateStatic>
 8003916:	4602      	mov	r2, r0
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <vTaskStartScheduler+0xb8>)
 800391a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800391c:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <vTaskStartScheduler+0xb8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003924:	2301      	movs	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	e001      	b.n	800392e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003934:	f000 fce8 	bl	8004308 <xTimerCreateTimerTask>
 8003938:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d115      	bne.n	800396c <vTaskStartScheduler+0x8c>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <vTaskStartScheduler+0xbc>)
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800395a:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <vTaskStartScheduler+0xc0>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <vTaskStartScheduler+0xc4>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003966:	f001 f89b 	bl	8004aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800396a:	e00d      	b.n	8003988 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d109      	bne.n	8003988 <vTaskStartScheduler+0xa8>
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e7fe      	b.n	8003986 <vTaskStartScheduler+0xa6>
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	08005264 	.word	0x08005264
 8003994:	08003fa9 	.word	0x08003fa9
 8003998:	20000be8 	.word	0x20000be8
 800399c:	20000be4 	.word	0x20000be4
 80039a0:	20000bd0 	.word	0x20000bd0
 80039a4:	20000bc8 	.word	0x20000bc8

080039a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <vTaskSuspendAll+0x18>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a03      	ldr	r2, [pc, #12]	; (80039c0 <vTaskSuspendAll+0x18>)
 80039b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80039b6:	bf00      	nop
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	20000bec 	.word	0x20000bec

080039c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039d2:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <xTaskResumeAll+0x114>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <xTaskResumeAll+0x2a>
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	e7fe      	b.n	80039ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039ee:	f001 f8f5 	bl	8004bdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039f2:	4b39      	ldr	r3, [pc, #228]	; (8003ad8 <xTaskResumeAll+0x114>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	4a37      	ldr	r2, [pc, #220]	; (8003ad8 <xTaskResumeAll+0x114>)
 80039fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fc:	4b36      	ldr	r3, [pc, #216]	; (8003ad8 <xTaskResumeAll+0x114>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d162      	bne.n	8003aca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <xTaskResumeAll+0x118>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d05e      	beq.n	8003aca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a0c:	e02f      	b.n	8003a6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <xTaskResumeAll+0x11c>)
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3318      	adds	r3, #24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff f890 	bl	8002b40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff f88b 	bl	8002b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <xTaskResumeAll+0x120>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d903      	bls.n	8003a3e <xTaskResumeAll+0x7a>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ae4 <xTaskResumeAll+0x120>)
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <xTaskResumeAll+0x124>)
 8003a4c:	441a      	add	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f7ff f816 	bl	8002a86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <xTaskResumeAll+0x128>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d302      	bcc.n	8003a6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <xTaskResumeAll+0x12c>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <xTaskResumeAll+0x11c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1cb      	bne.n	8003a0e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a7c:	f000 fb46 	bl	800410c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <xTaskResumeAll+0x130>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a8c:	f000 f846 	bl	8003b1c <xTaskIncrementTick>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003a96:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <xTaskResumeAll+0x12c>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f1      	bne.n	8003a8c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003aa8:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <xTaskResumeAll+0x130>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <xTaskResumeAll+0x12c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003aba:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <xTaskResumeAll+0x134>)
 8003abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003aca:	f001 f8b5 	bl	8004c38 <vPortExitCritical>

	return xAlreadyYielded;
 8003ace:	68bb      	ldr	r3, [r7, #8]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000bec 	.word	0x20000bec
 8003adc:	20000bc4 	.word	0x20000bc4
 8003ae0:	20000b84 	.word	0x20000b84
 8003ae4:	20000bcc 	.word	0x20000bcc
 8003ae8:	200006f4 	.word	0x200006f4
 8003aec:	200006f0 	.word	0x200006f0
 8003af0:	20000bd8 	.word	0x20000bd8
 8003af4:	20000bd4 	.word	0x20000bd4
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <xTaskGetTickCount+0x1c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b08:	687b      	ldr	r3, [r7, #4]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000bc8 	.word	0x20000bc8

08003b1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b26:	4b4e      	ldr	r3, [pc, #312]	; (8003c60 <xTaskIncrementTick+0x144>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 8088 	bne.w	8003c40 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b30:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <xTaskIncrementTick+0x148>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b38:	4a4a      	ldr	r2, [pc, #296]	; (8003c64 <xTaskIncrementTick+0x148>)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d11f      	bne.n	8003b84 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b44:	4b48      	ldr	r3, [pc, #288]	; (8003c68 <xTaskIncrementTick+0x14c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <xTaskIncrementTick+0x46>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	e7fe      	b.n	8003b60 <xTaskIncrementTick+0x44>
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <xTaskIncrementTick+0x14c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	4b40      	ldr	r3, [pc, #256]	; (8003c6c <xTaskIncrementTick+0x150>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3e      	ldr	r2, [pc, #248]	; (8003c68 <xTaskIncrementTick+0x14c>)
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4a3e      	ldr	r2, [pc, #248]	; (8003c6c <xTaskIncrementTick+0x150>)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b3e      	ldr	r3, [pc, #248]	; (8003c70 <xTaskIncrementTick+0x154>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <xTaskIncrementTick+0x154>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	f000 fac4 	bl	800410c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b84:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <xTaskIncrementTick+0x158>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d349      	bcc.n	8003c22 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <xTaskIncrementTick+0x14c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b98:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <xTaskIncrementTick+0x158>)
 8003b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9e:	601a      	str	r2, [r3, #0]
					break;
 8003ba0:	e03f      	b.n	8003c22 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <xTaskIncrementTick+0x14c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d203      	bcs.n	8003bc2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bba:	4a2e      	ldr	r2, [pc, #184]	; (8003c74 <xTaskIncrementTick+0x158>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bc0:	e02f      	b.n	8003c22 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe ffba 	bl	8002b40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	3318      	adds	r3, #24
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe ffb1 	bl	8002b40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <xTaskIncrementTick+0x15c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d903      	bls.n	8003bf2 <xTaskIncrementTick+0xd6>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <xTaskIncrementTick+0x15c>)
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <xTaskIncrementTick+0x160>)
 8003c00:	441a      	add	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7fe ff3c 	bl	8002a86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <xTaskIncrementTick+0x164>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d3b8      	bcc.n	8003b8e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c20:	e7b5      	b.n	8003b8e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c22:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <xTaskIncrementTick+0x164>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4914      	ldr	r1, [pc, #80]	; (8003c7c <xTaskIncrementTick+0x160>)
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d907      	bls.n	8003c4a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e004      	b.n	8003c4a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <xTaskIncrementTick+0x168>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <xTaskIncrementTick+0x168>)
 8003c48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <xTaskIncrementTick+0x16c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c56:	697b      	ldr	r3, [r7, #20]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000bec 	.word	0x20000bec
 8003c64:	20000bc8 	.word	0x20000bc8
 8003c68:	20000b7c 	.word	0x20000b7c
 8003c6c:	20000b80 	.word	0x20000b80
 8003c70:	20000bdc 	.word	0x20000bdc
 8003c74:	20000be4 	.word	0x20000be4
 8003c78:	20000bcc 	.word	0x20000bcc
 8003c7c:	200006f4 	.word	0x200006f4
 8003c80:	200006f0 	.word	0x200006f0
 8003c84:	20000bd4 	.word	0x20000bd4
 8003c88:	20000bd8 	.word	0x20000bd8

08003c8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c92:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <vTaskSwitchContext+0xa4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <vTaskSwitchContext+0xa8>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ca0:	e040      	b.n	8003d24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003ca2:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <vTaskSwitchContext+0xa8>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <vTaskSwitchContext+0xac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e00f      	b.n	8003cd0 <vTaskSwitchContext+0x44>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <vTaskSwitchContext+0x3e>
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	607b      	str	r3, [r7, #4]
 8003cc8:	e7fe      	b.n	8003cc8 <vTaskSwitchContext+0x3c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	491a      	ldr	r1, [pc, #104]	; (8003d3c <vTaskSwitchContext+0xb0>)
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0e5      	beq.n	8003cb0 <vTaskSwitchContext+0x24>
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <vTaskSwitchContext+0xb0>)
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3308      	adds	r3, #8
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d104      	bne.n	8003d14 <vTaskSwitchContext+0x88>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <vTaskSwitchContext+0xb4>)
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <vTaskSwitchContext+0xac>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6013      	str	r3, [r2, #0]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	20000bec 	.word	0x20000bec
 8003d34:	20000bd8 	.word	0x20000bd8
 8003d38:	20000bcc 	.word	0x20000bcc
 8003d3c:	200006f4 	.word	0x200006f4
 8003d40:	200006f0 	.word	0x200006f0

08003d44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <vTaskPlaceOnEventList+0x24>
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	e7fe      	b.n	8003d66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <vTaskPlaceOnEventList+0x44>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3318      	adds	r3, #24
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fe feac 	bl	8002ace <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d76:	2101      	movs	r1, #1
 8003d78:	6838      	ldr	r0, [r7, #0]
 8003d7a:	f000 fa71 	bl	8004260 <prvAddCurrentTaskToDelayedList>
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200006f0 	.word	0x200006f0

08003d8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <vTaskPlaceOnEventListRestricted+0x26>
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e7fe      	b.n	8003db0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <vTaskPlaceOnEventListRestricted+0x50>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3318      	adds	r3, #24
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fe fe63 	bl	8002a86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	68b8      	ldr	r0, [r7, #8]
 8003dd0:	f000 fa46 	bl	8004260 <prvAddCurrentTaskToDelayedList>
	}
 8003dd4:	bf00      	nop
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200006f0 	.word	0x200006f0

08003de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <xTaskRemoveFromEventList+0x2a>
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e7fe      	b.n	8003e08 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fe96 	bl	8002b40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <xTaskRemoveFromEventList+0xac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11d      	bne.n	8003e58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fe8d 	bl	8002b40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <xTaskRemoveFromEventList+0xb0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d903      	bls.n	8003e3a <xTaskRemoveFromEventList+0x5a>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <xTaskRemoveFromEventList+0xb0>)
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <xTaskRemoveFromEventList+0xb4>)
 8003e48:	441a      	add	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f7fe fe18 	bl	8002a86 <vListInsertEnd>
 8003e56:	e005      	b.n	8003e64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	480e      	ldr	r0, [pc, #56]	; (8003e98 <xTaskRemoveFromEventList+0xb8>)
 8003e60:	f7fe fe11 	bl	8002a86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <xTaskRemoveFromEventList+0xbc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d905      	bls.n	8003e7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e72:	2301      	movs	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <xTaskRemoveFromEventList+0xc0>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e001      	b.n	8003e82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e82:	697b      	ldr	r3, [r7, #20]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000bec 	.word	0x20000bec
 8003e90:	20000bcc 	.word	0x20000bcc
 8003e94:	200006f4 	.word	0x200006f4
 8003e98:	20000b84 	.word	0x20000b84
 8003e9c:	200006f0 	.word	0x200006f0
 8003ea0:	20000bd8 	.word	0x20000bd8

08003ea4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <vTaskInternalSetTimeOutState+0x24>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <vTaskInternalSetTimeOutState+0x28>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20000bdc 	.word	0x20000bdc
 8003ecc:	20000bc8 	.word	0x20000bc8

08003ed0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <xTaskCheckForTimeOut+0x24>
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e7fe      	b.n	8003ef2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <xTaskCheckForTimeOut+0x3e>
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e7fe      	b.n	8003f0c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003f0e:	f000 fe65 	bl	8004bdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <xTaskCheckForTimeOut+0xb8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d102      	bne.n	8003f32 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	e023      	b.n	8003f7a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <xTaskCheckForTimeOut+0xbc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d007      	beq.n	8003f4e <xTaskCheckForTimeOut+0x7e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e015      	b.n	8003f7a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d20b      	bcs.n	8003f70 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	1ad2      	subs	r2, r2, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff9d 	bl	8003ea4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e004      	b.n	8003f7a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f7a:	f000 fe5d 	bl	8004c38 <vPortExitCritical>

	return xReturn;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000bc8 	.word	0x20000bc8
 8003f8c:	20000bdc 	.word	0x20000bdc

08003f90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <vTaskMissedYield+0x14>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20000bd8 	.word	0x20000bd8

08003fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fb0:	f000 f852 	bl	8004058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <prvIdleTask+0x28>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d9f9      	bls.n	8003fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <prvIdleTask+0x2c>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fcc:	e7f0      	b.n	8003fb0 <prvIdleTask+0x8>
 8003fce:	bf00      	nop
 8003fd0:	200006f4 	.word	0x200006f4
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	e00c      	b.n	8003ffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4a12      	ldr	r2, [pc, #72]	; (8004038 <prvInitialiseTaskLists+0x60>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe fd1a 	bl	8002a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b37      	cmp	r3, #55	; 0x37
 8004002:	d9ef      	bls.n	8003fe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004004:	480d      	ldr	r0, [pc, #52]	; (800403c <prvInitialiseTaskLists+0x64>)
 8004006:	f7fe fd11 	bl	8002a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800400a:	480d      	ldr	r0, [pc, #52]	; (8004040 <prvInitialiseTaskLists+0x68>)
 800400c:	f7fe fd0e 	bl	8002a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004010:	480c      	ldr	r0, [pc, #48]	; (8004044 <prvInitialiseTaskLists+0x6c>)
 8004012:	f7fe fd0b 	bl	8002a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004016:	480c      	ldr	r0, [pc, #48]	; (8004048 <prvInitialiseTaskLists+0x70>)
 8004018:	f7fe fd08 	bl	8002a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800401c:	480b      	ldr	r0, [pc, #44]	; (800404c <prvInitialiseTaskLists+0x74>)
 800401e:	f7fe fd05 	bl	8002a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <prvInitialiseTaskLists+0x78>)
 8004024:	4a05      	ldr	r2, [pc, #20]	; (800403c <prvInitialiseTaskLists+0x64>)
 8004026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <prvInitialiseTaskLists+0x7c>)
 800402a:	4a05      	ldr	r2, [pc, #20]	; (8004040 <prvInitialiseTaskLists+0x68>)
 800402c:	601a      	str	r2, [r3, #0]
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	200006f4 	.word	0x200006f4
 800403c:	20000b54 	.word	0x20000b54
 8004040:	20000b68 	.word	0x20000b68
 8004044:	20000b84 	.word	0x20000b84
 8004048:	20000b98 	.word	0x20000b98
 800404c:	20000bb0 	.word	0x20000bb0
 8004050:	20000b7c 	.word	0x20000b7c
 8004054:	20000b80 	.word	0x20000b80

08004058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800405e:	e019      	b.n	8004094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004060:	f000 fdbc 	bl	8004bdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <prvCheckTasksWaitingTermination+0x4c>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe fd65 	bl	8002b40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <prvCheckTasksWaitingTermination+0x50>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3b01      	subs	r3, #1
 800407c:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <prvCheckTasksWaitingTermination+0x50>)
 800407e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <prvCheckTasksWaitingTermination+0x54>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3b01      	subs	r3, #1
 8004086:	4a09      	ldr	r2, [pc, #36]	; (80040ac <prvCheckTasksWaitingTermination+0x54>)
 8004088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800408a:	f000 fdd5 	bl	8004c38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f80e 	bl	80040b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <prvCheckTasksWaitingTermination+0x54>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e1      	bne.n	8004060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000b98 	.word	0x20000b98
 80040a8:	20000bc4 	.word	0x20000bc4
 80040ac:	20000bac 	.word	0x20000bac

080040b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 ff64 	bl	8004f94 <vPortFree>
				vPortFree( pxTCB );
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 ff61 	bl	8004f94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040d2:	e017      	b.n	8004104 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d103      	bne.n	80040e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 ff58 	bl	8004f94 <vPortFree>
	}
 80040e4:	e00e      	b.n	8004104 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d009      	beq.n	8004104 <prvDeleteTCB+0x54>
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e7fe      	b.n	8004102 <prvDeleteTCB+0x52>
	}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <prvResetNextTaskUnblockTime+0x38>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <prvResetNextTaskUnblockTime+0x3c>)
 800411e:	f04f 32ff 	mov.w	r2, #4294967295
 8004122:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004124:	e008      	b.n	8004138 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <prvResetNextTaskUnblockTime+0x38>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <prvResetNextTaskUnblockTime+0x3c>)
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	20000b7c 	.word	0x20000b7c
 8004148:	20000be4 	.word	0x20000be4

0800414c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <xTaskGetSchedulerState+0x34>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800415a:	2301      	movs	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e008      	b.n	8004172 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <xTaskGetSchedulerState+0x38>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004168:	2302      	movs	r3, #2
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e001      	b.n	8004172 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004172:	687b      	ldr	r3, [r7, #4]
	}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	20000bd0 	.word	0x20000bd0
 8004184:	20000bec 	.word	0x20000bec

08004188 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d054      	beq.n	8004248 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800419e:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <xTaskPriorityDisinherit+0xcc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d009      	beq.n	80041bc <xTaskPriorityDisinherit+0x34>
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e7fe      	b.n	80041ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <xTaskPriorityDisinherit+0x50>
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	e7fe      	b.n	80041d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041dc:	1e5a      	subs	r2, r3, #1
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d02c      	beq.n	8004248 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d128      	bne.n	8004248 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fca0 	bl	8002b40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <xTaskPriorityDisinherit+0xd0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d903      	bls.n	8004228 <xTaskPriorityDisinherit+0xa0>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <xTaskPriorityDisinherit+0xd0>)
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <xTaskPriorityDisinherit+0xd4>)
 8004236:	441a      	add	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f7fe fc21 	bl	8002a86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004248:	697b      	ldr	r3, [r7, #20]
	}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200006f0 	.word	0x200006f0
 8004258:	20000bcc 	.word	0x20000bcc
 800425c:	200006f4 	.word	0x200006f4

08004260 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800426a:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004270:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3304      	adds	r3, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fc62 	bl	8002b40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d10a      	bne.n	800429a <prvAddCurrentTaskToDelayedList+0x3a>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800428a:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4819      	ldr	r0, [pc, #100]	; (80042f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004294:	f7fe fbf7 	bl	8002a86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004298:	e026      	b.n	80042e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d209      	bcs.n	80042c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fc05 	bl	8002ace <vListInsert>
}
 80042c4:	e010      	b.n	80042e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f7fe fbfb 	bl	8002ace <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d202      	bcs.n	80042e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6013      	str	r3, [r2, #0]
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000bc8 	.word	0x20000bc8
 80042f4:	200006f0 	.word	0x200006f0
 80042f8:	20000bb0 	.word	0x20000bb0
 80042fc:	20000b80 	.word	0x20000b80
 8004300:	20000b7c 	.word	0x20000b7c
 8004304:	20000be4 	.word	0x20000be4

08004308 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004312:	f000 faff 	bl	8004914 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004316:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <xTimerCreateTimerTask+0x80>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d021      	beq.n	8004362 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004326:	1d3a      	adds	r2, r7, #4
 8004328:	f107 0108 	add.w	r1, r7, #8
 800432c:	f107 030c 	add.w	r3, r7, #12
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe fb61 	bl	80029f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	9202      	str	r2, [sp, #8]
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	2302      	movs	r3, #2
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	2300      	movs	r3, #0
 8004346:	460a      	mov	r2, r1
 8004348:	4910      	ldr	r1, [pc, #64]	; (800438c <xTimerCreateTimerTask+0x84>)
 800434a:	4811      	ldr	r0, [pc, #68]	; (8004390 <xTimerCreateTimerTask+0x88>)
 800434c:	f7ff f8f6 	bl	800353c <xTaskCreateStatic>
 8004350:	4602      	mov	r2, r0
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <xTimerCreateTimerTask+0x8c>)
 8004354:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <xTimerCreateTimerTask+0x8c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800435e:	2301      	movs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d109      	bne.n	800437c <xTimerCreateTimerTask+0x74>
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e7fe      	b.n	800437a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800437c:	697b      	ldr	r3, [r7, #20]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000c20 	.word	0x20000c20
 800438c:	0800526c 	.word	0x0800526c
 8004390:	080044c9 	.word	0x080044c9
 8004394:	20000c24 	.word	0x20000c24

08004398 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d109      	bne.n	80043c4 <xTimerGenericCommand+0x2c>
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	e7fe      	b.n	80043c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <xTimerGenericCommand+0x94>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02a      	beq.n	8004422 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b05      	cmp	r3, #5
 80043dc:	dc18      	bgt.n	8004410 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043de:	f7ff feb5 	bl	800414c <xTaskGetSchedulerState>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d109      	bne.n	80043fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043e8:	4b10      	ldr	r3, [pc, #64]	; (800442c <xTimerGenericCommand+0x94>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	f107 0110 	add.w	r1, r7, #16
 80043f0:	2300      	movs	r3, #0
 80043f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f4:	f7fe fccc 	bl	8002d90 <xQueueGenericSend>
 80043f8:	6278      	str	r0, [r7, #36]	; 0x24
 80043fa:	e012      	b.n	8004422 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043fc:	4b0b      	ldr	r3, [pc, #44]	; (800442c <xTimerGenericCommand+0x94>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	f107 0110 	add.w	r1, r7, #16
 8004404:	2300      	movs	r3, #0
 8004406:	2200      	movs	r2, #0
 8004408:	f7fe fcc2 	bl	8002d90 <xQueueGenericSend>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24
 800440e:	e008      	b.n	8004422 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <xTimerGenericCommand+0x94>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	f107 0110 	add.w	r1, r7, #16
 8004418:	2300      	movs	r3, #0
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	f7fe fdb2 	bl	8002f84 <xQueueGenericSendFromISR>
 8004420:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	; 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000c20 	.word	0x20000c20

08004430 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443a:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <prvProcessExpiredTimer+0x94>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	3304      	adds	r3, #4
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fb79 	bl	8002b40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d021      	beq.n	80044a0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	699a      	ldr	r2, [r3, #24]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	18d1      	adds	r1, r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	6978      	ldr	r0, [r7, #20]
 800446a:	f000 f8d1 	bl	8004610 <prvInsertTimerInActiveList>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01e      	beq.n	80044b2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004474:	2300      	movs	r3, #0
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2300      	movs	r3, #0
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	2100      	movs	r1, #0
 800447e:	6978      	ldr	r0, [r7, #20]
 8004480:	f7ff ff8a 	bl	8004398 <xTimerGenericCommand>
 8004484:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d112      	bne.n	80044b2 <prvProcessExpiredTimer+0x82>
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	e7fe      	b.n	800449e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	4798      	blx	r3
}
 80044ba:	bf00      	nop
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000c18 	.word	0x20000c18

080044c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044d0:	f107 0308 	add.w	r3, r7, #8
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f857 	bl	8004588 <prvGetNextExpireTime>
 80044da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4619      	mov	r1, r3
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f803 	bl	80044ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044e6:	f000 f8d5 	bl	8004694 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044ea:	e7f1      	b.n	80044d0 <prvTimerTask+0x8>

080044ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044f6:	f7ff fa57 	bl	80039a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f866 	bl	80045d0 <prvSampleTimeNow>
 8004504:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d130      	bne.n	800456e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <prvProcessTimerOrBlockTask+0x3c>
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	429a      	cmp	r2, r3
 8004518:	d806      	bhi.n	8004528 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800451a:	f7ff fa53 	bl	80039c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff85 	bl	8004430 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004526:	e024      	b.n	8004572 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <prvProcessTimerOrBlockTask+0x90>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <prvProcessTimerOrBlockTask+0x50>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <prvProcessTimerOrBlockTask+0x52>
 800453c:	2300      	movs	r3, #0
 800453e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <prvProcessTimerOrBlockTask+0x94>)
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	4619      	mov	r1, r3
 800454e:	f7fe ffc1 	bl	80034d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004552:	f7ff fa37 	bl	80039c4 <xTaskResumeAll>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <prvProcessTimerOrBlockTask+0x98>)
 800455e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	f3bf 8f6f 	isb	sy
}
 800456c:	e001      	b.n	8004572 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800456e:	f7ff fa29 	bl	80039c4 <xTaskResumeAll>
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000c1c 	.word	0x20000c1c
 8004580:	20000c20 	.word	0x20000c20
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004590:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <prvGetNextExpireTime+0x44>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <prvGetNextExpireTime+0x16>
 800459a:	2201      	movs	r2, #1
 800459c:	e000      	b.n	80045a0 <prvGetNextExpireTime+0x18>
 800459e:	2200      	movs	r2, #0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <prvGetNextExpireTime+0x44>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e001      	b.n	80045bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045bc:	68fb      	ldr	r3, [r7, #12]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000c18 	.word	0x20000c18

080045d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045d8:	f7ff fa90 	bl	8003afc <xTaskGetTickCount>
 80045dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045de:	4b0b      	ldr	r3, [pc, #44]	; (800460c <prvSampleTimeNow+0x3c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d205      	bcs.n	80045f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045e8:	f000 f930 	bl	800484c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	e002      	b.n	80045fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045fa:	4a04      	ldr	r2, [pc, #16]	; (800460c <prvSampleTimeNow+0x3c>)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004600:	68fb      	ldr	r3, [r7, #12]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000c28 	.word	0x20000c28

08004610 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	429a      	cmp	r2, r3
 8004634:	d812      	bhi.n	800465c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	1ad2      	subs	r2, r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	429a      	cmp	r2, r3
 8004642:	d302      	bcc.n	800464a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e01b      	b.n	8004682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800464a:	4b10      	ldr	r3, [pc, #64]	; (800468c <prvInsertTimerInActiveList+0x7c>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7fe fa3a 	bl	8002ace <vListInsert>
 800465a:	e012      	b.n	8004682 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d206      	bcs.n	8004672 <prvInsertTimerInActiveList+0x62>
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e007      	b.n	8004682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <prvInsertTimerInActiveList+0x80>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3304      	adds	r3, #4
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f7fe fa26 	bl	8002ace <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004682:	697b      	ldr	r3, [r7, #20]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000c1c 	.word	0x20000c1c
 8004690:	20000c18 	.word	0x20000c18

08004694 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08e      	sub	sp, #56	; 0x38
 8004698:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800469a:	e0c6      	b.n	800482a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da17      	bge.n	80046d2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80046a2:	1d3b      	adds	r3, r7, #4
 80046a4:	3304      	adds	r3, #4
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <prvProcessReceivedCommands+0x2e>
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e7fe      	b.n	80046c0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c8:	6850      	ldr	r0, [r2, #4]
 80046ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046cc:	6892      	ldr	r2, [r2, #8]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f2c0 80a7 	blt.w	8004828 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d004      	beq.n	80046f0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fa28 	bl	8002b40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046f0:	463b      	mov	r3, r7
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff ff6c 	bl	80045d0 <prvSampleTimeNow>
 80046f8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b09      	cmp	r3, #9
 80046fe:	f200 8094 	bhi.w	800482a <prvProcessReceivedCommands+0x196>
 8004702:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <prvProcessReceivedCommands+0x74>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004731 	.word	0x08004731
 800470c:	08004731 	.word	0x08004731
 8004710:	08004731 	.word	0x08004731
 8004714:	080047a3 	.word	0x080047a3
 8004718:	080047b7 	.word	0x080047b7
 800471c:	080047ff 	.word	0x080047ff
 8004720:	08004731 	.word	0x08004731
 8004724:	08004731 	.word	0x08004731
 8004728:	080047a3 	.word	0x080047a3
 800472c:	080047b7 	.word	0x080047b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	18d1      	adds	r1, r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004750:	f7ff ff5e 	bl	8004610 <prvInsertTimerInActiveList>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d067      	beq.n	800482a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004760:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d05c      	beq.n	800482a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	441a      	add	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	2100      	movs	r1, #0
 8004780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004782:	f7ff fe09 	bl	8004398 <xTimerGenericCommand>
 8004786:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d14d      	bne.n	800482a <prvProcessReceivedCommands+0x196>
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e7fe      	b.n	80047a0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80047b4:	e039      	b.n	800482a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <prvProcessReceivedCommands+0x156>
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e7fe      	b.n	80047e8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	18d1      	adds	r1, r2, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047f8:	f7ff ff0a 	bl	8004610 <prvInsertTimerInActiveList>
					break;
 80047fc:	e015      	b.n	800482a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800480c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800480e:	f000 fbc1 	bl	8004f94 <vPortFree>
 8004812:	e00a      	b.n	800482a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004826:	e000      	b.n	800482a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004828:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <prvProcessReceivedCommands+0x1b4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	1d39      	adds	r1, r7, #4
 8004830:	2200      	movs	r2, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fc3a 	bl	80030ac <xQueueReceive>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f47f af2e 	bne.w	800469c <prvProcessReceivedCommands+0x8>
	}
}
 8004840:	bf00      	nop
 8004842:	3730      	adds	r7, #48	; 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000c20 	.word	0x20000c20

0800484c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004852:	e047      	b.n	80048e4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004854:	4b2d      	ldr	r3, [pc, #180]	; (800490c <prvSwitchTimerLists+0xc0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485e:	4b2b      	ldr	r3, [pc, #172]	; (800490c <prvSwitchTimerLists+0xc0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe f967 	bl	8002b40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02d      	beq.n	80048e4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	429a      	cmp	r2, r3
 8004898:	d90e      	bls.n	80048b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048a6:	4b19      	ldr	r3, [pc, #100]	; (800490c <prvSwitchTimerLists+0xc0>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4619      	mov	r1, r3
 80048b0:	4610      	mov	r0, r2
 80048b2:	f7fe f90c 	bl	8002ace <vListInsert>
 80048b6:	e015      	b.n	80048e4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048b8:	2300      	movs	r3, #0
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	2100      	movs	r1, #0
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff fd68 	bl	8004398 <xTimerGenericCommand>
 80048c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <prvSwitchTimerLists+0x98>
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	e7fe      	b.n	80048e2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <prvSwitchTimerLists+0xc0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1b2      	bne.n	8004854 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <prvSwitchTimerLists+0xc0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <prvSwitchTimerLists+0xc4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a04      	ldr	r2, [pc, #16]	; (800490c <prvSwitchTimerLists+0xc0>)
 80048fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048fc:	4a04      	ldr	r2, [pc, #16]	; (8004910 <prvSwitchTimerLists+0xc4>)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6013      	str	r3, [r2, #0]
}
 8004902:	bf00      	nop
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000c18 	.word	0x20000c18
 8004910:	20000c1c 	.word	0x20000c1c

08004914 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800491a:	f000 f95f 	bl	8004bdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <prvCheckForValidListAndQueue+0x60>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d120      	bne.n	8004968 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004926:	4814      	ldr	r0, [pc, #80]	; (8004978 <prvCheckForValidListAndQueue+0x64>)
 8004928:	f7fe f880 	bl	8002a2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800492c:	4813      	ldr	r0, [pc, #76]	; (800497c <prvCheckForValidListAndQueue+0x68>)
 800492e:	f7fe f87d 	bl	8002a2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004932:	4b13      	ldr	r3, [pc, #76]	; (8004980 <prvCheckForValidListAndQueue+0x6c>)
 8004934:	4a10      	ldr	r2, [pc, #64]	; (8004978 <prvCheckForValidListAndQueue+0x64>)
 8004936:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004938:	4b12      	ldr	r3, [pc, #72]	; (8004984 <prvCheckForValidListAndQueue+0x70>)
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <prvCheckForValidListAndQueue+0x68>)
 800493c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800493e:	2300      	movs	r3, #0
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	4b11      	ldr	r3, [pc, #68]	; (8004988 <prvCheckForValidListAndQueue+0x74>)
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <prvCheckForValidListAndQueue+0x78>)
 8004946:	2110      	movs	r1, #16
 8004948:	200a      	movs	r0, #10
 800494a:	f7fe f98b 	bl	8002c64 <xQueueGenericCreateStatic>
 800494e:	4602      	mov	r2, r0
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <prvCheckForValidListAndQueue+0x60>)
 8004952:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <prvCheckForValidListAndQueue+0x60>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <prvCheckForValidListAndQueue+0x60>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	490b      	ldr	r1, [pc, #44]	; (8004990 <prvCheckForValidListAndQueue+0x7c>)
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fd8e 	bl	8003484 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004968:	f000 f966 	bl	8004c38 <vPortExitCritical>
}
 800496c:	bf00      	nop
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000c20 	.word	0x20000c20
 8004978:	20000bf0 	.word	0x20000bf0
 800497c:	20000c04 	.word	0x20000c04
 8004980:	20000c18 	.word	0x20000c18
 8004984:	20000c1c 	.word	0x20000c1c
 8004988:	20000ccc 	.word	0x20000ccc
 800498c:	20000c2c 	.word	0x20000c2c
 8004990:	08005274 	.word	0x08005274

08004994 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3b04      	subs	r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3b04      	subs	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f023 0201 	bic.w	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b04      	subs	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049c4:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <pxPortInitialiseStack+0x64>)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b14      	subs	r3, #20
 80049ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3b04      	subs	r3, #4
 80049da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f06f 0202 	mvn.w	r2, #2
 80049e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3b20      	subs	r3, #32
 80049e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049ea:	68fb      	ldr	r3, [r7, #12]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	080049fd 	.word	0x080049fd

080049fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <prvTaskExitError+0x50>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d009      	beq.n	8004a24 <prvTaskExitError+0x28>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e7fe      	b.n	8004a22 <prvTaskExitError+0x26>
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a36:	bf00      	nop
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0fc      	beq.n	8004a38 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000014 	.word	0x20000014

08004a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pxCurrentTCBConst2>)
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6808      	ldr	r0, [r1, #0]
 8004a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	f380 8809 	msr	PSP, r0
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8811 	msr	BASEPRI, r0
 8004a6a:	4770      	bx	lr
 8004a6c:	f3af 8000 	nop.w

08004a70 <pxCurrentTCBConst2>:
 8004a70:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a78:	4808      	ldr	r0, [pc, #32]	; (8004a9c <prvPortStartFirstTask+0x24>)
 8004a7a:	6800      	ldr	r0, [r0, #0]
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f380 8808 	msr	MSP, r0
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8814 	msr	CONTROL, r0
 8004a8a:	b662      	cpsie	i
 8004a8c:	b661      	cpsie	f
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	df00      	svc	0
 8004a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed08 	.word	0xe000ed08

08004aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004aa6:	4b44      	ldr	r3, [pc, #272]	; (8004bb8 <xPortStartScheduler+0x118>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a44      	ldr	r2, [pc, #272]	; (8004bbc <xPortStartScheduler+0x11c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d109      	bne.n	8004ac4 <xPortStartScheduler+0x24>
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e7fe      	b.n	8004ac2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ac4:	4b3c      	ldr	r3, [pc, #240]	; (8004bb8 <xPortStartScheduler+0x118>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3d      	ldr	r2, [pc, #244]	; (8004bc0 <xPortStartScheduler+0x120>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d109      	bne.n	8004ae2 <xPortStartScheduler+0x42>
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e7fe      	b.n	8004ae0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ae2:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <xPortStartScheduler+0x124>)
 8004ae4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4b30      	ldr	r3, [pc, #192]	; (8004bc8 <xPortStartScheduler+0x128>)
 8004b08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b0a:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b10:	e009      	b.n	8004b26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004b12:	4b2e      	ldr	r3, [pc, #184]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	4a2c      	ldr	r2, [pc, #176]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004b1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2e:	2b80      	cmp	r3, #128	; 0x80
 8004b30:	d0ef      	beq.n	8004b12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b32:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f1c3 0307 	rsb	r3, r3, #7
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d009      	beq.n	8004b52 <xPortStartScheduler+0xb2>
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	e7fe      	b.n	8004b50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b52:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004b5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b64:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004b66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b70:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <xPortStartScheduler+0x130>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <xPortStartScheduler+0x130>)
 8004b76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b7c:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <xPortStartScheduler+0x130>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <xPortStartScheduler+0x130>)
 8004b82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b88:	f000 f8d6 	bl	8004d38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b92:	f000 f8f5 	bl	8004d80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ba0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ba2:	f7ff ff69 	bl	8004a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ba6:	f7ff f871 	bl	8003c8c <vTaskSwitchContext>
	prvTaskExitError();
 8004baa:	f7ff ff27 	bl	80049fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	e000ed00 	.word	0xe000ed00
 8004bbc:	410fc271 	.word	0x410fc271
 8004bc0:	410fc270 	.word	0x410fc270
 8004bc4:	e000e400 	.word	0xe000e400
 8004bc8:	20000d1c 	.word	0x20000d1c
 8004bcc:	20000d20 	.word	0x20000d20
 8004bd0:	e000ed20 	.word	0xe000ed20
 8004bd4:	20000014 	.word	0x20000014
 8004bd8:	e000ef34 	.word	0xe000ef34

08004bdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <vPortEnterCritical+0x54>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <vPortEnterCritical+0x54>)
 8004bfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <vPortEnterCritical+0x54>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d10e      	bne.n	8004c24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <vPortEnterCritical+0x58>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <vPortEnterCritical+0x48>
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	603b      	str	r3, [r7, #0]
 8004c22:	e7fe      	b.n	8004c22 <vPortEnterCritical+0x46>
	}
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	20000014 	.word	0x20000014
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c3e:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <vPortExitCritical+0x4c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <vPortExitCritical+0x22>
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	e7fe      	b.n	8004c58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <vPortExitCritical+0x4c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <vPortExitCritical+0x4c>)
 8004c62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <vPortExitCritical+0x4c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <vPortExitCritical+0x3e>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000014 	.word	0x20000014
	...

08004c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c90:	f3ef 8009 	mrs	r0, PSP
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	4b15      	ldr	r3, [pc, #84]	; (8004cf0 <pxCurrentTCBConst>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	f01e 0f10 	tst.w	lr, #16
 8004ca0:	bf08      	it	eq
 8004ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004caa:	6010      	str	r0, [r2, #0]
 8004cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cb4:	f380 8811 	msr	BASEPRI, r0
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f7fe ffe4 	bl	8003c8c <vTaskSwitchContext>
 8004cc4:	f04f 0000 	mov.w	r0, #0
 8004cc8:	f380 8811 	msr	BASEPRI, r0
 8004ccc:	bc09      	pop	{r0, r3}
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	6808      	ldr	r0, [r1, #0]
 8004cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd6:	f01e 0f10 	tst.w	lr, #16
 8004cda:	bf08      	it	eq
 8004cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ce0:	f380 8809 	msr	PSP, r0
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	f3af 8000 	nop.w

08004cf0 <pxCurrentTCBConst>:
 8004cf0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop

08004cf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d10:	f7fe ff04 	bl	8003b1c <xTaskIncrementTick>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <SysTick_Handler+0x3c>)
 8004d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	2300      	movs	r3, #0
 8004d24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <vPortSetupTimerInterrupt+0x34>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <vPortSetupTimerInterrupt+0x38>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <vPortSetupTimerInterrupt+0x3c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <vPortSetupTimerInterrupt+0x40>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	099b      	lsrs	r3, r3, #6
 8004d54:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <vPortSetupTimerInterrupt+0x44>)
 8004d56:	3b01      	subs	r3, #1
 8004d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d5a:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <vPortSetupTimerInterrupt+0x34>)
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	601a      	str	r2, [r3, #0]
}
 8004d60:	bf00      	nop
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	e000e010 	.word	0xe000e010
 8004d70:	e000e018 	.word	0xe000e018
 8004d74:	20000008 	.word	0x20000008
 8004d78:	10624dd3 	.word	0x10624dd3
 8004d7c:	e000e014 	.word	0xe000e014

08004d80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d90 <vPortEnableVFP+0x10>
 8004d84:	6801      	ldr	r1, [r0, #0]
 8004d86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d8a:	6001      	str	r1, [r0, #0]
 8004d8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d8e:	bf00      	nop
 8004d90:	e000ed88 	.word	0xe000ed88

08004d94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d9a:	f3ef 8305 	mrs	r3, IPSR
 8004d9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b0f      	cmp	r3, #15
 8004da4:	d913      	bls.n	8004dce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004da6:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <vPortValidateInterruptPriority+0x6c>)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004db0:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <vPortValidateInterruptPriority+0x70>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	7afa      	ldrb	r2, [r7, #11]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d209      	bcs.n	8004dce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	e7fe      	b.n	8004dcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dce:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <vPortValidateInterruptPriority+0x74>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <vPortValidateInterruptPriority+0x78>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d909      	bls.n	8004df2 <vPortValidateInterruptPriority+0x5e>
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	e7fe      	b.n	8004df0 <vPortValidateInterruptPriority+0x5c>
	}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e3f0 	.word	0xe000e3f0
 8004e04:	20000d1c 	.word	0x20000d1c
 8004e08:	e000ed0c 	.word	0xe000ed0c
 8004e0c:	20000d20 	.word	0x20000d20

08004e10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e1c:	f7fe fdc4 	bl	80039a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e20:	4b57      	ldr	r3, [pc, #348]	; (8004f80 <pvPortMalloc+0x170>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e28:	f000 f90c 	bl	8005044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e2c:	4b55      	ldr	r3, [pc, #340]	; (8004f84 <pvPortMalloc+0x174>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f040 808c 	bne.w	8004f52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01c      	beq.n	8004e7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004e40:	2208      	movs	r2, #8
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4413      	add	r3, r2
 8004e46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d013      	beq.n	8004e7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f023 0307 	bic.w	r3, r3, #7
 8004e58:	3308      	adds	r3, #8
 8004e5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <pvPortMalloc+0x6a>
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e7fe      	b.n	8004e78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d068      	beq.n	8004f52 <pvPortMalloc+0x142>
 8004e80:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <pvPortMalloc+0x178>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d863      	bhi.n	8004f52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e8a:	4b40      	ldr	r3, [pc, #256]	; (8004f8c <pvPortMalloc+0x17c>)
 8004e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e8e:	4b3f      	ldr	r3, [pc, #252]	; (8004f8c <pvPortMalloc+0x17c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e94:	e004      	b.n	8004ea0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d903      	bls.n	8004eb2 <pvPortMalloc+0xa2>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f1      	bne.n	8004e96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004eb2:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <pvPortMalloc+0x170>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d04a      	beq.n	8004f52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	4413      	add	r3, r2
 8004ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	1ad2      	subs	r2, r2, r3
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d91e      	bls.n	8004f1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <pvPortMalloc+0xf4>
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e7fe      	b.n	8004f02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	1ad2      	subs	r2, r2, r3
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f16:	69b8      	ldr	r0, [r7, #24]
 8004f18:	f000 f8f6 	bl	8005108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <pvPortMalloc+0x178>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <pvPortMalloc+0x178>)
 8004f28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f2a:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <pvPortMalloc+0x178>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <pvPortMalloc+0x180>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d203      	bcs.n	8004f3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <pvPortMalloc+0x178>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <pvPortMalloc+0x180>)
 8004f3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <pvPortMalloc+0x174>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f52:	f7fe fd37 	bl	80039c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <pvPortMalloc+0x164>
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e7fe      	b.n	8004f72 <pvPortMalloc+0x162>
	return pvReturn;
 8004f74:	69fb      	ldr	r3, [r7, #28]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3728      	adds	r7, #40	; 0x28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	2000492c 	.word	0x2000492c
 8004f84:	20004938 	.word	0x20004938
 8004f88:	20004930 	.word	0x20004930
 8004f8c:	20004924 	.word	0x20004924
 8004f90:	20004934 	.word	0x20004934

08004f94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d046      	beq.n	8005034 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	425b      	negs	r3, r3
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	4b20      	ldr	r3, [pc, #128]	; (800503c <vPortFree+0xa8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <vPortFree+0x42>
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e7fe      	b.n	8004fd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <vPortFree+0x5e>
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	e7fe      	b.n	8004ff0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <vPortFree+0xa8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d019      	beq.n	8005034 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d115      	bne.n	8005034 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <vPortFree+0xa8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	43db      	mvns	r3, r3
 8005012:	401a      	ands	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005018:	f7fe fcc6 	bl	80039a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <vPortFree+0xac>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4413      	add	r3, r2
 8005026:	4a06      	ldr	r2, [pc, #24]	; (8005040 <vPortFree+0xac>)
 8005028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800502a:	6938      	ldr	r0, [r7, #16]
 800502c:	f000 f86c 	bl	8005108 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005030:	f7fe fcc8 	bl	80039c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005034:	bf00      	nop
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20004938 	.word	0x20004938
 8005040:	20004930 	.word	0x20004930

08005044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800504a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800504e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005050:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <prvHeapInit+0xac>)
 8005052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3307      	adds	r3, #7
 8005062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0307 	bic.w	r3, r3, #7
 800506a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <prvHeapInit+0xac>)
 8005074:	4413      	add	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <prvHeapInit+0xb0>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005082:	4b1c      	ldr	r3, [pc, #112]	; (80050f4 <prvHeapInit+0xb0>)
 8005084:	2200      	movs	r2, #0
 8005086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	4413      	add	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005090:	2208      	movs	r2, #8
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0307 	bic.w	r3, r3, #7
 800509e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <prvHeapInit+0xb4>)
 80050a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <prvHeapInit+0xb4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <prvHeapInit+0xb4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	1ad2      	subs	r2, r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <prvHeapInit+0xb4>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <prvHeapInit+0xb8>)
 80050d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a09      	ldr	r2, [pc, #36]	; (8005100 <prvHeapInit+0xbc>)
 80050da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <prvHeapInit+0xc0>)
 80050de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050e2:	601a      	str	r2, [r3, #0]
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	20000d24 	.word	0x20000d24
 80050f4:	20004924 	.word	0x20004924
 80050f8:	2000492c 	.word	0x2000492c
 80050fc:	20004934 	.word	0x20004934
 8005100:	20004930 	.word	0x20004930
 8005104:	20004938 	.word	0x20004938

08005108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005110:	4b28      	ldr	r3, [pc, #160]	; (80051b4 <prvInsertBlockIntoFreeList+0xac>)
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e002      	b.n	800511c <prvInsertBlockIntoFreeList+0x14>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d8f7      	bhi.n	8005116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	4413      	add	r3, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	429a      	cmp	r2, r3
 8005136:	d108      	bne.n	800514a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	441a      	add	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	441a      	add	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d118      	bne.n	8005190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d00d      	beq.n	8005186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e008      	b.n	8005198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e003      	b.n	8005198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d002      	beq.n	80051a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20004924 	.word	0x20004924
 80051b8:	2000492c 	.word	0x2000492c

080051bc <__libc_init_array>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	4e0d      	ldr	r6, [pc, #52]	; (80051f4 <__libc_init_array+0x38>)
 80051c0:	4c0d      	ldr	r4, [pc, #52]	; (80051f8 <__libc_init_array+0x3c>)
 80051c2:	1ba4      	subs	r4, r4, r6
 80051c4:	10a4      	asrs	r4, r4, #2
 80051c6:	2500      	movs	r5, #0
 80051c8:	42a5      	cmp	r5, r4
 80051ca:	d109      	bne.n	80051e0 <__libc_init_array+0x24>
 80051cc:	4e0b      	ldr	r6, [pc, #44]	; (80051fc <__libc_init_array+0x40>)
 80051ce:	4c0c      	ldr	r4, [pc, #48]	; (8005200 <__libc_init_array+0x44>)
 80051d0:	f000 f82c 	bl	800522c <_init>
 80051d4:	1ba4      	subs	r4, r4, r6
 80051d6:	10a4      	asrs	r4, r4, #2
 80051d8:	2500      	movs	r5, #0
 80051da:	42a5      	cmp	r5, r4
 80051dc:	d105      	bne.n	80051ea <__libc_init_array+0x2e>
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051e4:	4798      	blx	r3
 80051e6:	3501      	adds	r5, #1
 80051e8:	e7ee      	b.n	80051c8 <__libc_init_array+0xc>
 80051ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051ee:	4798      	blx	r3
 80051f0:	3501      	adds	r5, #1
 80051f2:	e7f2      	b.n	80051da <__libc_init_array+0x1e>
 80051f4:	08005308 	.word	0x08005308
 80051f8:	08005308 	.word	0x08005308
 80051fc:	08005308 	.word	0x08005308
 8005200:	0800530c 	.word	0x0800530c

08005204 <memcpy>:
 8005204:	b510      	push	{r4, lr}
 8005206:	1e43      	subs	r3, r0, #1
 8005208:	440a      	add	r2, r1
 800520a:	4291      	cmp	r1, r2
 800520c:	d100      	bne.n	8005210 <memcpy+0xc>
 800520e:	bd10      	pop	{r4, pc}
 8005210:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005214:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005218:	e7f7      	b.n	800520a <memcpy+0x6>

0800521a <memset>:
 800521a:	4402      	add	r2, r0
 800521c:	4603      	mov	r3, r0
 800521e:	4293      	cmp	r3, r2
 8005220:	d100      	bne.n	8005224 <memset+0xa>
 8005222:	4770      	bx	lr
 8005224:	f803 1b01 	strb.w	r1, [r3], #1
 8005228:	e7f9      	b.n	800521e <memset+0x4>
	...

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
